// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fk-incoming.proto

/*
Package fk_incoming is a generated protocol buffer package.

It is generated from these files:
	fk-incoming.proto

It has these top-level messages:
	Field
	Message
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// This is unnecessary because we'll know which field is which type when
// we're told the field names when the more detailed definition is registered.
type Field_Type int32

const (
	Field_I32   Field_Type = 0
	Field_U32   Field_Type = 1
	Field_FLOAT Field_Type = 2
)

var Field_Type_name = map[int32]string{
	0: "I32",
	1: "U32",
	2: "FLOAT",
}
var Field_Type_value = map[string]int32{
	"I32":   0,
	"U32":   1,
	"FLOAT": 2,
}

func (x Field_Type) String() string {
	return proto.EnumName(Field_Type_name, int32(x))
}
func (Field_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Field struct {
	Type Field_Type `protobuf:"varint,1,opt,name=type,enum=fk_incoming.Field_Type" json:"type,omitempty"`
	I32  int32      `protobuf:"varint,2,opt,name=i32" json:"i32,omitempty"`
	U32  uint32     `protobuf:"varint,3,opt,name=u32" json:"u32,omitempty"`
	F32  float32    `protobuf:"fixed32,4,opt,name=f32" json:"f32,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Field) GetType() Field_Type {
	if m != nil {
		return m.Type
	}
	return Field_I32
}

func (m *Field) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *Field) GetU32() uint32 {
	if m != nil {
		return m.U32
	}
	return 0
}

func (m *Field) GetF32() float32 {
	if m != nil {
		return m.F32
	}
	return 0
}

type Message struct {
	Time   uint32   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Id     uint32   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Fields []*Field `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Message) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*Field)(nil), "fk_incoming.Field")
	proto.RegisterType((*Message)(nil), "fk_incoming.Message")
	proto.RegisterEnum("fk_incoming.Field_Type", Field_Type_name, Field_Type_value)
}

func init() { proto.RegisterFile("fk-incoming.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x4d, 0xb2, 0xdb, 0xe2, 0x94, 0x2d, 0x71, 0x2e, 0xe6, 0x18, 0xd6, 0x4b, 0x50, 0xcc,
	0x21, 0x79, 0x02, 0x2f, 0x05, 0x41, 0x11, 0x42, 0x3d, 0x78, 0x12, 0x75, 0x93, 0x12, 0x6a, 0xbb,
	0x8b, 0xbb, 0x1e, 0xfa, 0x14, 0xbe, 0xb2, 0x4c, 0x54, 0x10, 0x7a, 0xfb, 0xf8, 0xf9, 0x48, 0x3e,
	0x06, 0xce, 0xd2, 0xf6, 0x3a, 0xef, 0xdf, 0xfa, 0x5d, 0xde, 0x6f, 0xec, 0xf0, 0xd1, 0x4f, 0x3d,
	0x2e, 0xd2, 0xf6, 0xf9, 0x6f, 0x6a, 0xbf, 0x18, 0xd4, 0xab, 0x1c, 0xdf, 0x3b, 0xbc, 0x82, 0x6a,
	0x3a, 0x0c, 0x51, 0x31, 0xcd, 0xcc, 0xd2, 0x9d, 0xdb, 0x7f, 0x96, 0x2d, 0x86, 0x5d, 0x1f, 0x86,
	0x18, 0x8a, 0x84, 0x12, 0x44, 0xf6, 0x4e, 0x71, 0xcd, 0x4c, 0x1d, 0x08, 0x69, 0xf9, 0xf4, 0x4e,
	0x09, 0xcd, 0x4c, 0x13, 0x08, 0x69, 0x49, 0xde, 0xa9, 0x4a, 0x33, 0xc3, 0x03, 0x61, 0x7b, 0x01,
	0x15, 0xbd, 0x81, 0x73, 0x10, 0xb7, 0xde, 0xc9, 0x13, 0x82, 0x47, 0xef, 0x24, 0xc3, 0x53, 0xa8,
	0x57, 0x77, 0x0f, 0x37, 0x6b, 0xc9, 0xdb, 0x27, 0x98, 0xdf, 0xc7, 0x71, 0x7c, 0xd9, 0x44, 0x44,
	0xa8, 0xa6, 0xbc, 0xfb, 0x49, 0x6a, 0x42, 0x61, 0x5c, 0x02, 0xcf, 0x5d, 0xf9, 0xb8, 0x09, 0x3c,
	0x77, 0x78, 0x09, 0xb3, 0x44, 0x75, 0xa3, 0x12, 0x5a, 0x98, 0x85, 0xc3, 0xe3, 0xf0, 0xf0, 0x6b,
	0xbc, 0xce, 0xca, 0x01, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0xb2, 0xf6, 0xf6, 0x15,
	0x01, 0x00, 0x00,
}
