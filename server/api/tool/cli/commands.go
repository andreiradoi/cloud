// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": CLI Commands
//
// Command:
// $ main

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fieldkit/cloud/server/api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AddFirmwareCommand is the command line data structure for the add action of Firmware
	AddFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteFirmwareCommand is the command line data structure for the delete action of Firmware
	DeleteFirmwareCommand struct {
		FirmwareID  int
		PrettyPrint bool
	}

	// DownloadFirmwareCommand is the command line data structure for the download action of Firmware
	DownloadFirmwareCommand struct {
		FirmwareID  int
		PrettyPrint bool
	}

	// ListFirmwareCommand is the command line data structure for the list action of Firmware
	ListFirmwareCommand struct {
		Module      string
		Page        int
		PageSize    int
		Profile     string
		PrettyPrint bool
	}

	// DeviceDataDataCommand is the command line data structure for the device data action of data
	DeviceDataDataCommand struct {
		DeviceID    string
		FirstBlock  int
		LastBlock   int
		Page        int
		PageSize    int
		PrettyPrint bool
	}

	// DeviceSummaryDataCommand is the command line data structure for the device summary action of data
	DeviceSummaryDataCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// ProjectGetIDPictureCommand is the command line data structure for the project get id action of picture
	ProjectGetIDPictureCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UserGetIDPictureCommand is the command line data structure for the user get id action of picture
	UserGetIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// UserSaveIDPictureCommand is the command line data structure for the user save id action of picture
	UserSaveIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `Add firmware`,
	}
	tmp18 := new(AddFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "etag": "Quod provident dolorum provident eligendi ut.",
   "meta": "Et ratione porro iusto quaerat ea quibusdam.",
   "module": "Autem et autem aliquid.",
   "profile": "Natus dolores quo suscipit voluptatem magni in.",
   "url": "Asperiores nostrum."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `Delete firmware`,
	}
	tmp19 := new(DeleteFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware/FIRMWAREID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-data",
		Short: `Retrieve data`,
	}
	tmp20 := new(DeviceDataDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-summary",
		Short: `Retrieve summary`,
	}
	tmp21 := new(DeviceSummaryDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/summary"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "download",
		Short: ``,
	}
	tmp22 := new(DownloadFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware/FIRMWAREID/download"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `List firmware`,
	}
	tmp23 := new(ListFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "project-getid",
		Short: `Get a project's picture`,
	}
	tmp24 := new(ProjectGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/projects/PROJECTID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-getid",
		Short: `Get a user's picture`,
	}
	tmp25 := new(UserGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-saveid",
		Short: `Save a user's picture`,
	}
	tmp26 := new(UserSaveIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AddFirmwareCommand command.
func (cmd *AddFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	var payload client.AddFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteFirmwareCommand command.
func (cmd *DeleteFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/firmware/%v", cmd.FirmwareID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var firmwareID int
	cc.Flags().IntVar(&cmd.FirmwareID, "firmwareId", firmwareID, ``)
}

// Run makes the HTTP request corresponding to the DownloadFirmwareCommand command.
func (cmd *DownloadFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/firmware/%v/download", cmd.FirmwareID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownloadFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownloadFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var firmwareID int
	cc.Flags().IntVar(&cmd.FirmwareID, "firmwareId", firmwareID, ``)
}

// Run makes the HTTP request corresponding to the ListFirmwareCommand command.
func (cmd *ListFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListFirmware(ctx, path, stringFlagVal("module", cmd.Module), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), stringFlagVal("profile", cmd.Profile))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var module string
	cc.Flags().StringVar(&cmd.Module, "module", module, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "profile", profile, ``)
}

// Run makes the HTTP request corresponding to the DeviceDataDataCommand command.
func (cmd *DeviceDataDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceDataData(ctx, path, intFlagVal("firstBlock", cmd.FirstBlock), intFlagVal("lastBlock", cmd.LastBlock), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceDataDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var firstBlock int
	cc.Flags().IntVar(&cmd.FirstBlock, "firstBlock", firstBlock, ``)
	var lastBlock int
	cc.Flags().IntVar(&cmd.LastBlock, "lastBlock", lastBlock, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
}

// Run makes the HTTP request corresponding to the DeviceSummaryDataCommand command.
func (cmd *DeviceSummaryDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/summary", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceSummaryData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceSummaryDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the ProjectGetIDPictureCommand command.
func (cmd *ProjectGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/picture", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProjectGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProjectGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UserGetIDPictureCommand command.
func (cmd *UserGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the UserSaveIDPictureCommand command.
func (cmd *UserSaveIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserSaveIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserSaveIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}
