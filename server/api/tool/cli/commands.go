// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": CLI Commands
//
// Command:
// $ main

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fieldkit/cloud/server/api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// ListBySourceExportCommand is the command line data structure for the list by source action of Export
	ListBySourceExportCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// AddFirmwareCommand is the command line data structure for the add action of Firmware
	AddFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// CheckFirmwareCommand is the command line data structure for the check action of Firmware
	CheckFirmwareCommand struct {
		DeviceID    string
		Module      string
		IfNoneMatch string
		PrettyPrint bool
	}

	// ListFirmwareCommand is the command line data structure for the list action of Firmware
	ListFirmwareCommand struct {
		PrettyPrint bool
	}

	// UpdateFirmwareCommand is the command line data structure for the update action of Firmware
	UpdateFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GeographicalQueryGeojsonCommand is the command line data structure for the geographical query action of GeoJSON
	GeographicalQueryGeojsonCommand struct {
		PrettyPrint bool
	}

	// ListByIDGeojsonCommand is the command line data structure for the list by id action of GeoJSON
	ListByIDGeojsonCommand struct {
		FeatureID   int
		PrettyPrint bool
	}

	// ListBySourceGeojsonCommand is the command line data structure for the list by source action of GeoJSON
	ListBySourceGeojsonCommand struct {
		SourceID    int
		Descending  string
		PrettyPrint bool
	}

	// ListBySourceQueryCommand is the command line data structure for the list by source action of Query
	ListBySourceQueryCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// CheckTasksCommand is the command line data structure for the check action of Tasks
	CheckTasksCommand struct {
		PrettyPrint bool
	}

	// FiveTasksCommand is the command line data structure for the five action of Tasks
	FiveTasksCommand struct {
		PrettyPrint bool
	}

	// StreamsProcessTasksCommand is the command line data structure for the streams/process action of Tasks
	StreamsProcessTasksCommand struct {
		ID          string
		PrettyPrint bool
	}

	// AddAdministratorCommand is the command line data structure for the add action of administrator
	AddAdministratorCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// DeleteAdministratorCommand is the command line data structure for the delete action of administrator
	DeleteAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// GetAdministratorCommand is the command line data structure for the get action of administrator
	GetAdministratorCommand struct {
		// Project slug
		Project string
		// Username
		Username    string
		PrettyPrint bool
	}

	// GetIDAdministratorCommand is the command line data structure for the get id action of administrator
	GetIDAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// ListAdministratorCommand is the command line data structure for the list action of administrator
	ListAdministratorCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDAdministratorCommand is the command line data structure for the list id action of administrator
	ListIDAdministratorCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// AddDeviceCommand is the command line data structure for the add action of device
	AddDeviceCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// GetIDDeviceCommand is the command line data structure for the get id action of device
	GetIDDeviceCommand struct {
		ID          int
		PrettyPrint bool
	}

	// ListDeviceCommand is the command line data structure for the list action of device
	ListDeviceCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// UpdateDeviceCommand is the command line data structure for the update action of device
	UpdateDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// UpdateLocationDeviceCommand is the command line data structure for the update location action of device
	UpdateLocationDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// UpdateSchemaDeviceCommand is the command line data structure for the update schema action of device
	UpdateSchemaDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// AddExpeditionCommand is the command line data structure for the add action of expedition
	AddExpeditionCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// GetExpeditionCommand is the command line data structure for the get action of expedition
	GetExpeditionCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDExpeditionCommand is the command line data structure for the get id action of expedition
	GetIDExpeditionCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ListExpeditionCommand is the command line data structure for the list action of expedition
	ListExpeditionCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDExpeditionCommand is the command line data structure for the list id action of expedition
	ListIDExpeditionCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UpdateExpeditionCommand is the command line data structure for the update action of expedition
	UpdateExpeditionCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddMemberCommand is the command line data structure for the add action of member
	AddMemberCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		PrettyPrint bool
	}

	// DeleteMemberCommand is the command line data structure for the delete action of member
	DeleteMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// GetMemberCommand is the command line data structure for the get action of member
	GetMemberCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team string
		// Username
		Username    string
		PrettyPrint bool
	}

	// GetIDMemberCommand is the command line data structure for the get id action of member
	GetIDMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// ListMemberCommand is the command line data structure for the list action of member
	ListMemberCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// ListIDMemberCommand is the command line data structure for the list id action of member
	ListIDMemberCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// UpdateMemberCommand is the command line data structure for the update action of member
	UpdateMemberCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// ExpeditionGetIDPictureCommand is the command line data structure for the expedition get id action of picture
	ExpeditionGetIDPictureCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ProjectGetIDPictureCommand is the command line data structure for the project get id action of picture
	ProjectGetIDPictureCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UserGetIDPictureCommand is the command line data structure for the user get id action of picture
	UserGetIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// AddProjectCommand is the command line data structure for the add action of project
	AddProjectCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetProjectCommand is the command line data structure for the get action of project
	GetProjectCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDProjectCommand is the command line data structure for the get id action of project
	GetIDProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// ListProjectCommand is the command line data structure for the list action of project
	ListProjectCommand struct {
		PrettyPrint bool
	}

	// ListCurrentProjectCommand is the command line data structure for the list current action of project
	ListCurrentProjectCommand struct {
		PrettyPrint bool
	}

	// UpdateProjectCommand is the command line data structure for the update action of project
	UpdateProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// ListSourceCommand is the command line data structure for the list action of source
	ListSourceCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListExpeditionIDSourceCommand is the command line data structure for the list expedition id action of source
	ListExpeditionIDSourceCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ListIDSourceCommand is the command line data structure for the list id action of source
	ListIDSourceCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// SummaryByIDSourceCommand is the command line data structure for the summary by id action of source
	SummaryByIDSourceCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// TemporalClusterGeometryByIDSourceCommand is the command line data structure for the temporal cluster geometry by id action of source
	TemporalClusterGeometryByIDSourceCommand struct {
		ClusterID   int
		SourceID    int
		PrettyPrint bool
	}

	// UpdateSourceCommand is the command line data structure for the update action of source
	UpdateSourceCommand struct {
		Payload     string
		ContentType string
		SourceID    int
		PrettyPrint bool
	}

	// AddSourceTokenCommand is the command line data structure for the add action of source_token
	AddSourceTokenCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// DeleteSourceTokenCommand is the command line data structure for the delete action of source_token
	DeleteSourceTokenCommand struct {
		SourceTokenID int
		PrettyPrint   bool
	}

	// ListSourceTokenCommand is the command line data structure for the list action of source_token
	ListSourceTokenCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDSourceTokenCommand is the command line data structure for the list id action of source_token
	ListIDSourceTokenCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddTeamCommand is the command line data structure for the add action of team
	AddTeamCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// DeleteTeamCommand is the command line data structure for the delete action of team
	DeleteTeamCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// GetTeamCommand is the command line data structure for the get action of team
	GetTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// GetIDTeamCommand is the command line data structure for the get id action of team
	GetIDTeamCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// ListTeamCommand is the command line data structure for the list action of team
	ListTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDTeamCommand is the command line data structure for the list id action of team
	ListIDTeamCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// UpdateTeamCommand is the command line data structure for the update action of team
	UpdateTeamCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		PrettyPrint bool
	}

	// AddTwitterCommand is the command line data structure for the add action of twitter
	AddTwitterCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// CallbackTwitterCommand is the command line data structure for the callback action of twitter
	CallbackTwitterCommand struct {
		OauthToken    string
		OauthVerifier string
		PrettyPrint   bool
	}

	// GetIDTwitterCommand is the command line data structure for the get id action of twitter
	GetIDTwitterCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// ListTwitterCommand is the command line data structure for the list action of twitter
	ListTwitterCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDTwitterCommand is the command line data structure for the list id action of twitter
	ListIDTwitterCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddUserCommand is the command line data structure for the add action of user
	AddUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetUserCommand is the command line data structure for the get action of user
	GetUserCommand struct {
		Username    string
		PrettyPrint bool
	}

	// GetCurrentUserCommand is the command line data structure for the get current action of user
	GetCurrentUserCommand struct {
		PrettyPrint bool
	}

	// GetIDUserCommand is the command line data structure for the get id action of user
	GetIDUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// ListUserCommand is the command line data structure for the list action of user
	ListUserCommand struct {
		PrettyPrint bool
	}

	// LoginUserCommand is the command line data structure for the login action of user
	LoginUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// LogoutUserCommand is the command line data structure for the logout action of user
	LogoutUserCommand struct {
		PrettyPrint bool
	}

	// RefreshUserCommand is the command line data structure for the refresh action of user
	RefreshUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// UpdateUserCommand is the command line data structure for the update action of user
	UpdateUserCommand struct {
		Payload     string
		ContentType string
		UserID      int
		PrettyPrint bool
	}

	// ValidateUserCommand is the command line data structure for the validate action of user
	ValidateUserCommand struct {
		Token       string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp53 := new(AddFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "etag": "Mollitia quaerat occaecati est.",
   "meta": "Dolorum voluptas omnis velit quod accusamus.",
   "module": "A quia aut.",
   "url": "Rem atque in debitis."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp53.Run(c, args) },
	}
	tmp53.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp53.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp54 := new(AddAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators"]`,
		Short: ``,
		Long: `

Payload example:

{
   "userId": 2783695272769963795
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp54.Run(c, args) },
	}
	tmp54.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp54.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp55 := new(AddDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/expeditions/EXPEDITIONID/sources/devices"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Ea repudiandae veritatis delectus sit veritatis.",
   "name": "Ad et corporis et quasi laborum."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp55.Run(c, args) },
	}
	tmp55.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp55.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp56 := new(AddExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECTID/expeditions"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Autem soluta error.",
   "name": "Non aut rem.",
   "slug": "l3ug0j6fck"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp56.Run(c, args) },
	}
	tmp56.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp56.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp57 := new(AddMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role": "Consequatur qui perspiciatis quis dolorem.",
   "userId": 6402756210134396971
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp57.Run(c, args) },
	}
	tmp57.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp57.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp58 := new(AddProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Voluptatem placeat.",
   "name": "Dolores praesentium itaque impedit aliquam.",
   "slug": "3caow4svy8"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp58.Run(c, args) },
	}
	tmp58.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp58.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp59 := new(AddSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/expeditions/EXPEDITIONID/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp59.Run(c, args) },
	}
	tmp59.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp59.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp60 := new(AddTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITIONID/teams"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Doloremque ea pariatur ut tempore.",
   "name": "dvcbmmrted",
   "slug": "hycrrcazxi"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp60.Run(c, args) },
	}
	tmp60.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp60.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp61 := new(AddTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/expeditions/EXPEDITIONID/sources/twitter-accounts"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Numquam voluptatem veritatis inventore incidunt quia."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp61.Run(c, args) },
	}
	tmp61.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp61.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp62 := new(AddUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bio": "Quibusdam nisi ut.",
   "email": "frederik.reichert@cummings.net",
   "invite_token": "Nam commodi consectetur.",
   "name": "qg0z6y1io2",
   "password": "o19cvxj91b",
   "username": "6qh9fliq9c"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp62.Run(c, args) },
	}
	tmp62.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp62.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "callback",
		Short: `OAuth callback endpoint for Twitter`,
	}
	tmp63 := new(CallbackTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/twitter/callback"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp63.Run(c, args) },
	}
	tmp63.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp63.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "check",
		Short: `check action`,
	}
	tmp64 := new(CheckFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/devices/DEVICEID/MODULE/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp64.Run(c, args) },
	}
	tmp64.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp64.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp65 := new(CheckTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/check"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp65.Run(c, args) },
	}
	tmp65.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp65.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp66 := new(DeleteAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp66.Run(c, args) },
	}
	tmp66.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp66.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp67 := new(DeleteMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp67.Run(c, args) },
	}
	tmp67.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp67.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp68 := new(DeleteSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/source-tokens/SOURCETOKENID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp68.Run(c, args) },
	}
	tmp68.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp68.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp69 := new(DeleteTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp69.Run(c, args) },
	}
	tmp69.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp69.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "expedition-getid",
		Short: `Get a expedition's picture`,
	}
	tmp70 := new(ExpeditionGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/expeditions/EXPEDITIONID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp70.Run(c, args) },
	}
	tmp70.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp70.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "five",
		Short: `Run periodic checks`,
	}
	tmp71 := new(FiveTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/five"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp71.Run(c, args) },
	}
	tmp71.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp71.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "geographical-query",
		Short: `List features in a geographical area.`,
	}
	tmp72 := new(GeographicalQueryGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/features"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp72.Run(c, args) },
	}
	tmp72.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp72.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get action`,
	}
	tmp73 := new(GetAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp73.Run(c, args) },
	}
	tmp73.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp73.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp74 := new(GetExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions/@/EXPEDITION"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp74.Run(c, args) },
	}
	tmp74.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp74.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp75 := new(GetMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp75.Run(c, args) },
	}
	tmp75.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp75.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp76 := new(GetProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/@/PROJECT"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp76.Run(c, args) },
	}
	tmp76.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp76.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp77 := new(GetTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp77.Run(c, args) },
	}
	tmp77.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp77.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp78 := new(GetUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp78.Run(c, args) },
	}
	tmp78.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp78.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current",
		Short: `Get the authenticated user`,
	}
	tmp79 := new(GetCurrentUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp79.Run(c, args) },
	}
	tmp79.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp79.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "getid",
		Short: `getID action`,
	}
	tmp80 := new(GetIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp80.Run(c, args) },
	}
	tmp80.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp80.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp81 := new(GetIDDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp81.Run(c, args) },
	}
	tmp81.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp81.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp82 := new(GetIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/expeditions/EXPEDITIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp82.Run(c, args) },
	}
	tmp82.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp82.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp83 := new(GetIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp83.Run(c, args) },
	}
	tmp83.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp83.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp84 := new(GetIDProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp84.Run(c, args) },
	}
	tmp84.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp84.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp85 := new(GetIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp85.Run(c, args) },
	}
	tmp85.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp85.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp86 := new(GetIDTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/sources/twitter-accounts/SOURCEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp86.Run(c, args) },
	}
	tmp86.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp86.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp87 := new(GetIDUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp87.Run(c, args) },
	}
	tmp87.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp87.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp88 := new(ListFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp88.Run(c, args) },
	}
	tmp88.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp88.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp89 := new(ListAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp89.Run(c, args) },
	}
	tmp89.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp89.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp90 := new(ListDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources/devices"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp90.Run(c, args) },
	}
	tmp90.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp90.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp91 := new(ListExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp91.Run(c, args) },
	}
	tmp91.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp91.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp92 := new(ListMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp92.Run(c, args) },
	}
	tmp92.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp92.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp93 := new(ListProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp93.Run(c, args) },
	}
	tmp93.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp93.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp94 := new(ListSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp94.Run(c, args) },
	}
	tmp94.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp94.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp95 := new(ListSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/projects/@/PROJECT/expeditions/@/EXPEDITION/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp95.Run(c, args) },
	}
	tmp95.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp95.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp96 := new(ListTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp96.Run(c, args) },
	}
	tmp96.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp96.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp97 := new(ListTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources/twitter-accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp97.Run(c, args) },
	}
	tmp97.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp97.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp98 := new(ListUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp98.Run(c, args) },
	}
	tmp98.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp98.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-byid",
		Short: `List a feature's GeoJSON by id.`,
	}
	tmp99 := new(ListByIDGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/features/FEATUREID/geojson"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp99.Run(c, args) },
	}
	tmp99.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp99.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-by-source",
		Short: `listBySource action`,
	}
	tmp100 := new(ListBySourceExportCommand)
	sub = &cobra.Command{
		Use:   `export ["/sources/SOURCEID/csv"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp100.Run(c, args) },
	}
	tmp100.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp100.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp101 := new(ListBySourceGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/sources/SOURCEID/geojson"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp101.Run(c, args) },
	}
	tmp101.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp101.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp102 := new(ListBySourceQueryCommand)
	sub = &cobra.Command{
		Use:   `query ["/sources/SOURCEID/query"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp102.Run(c, args) },
	}
	tmp102.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp102.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-current",
		Short: `List the authenticated user's projects`,
	}
	tmp103 := new(ListCurrentProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/user/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp103.Run(c, args) },
	}
	tmp103.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp103.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-expeditionid",
		Short: `List an expedition's sources`,
	}
	tmp104 := new(ListExpeditionIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/expeditions/EXPEDITIONID/sources"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp104.Run(c, args) },
	}
	tmp104.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp104.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "listid",
		Short: `listID action`,
	}
	tmp105 := new(ListIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp105.Run(c, args) },
	}
	tmp105.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp105.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp106 := new(ListIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECTID/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp106.Run(c, args) },
	}
	tmp106.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp106.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp107 := new(ListIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp107.Run(c, args) },
	}
	tmp107.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp107.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp108 := new(ListIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp108.Run(c, args) },
	}
	tmp108.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp108.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp109 := new(ListIDSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/expeditions/EXPEDITIONID/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp109.Run(c, args) },
	}
	tmp109.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp109.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp110 := new(ListIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITIONID/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp110.Run(c, args) },
	}
	tmp110.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp110.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp111 := new(ListIDTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/expeditions/EXPEDITIONID/sources/twitter-accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp111.Run(c, args) },
	}
	tmp111.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp111.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp112 := new(LoginUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/login"]`,
		Short: ``,
		Long: `

Payload example:

{
   "password": "69as0lxihn",
   "username": "pyk1ltztoo"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp112.Run(c, args) },
	}
	tmp112.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp112.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp113 := new(LogoutUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/logout"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp113.Run(c, args) },
	}
	tmp113.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp113.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "project-getid",
		Short: `Get a project's picture`,
	}
	tmp114 := new(ProjectGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/projects/PROJECTID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp114.Run(c, args) },
	}
	tmp114.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp114.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "refresh",
		Short: `Creates a valid JWT given a refresh token.`,
	}
	tmp115 := new(RefreshUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/refresh"]`,
		Short: ``,
		Long: `

Payload example:

{
   "refresh_token": "Eveniet alias fuga."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp115.Run(c, args) },
	}
	tmp115.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp115.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "streams-process",
		Short: `Process an uploaded stream`,
	}
	tmp116 := new(StreamsProcessTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/streams/ID/process"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp116.Run(c, args) },
	}
	tmp116.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp116.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "summary-byid",
		Short: `List an source`,
	}
	tmp117 := new(SummaryByIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID/summary"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp117.Run(c, args) },
	}
	tmp117.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp117.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "temporal-cluster-geometry-byid",
		Short: `Retrieve temporal cluster geometry`,
	}
	tmp118 := new(TemporalClusterGeometryByIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID/temporal/CLUSTERID/geometry"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp118.Run(c, args) },
	}
	tmp118.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp118.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp119 := new(UpdateFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/devices/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "deviceId": 5566769747989558063,
   "etag": "Aut hic.",
   "module": "Est rem quisquam repellat autem.",
   "url": "Unde eaque culpa unde iusto cumque ut."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp119.Run(c, args) },
	}
	tmp119.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp119.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp120 := new(UpdateDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Quia omnis dolorum.",
   "name": "Blanditiis adipisci nam est."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp120.Run(c, args) },
	}
	tmp120.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp120.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp121 := new(UpdateExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/expeditions/EXPEDITIONID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Autem soluta error.",
   "name": "Non aut rem.",
   "slug": "l3ug0j6fck"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp121.Run(c, args) },
	}
	tmp121.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp121.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp122 := new(UpdateMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role": "Accusantium voluptas eaque qui."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp122.Run(c, args) },
	}
	tmp122.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp122.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp123 := new(UpdateProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Voluptatem placeat.",
   "name": "Dolores praesentium itaque impedit aliquam.",
   "slug": "3caow4svy8"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp123.Run(c, args) },
	}
	tmp123.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp123.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp124 := new(UpdateSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "active": true,
   "name": "Mollitia nobis.",
   "teamId": 8072982623113136546,
   "userId": 5845747075414789895
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp124.Run(c, args) },
	}
	tmp124.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp124.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp125 := new(UpdateTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Doloremque ea pariatur ut tempore.",
   "name": "dvcbmmrted",
   "slug": "hycrrcazxi"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp125.Run(c, args) },
	}
	tmp125.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp125.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp126 := new(UpdateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bio": "Alias voluptates repellendus aut.",
   "email": "donnie@moen.org",
   "name": "wfvj36wa2l",
   "username": "zs51w67zb6"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp126.Run(c, args) },
	}
	tmp126.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp126.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-location",
		Short: `Update an Device source location`,
	}
	tmp127 := new(UpdateLocationDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID/location"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Iure hic deserunt soluta similique ipsum.",
   "latitude": 0.889082569844937,
   "longitude": 0.3749586544288329
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp127.Run(c, args) },
	}
	tmp127.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp127.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-schema",
		Short: `Update an Device source schema`,
	}
	tmp128 := new(UpdateSchemaDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID/schemas"]`,
		Short: ``,
		Long: `

Payload example:

{
   "active": true,
   "jsonSchema": "Repudiandae libero.",
   "key": "Eum quia sit necessitatibus possimus voluptatem consequuntur."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp128.Run(c, args) },
	}
	tmp128.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp128.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-getid",
		Short: `Get a user's picture`,
	}
	tmp129 := new(UserGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp129.Run(c, args) },
	}
	tmp129.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp129.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate",
		Short: `Validate a user's email address.`,
	}
	tmp130 := new(ValidateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/validate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp130.Run(c, args) },
	}
	tmp130.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp130.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the ListBySourceExportCommand command.
func (cmd *ListBySourceExportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/csv", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBySourceExport(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceExportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the AddFirmwareCommand command.
func (cmd *AddFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	var payload client.AddFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the CheckFirmwareCommand command.
func (cmd *CheckFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/%v/firmware", url.QueryEscape(cmd.DeviceID), url.QueryEscape(cmd.Module))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CheckFirmware(ctx, path, stringFlagVal("If-None-Match", cmd.IfNoneMatch))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CheckFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var module string
	cc.Flags().StringVar(&cmd.Module, "module", module, ``)
	cc.Flags().StringVar(&cmd.IfNoneMatch, "If-None-Match", "", ``)
}

// Run makes the HTTP request corresponding to the ListFirmwareCommand command.
func (cmd *ListFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateFirmwareCommand command.
func (cmd *UpdateFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/devices/firmware"
	}
	var payload client.UpdateDeviceFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GeographicalQueryGeojsonCommand command.
func (cmd *GeographicalQueryGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/features"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GeographicalQueryGeoJSON(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GeographicalQueryGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListByIDGeojsonCommand command.
func (cmd *ListByIDGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/features/%v/geojson", cmd.FeatureID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListByIDGeoJSON(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListByIDGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var featureID int
	cc.Flags().IntVar(&cmd.FeatureID, "featureId", featureID, ``)
}

// Run makes the HTTP request corresponding to the ListBySourceGeojsonCommand command.
func (cmd *ListBySourceGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/geojson", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp131 *bool
	if cmd.Descending != "" {
		var err error
		tmp131, err = boolVal(cmd.Descending)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--descending", "err", err)
			return err
		}
	}
	resp, err := c.ListBySourceGeoJSON(ctx, path, tmp131)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
	var descending string
	cc.Flags().StringVar(&cmd.Descending, "descending", descending, ``)
}

// Run makes the HTTP request corresponding to the ListBySourceQueryCommand command.
func (cmd *ListBySourceQueryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/query", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBySourceQuery(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceQueryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the CheckTasksCommand command.
func (cmd *CheckTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/tasks/check"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CheckTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CheckTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the FiveTasksCommand command.
func (cmd *FiveTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/tasks/five"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.FiveTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *FiveTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the StreamsProcessTasksCommand command.
func (cmd *StreamsProcessTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/tasks/streams/%v/process", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StreamsProcessTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StreamsProcessTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the AddAdministratorCommand command.
func (cmd *AddAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators", cmd.ProjectID)
	}
	var payload client.AddAdministratorPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAdministrator(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the DeleteAdministratorCommand command.
func (cmd *DeleteAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetAdministratorCommand command.
func (cmd *GetAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, `Username`)
}

// Run makes the HTTP request corresponding to the GetIDAdministratorCommand command.
func (cmd *GetIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListAdministratorCommand command.
func (cmd *ListAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDAdministratorCommand command.
func (cmd *ListIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the AddDeviceCommand command.
func (cmd *AddDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/devices", cmd.ExpeditionID)
	}
	var payload client.AddDeviceSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the GetIDDeviceCommand command.
func (cmd *GetIDDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDDevice(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the ListDeviceCommand command.
func (cmd *ListDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources/devices", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDevice(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the UpdateDeviceCommand command.
func (cmd *UpdateDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v", cmd.ID)
	}
	var payload client.UpdateDeviceSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the UpdateLocationDeviceCommand command.
func (cmd *UpdateLocationDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v/location", cmd.ID)
	}
	var payload client.UpdateDeviceSourceLocationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateLocationDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateLocationDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the UpdateSchemaDeviceCommand command.
func (cmd *UpdateSchemaDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v/schemas", cmd.ID)
	}
	var payload client.UpdateDeviceSourceSchemaPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSchemaDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSchemaDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the AddExpeditionCommand command.
func (cmd *AddExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expeditions", cmd.ProjectID)
	}
	var payload client.AddExpeditionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddExpedition(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetExpeditionCommand command.
func (cmd *GetExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDExpeditionCommand command.
func (cmd *GetIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ListExpeditionCommand command.
func (cmd *ListExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDExpeditionCommand command.
func (cmd *ListIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expeditions", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UpdateExpeditionCommand command.
func (cmd *UpdateExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v", cmd.ExpeditionID)
	}
	var payload client.AddExpeditionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateExpedition(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddMemberCommand command.
func (cmd *AddMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members", cmd.TeamID)
	}
	var payload client.AddMemberPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddMember(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the DeleteMemberCommand command.
func (cmd *DeleteMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetMemberCommand command.
func (cmd *GetMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team), url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, `Username`)
}

// Run makes the HTTP request corresponding to the GetIDMemberCommand command.
func (cmd *GetIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListMemberCommand command.
func (cmd *ListMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the ListIDMemberCommand command.
func (cmd *ListIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the UpdateMemberCommand command.
func (cmd *UpdateMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	var payload client.UpdateMemberPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateMember(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ExpeditionGetIDPictureCommand command.
func (cmd *ExpeditionGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/picture", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ExpeditionGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExpeditionGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ProjectGetIDPictureCommand command.
func (cmd *ProjectGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/picture", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProjectGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProjectGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UserGetIDPictureCommand command.
func (cmd *UserGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the AddProjectCommand command.
func (cmd *AddProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetProjectCommand command.
func (cmd *GetProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDProjectCommand command.
func (cmd *GetIDProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the ListProjectCommand command.
func (cmd *ListProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListCurrentProjectCommand command.
func (cmd *ListCurrentProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCurrentProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCurrentProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateProjectCommand command.
func (cmd *UpdateProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the ListSourceCommand command.
func (cmd *ListSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListExpeditionIDSourceCommand command.
func (cmd *ListExpeditionIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListExpeditionIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListExpeditionIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ListIDSourceCommand command.
func (cmd *ListIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the SummaryByIDSourceCommand command.
func (cmd *SummaryByIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/summary", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SummaryByIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SummaryByIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the TemporalClusterGeometryByIDSourceCommand command.
func (cmd *TemporalClusterGeometryByIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/temporal/%v/geometry", cmd.SourceID, cmd.ClusterID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.TemporalClusterGeometryByIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *TemporalClusterGeometryByIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterID int
	cc.Flags().IntVar(&cmd.ClusterID, "clusterId", clusterID, ``)
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the UpdateSourceCommand command.
func (cmd *UpdateSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v", cmd.SourceID)
	}
	var payload client.UpdateSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSource(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the AddSourceTokenCommand command.
func (cmd *AddSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/source-tokens", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the DeleteSourceTokenCommand command.
func (cmd *DeleteSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/source-tokens/%v", cmd.SourceTokenID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceTokenID int
	cc.Flags().IntVar(&cmd.SourceTokenID, "sourceTokenId", sourceTokenID, ``)
}

// Run makes the HTTP request corresponding to the ListSourceTokenCommand command.
func (cmd *ListSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/source-tokens", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDSourceTokenCommand command.
func (cmd *ListIDSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/source-tokens", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddTeamCommand command.
func (cmd *AddTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/teams", cmd.ExpeditionID)
	}
	var payload client.AddTeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddTeam(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the DeleteTeamCommand command.
func (cmd *DeleteTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the GetTeamCommand command.
func (cmd *GetTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the GetIDTeamCommand command.
func (cmd *GetIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the ListTeamCommand command.
func (cmd *ListTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDTeamCommand command.
func (cmd *ListIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/teams", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the UpdateTeamCommand command.
func (cmd *UpdateTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	var payload client.AddTeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateTeam(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the AddTwitterCommand command.
func (cmd *AddTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/twitter-accounts", cmd.ExpeditionID)
	}
	var payload client.AddTwitterAccountSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddTwitter(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the CallbackTwitterCommand command.
func (cmd *CallbackTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/twitter/callback"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CallbackTwitter(ctx, path, cmd.OauthToken, stringFlagVal("oauthVerifier", cmd.OauthVerifier))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CallbackTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var oauthToken string
	cc.Flags().StringVar(&cmd.OauthToken, "oauthToken", oauthToken, ``)
	var oauthVerifier string
	cc.Flags().StringVar(&cmd.OauthVerifier, "oauthVerifier", oauthVerifier, ``)
}

// Run makes the HTTP request corresponding to the GetIDTwitterCommand command.
func (cmd *GetIDTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/twitter-accounts/%v", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the ListTwitterCommand command.
func (cmd *ListTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources/twitter-accounts", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDTwitterCommand command.
func (cmd *ListIDTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/twitter-accounts", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddUserCommand command.
func (cmd *AddUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	var payload client.AddUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetUserCommand command.
func (cmd *GetUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/@/%v", url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, ``)
}

// Run makes the HTTP request corresponding to the GetCurrentUserCommand command.
func (cmd *GetCurrentUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetIDUserCommand command.
func (cmd *GetIDUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListUserCommand command.
func (cmd *ListUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginUserCommand command.
func (cmd *LoginUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/login"
	}
	var payload client.LoginPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LoginUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the LogoutUserCommand command.
func (cmd *LogoutUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/logout"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RefreshUserCommand command.
func (cmd *RefreshUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/refresh"
	}
	var payload client.RefreshUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the UpdateUserCommand command.
func (cmd *UpdateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	var payload client.UpdateUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ValidateUserCommand command.
func (cmd *ValidateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/validate"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateUser(ctx, path, cmd.Token)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, ``)
}
