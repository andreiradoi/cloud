// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": CLI Commands
//
// Command:
// $ main

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fieldkit/cloud/server/api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AddFirmwareCommand is the command line data structure for the add action of Firmware
	AddFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteFirmwareCommand is the command line data structure for the delete action of Firmware
	DeleteFirmwareCommand struct {
		FirmwareID  int
		PrettyPrint bool
	}

	// DownloadFirmwareCommand is the command line data structure for the download action of Firmware
	DownloadFirmwareCommand struct {
		FirmwareID  int
		PrettyPrint bool
	}

	// ListFirmwareCommand is the command line data structure for the list action of Firmware
	ListFirmwareCommand struct {
		Module      string
		Page        int
		PageSize    int
		Profile     string
		PrettyPrint bool
	}

	// DeleteDataCommand is the command line data structure for the delete action of data
	DeleteDataCommand struct {
		IngestionID int
		PrettyPrint bool
	}

	// DeviceDataDataCommand is the command line data structure for the device data action of data
	DeviceDataDataCommand struct {
		DeviceID    string
		FirstBlock  int
		LastBlock   int
		Page        int
		PageSize    int
		PrettyPrint bool
	}

	// DeviceSummaryDataCommand is the command line data structure for the device summary action of data
	DeviceSummaryDataCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// ProcessDataCommand is the command line data structure for the process action of data
	ProcessDataCommand struct {
		PrettyPrint bool
	}

	// ProcessIngestionDataCommand is the command line data structure for the process ingestion action of data
	ProcessIngestionDataCommand struct {
		IngestionID int
		PrettyPrint bool
	}

	// AddFieldNoteCommand is the command line data structure for the add action of field_note
	AddFieldNoteCommand struct {
		Payload     string
		ContentType string
		StationID   int
		PrettyPrint bool
	}

	// DeleteFieldNoteCommand is the command line data structure for the delete action of field_note
	DeleteFieldNoteCommand struct {
		FieldNoteID int
		StationID   int
		PrettyPrint bool
	}

	// GetFieldNoteCommand is the command line data structure for the get action of field_note
	GetFieldNoteCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// GetMediaFieldNoteCommand is the command line data structure for the get media action of field_note
	GetMediaFieldNoteCommand struct {
		MediaID     int
		StationID   int
		PrettyPrint bool
	}

	// SaveMediaFieldNoteCommand is the command line data structure for the save media action of field_note
	SaveMediaFieldNoteCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// UpdateFieldNoteCommand is the command line data structure for the update action of field_note
	UpdateFieldNoteCommand struct {
		Payload     string
		ContentType string
		FieldNoteID int
		StationID   int
		PrettyPrint bool
	}

	// GetJSONDataCommand is the command line data structure for the get action of jsonData
	GetJSONDataCommand struct {
		DeviceID    string
		End         int
		Internal    string
		Page        int
		PageSize    int
		Start       int
		PrettyPrint bool
	}

	// SummaryJSONDataCommand is the command line data structure for the summary action of jsonData
	SummaryJSONDataCommand struct {
		DeviceID    string
		End         int
		Internal    string
		Interval    int
		Page        int
		PageSize    int
		Resolution  int
		Start       int
		PrettyPrint bool
	}

	// ProjectGetIDPictureCommand is the command line data structure for the project get id action of picture
	ProjectGetIDPictureCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UserGetIDPictureCommand is the command line data structure for the user get id action of picture
	UserGetIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// UserSaveIDPictureCommand is the command line data structure for the user save id action of picture
	UserSaveIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// AddProjectCommand is the command line data structure for the add action of project
	AddProjectCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// AddStationProjectCommand is the command line data structure for the add station action of project
	AddStationProjectCommand struct {
		ProjectID   int
		StationID   int
		PrettyPrint bool
	}

	// DeleteProjectCommand is the command line data structure for the delete action of project
	DeleteProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// GetProjectCommand is the command line data structure for the get action of project
	GetProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// GetImageProjectCommand is the command line data structure for the get image action of project
	GetImageProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// InviteUserProjectCommand is the command line data structure for the invite user action of project
	InviteUserProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// ListProjectCommand is the command line data structure for the list action of project
	ListProjectCommand struct {
		PrettyPrint bool
	}

	// ListCurrentProjectCommand is the command line data structure for the list current action of project
	ListCurrentProjectCommand struct {
		PrettyPrint bool
	}

	// ListStationProjectCommand is the command line data structure for the list station action of project
	ListStationProjectCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// RemoveStationProjectCommand is the command line data structure for the remove station action of project
	RemoveStationProjectCommand struct {
		ProjectID   int
		StationID   int
		PrettyPrint bool
	}

	// RemoveUserProjectCommand is the command line data structure for the remove user action of project
	RemoveUserProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// SaveImageProjectCommand is the command line data structure for the save image action of project
	SaveImageProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UpdateProjectCommand is the command line data structure for the update action of project
	UpdateProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// DataRecordsCommand is the command line data structure for the data action of records
	DataRecordsCommand struct {
		RecordID    int
		PrettyPrint bool
	}

	// FilteredRecordsCommand is the command line data structure for the filtered action of records
	FilteredRecordsCommand struct {
		RecordID    int
		PrettyPrint bool
	}

	// MetaRecordsCommand is the command line data structure for the meta action of records
	MetaRecordsCommand struct {
		RecordID    int
		PrettyPrint bool
	}

	// ResolvedRecordsCommand is the command line data structure for the resolved action of records
	ResolvedRecordsCommand struct {
		RecordID    int
		PrettyPrint bool
	}

	// AddUserCommand is the command line data structure for the add action of user
	AddUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ChangePasswordUserCommand is the command line data structure for the change password action of user
	ChangePasswordUserCommand struct {
		Payload     string
		ContentType string
		UserID      int
		PrettyPrint bool
	}

	// GetCurrentUserCommand is the command line data structure for the get current action of user
	GetCurrentUserCommand struct {
		PrettyPrint bool
	}

	// GetCurrentUserImageUserCommand is the command line data structure for the get current user image action of user
	GetCurrentUserImageUserCommand struct {
		PrettyPrint bool
	}

	// GetIDUserCommand is the command line data structure for the get id action of user
	GetIDUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// GetUserImageUserCommand is the command line data structure for the get user image action of user
	GetUserImageUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// ListByProjectUserCommand is the command line data structure for the list by project action of user
	ListByProjectUserCommand struct {
		ProjectID   string
		PrettyPrint bool
	}

	// LoginUserCommand is the command line data structure for the login action of user
	LoginUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// LogoutUserCommand is the command line data structure for the logout action of user
	LogoutUserCommand struct {
		PrettyPrint bool
	}

	// ProjectRolesUserCommand is the command line data structure for the project roles action of user
	ProjectRolesUserCommand struct {
		PrettyPrint bool
	}

	// RecoveryUserCommand is the command line data structure for the recovery action of user
	RecoveryUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RecoveryLookupUserCommand is the command line data structure for the recovery lookup action of user
	RecoveryLookupUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// RefreshUserCommand is the command line data structure for the refresh action of user
	RefreshUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// SaveCurrentUserImageUserCommand is the command line data structure for the save current user image action of user
	SaveCurrentUserImageUserCommand struct {
		PrettyPrint bool
	}

	// SendValidationUserCommand is the command line data structure for the send validation action of user
	SendValidationUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// TransmissionTokenUserCommand is the command line data structure for the transmission token action of user
	TransmissionTokenUserCommand struct {
		PrettyPrint bool
	}

	// UpdateUserCommand is the command line data structure for the update action of user
	UpdateUserCommand struct {
		Payload     string
		ContentType string
		UserID      int
		PrettyPrint bool
	}

	// ValidateUserCommand is the command line data structure for the validate action of user
	ValidateUserCommand struct {
		Token       string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp72 := new(AddFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "etag": "Eum aspernatur nulla rerum.",
   "meta": "Rerum esse.",
   "module": "Mollitia quaerat occaecati est.",
   "profile": "Dolorum voluptas omnis velit quod accusamus.",
   "url": "A quia aut."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp72.Run(c, args) },
	}
	tmp72.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp72.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp73 := new(AddFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 6936376325543937434,
   "created": "2004-04-15T09:40:59Z",
   "media_id": 8252764702077084069,
   "note": "Debitis qui."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp73.Run(c, args) },
	}
	tmp73.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp73.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp74 := new(AddProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Aut hic.",
   "end_time": "1994-08-15T13:51:44Z",
   "goal": "Rem quisquam repellat.",
   "location": "Ut unde eaque culpa unde iusto cumque.",
   "name": "Ut consequatur ea repudiandae veritatis delectus sit.",
   "private": false,
   "slug": "76xcws9vmo",
   "start_time": "2007-03-20T21:15:53Z",
   "tags": "Adipisci nam est est iure hic deserunt."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp74.Run(c, args) },
	}
	tmp74.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp74.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp75 := new(AddUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "grace@zieme.info",
   "invite_token": "Impedit aliquam illum aut.",
   "name": "aow4svy8w3",
   "password": "jezymno95g"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp75.Run(c, args) },
	}
	tmp75.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp75.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-station",
		Short: `Add a station to project`,
	}
	tmp76 := new(AddStationProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/stations/STATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp76.Run(c, args) },
	}
	tmp76.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp76.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "change-password",
		Short: `Update a user password`,
	}
	tmp77 := new(ChangePasswordUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID/password"]`,
		Short: ``,
		Long: `

Payload example:

{
   "newPassword": "vcbmmrted8",
   "oldPassword": "ycrrcazxi7"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp77.Run(c, args) },
	}
	tmp77.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp77.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "data",
		Short: ``,
	}
	tmp78 := new(DataRecordsCommand)
	sub = &cobra.Command{
		Use:   `records ["/records/data/RECORDID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp78.Run(c, args) },
	}
	tmp78.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp78.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp79 := new(DeleteFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware/FIRMWAREID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp79.Run(c, args) },
	}
	tmp79.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp79.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp80 := new(DeleteDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/ingestions/INGESTIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp80.Run(c, args) },
	}
	tmp80.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp80.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp81 := new(DeleteFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes/FIELDNOTEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp81.Run(c, args) },
	}
	tmp81.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp81.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp82 := new(DeleteProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp82.Run(c, args) },
	}
	tmp82.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp82.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-data",
		Short: `Retrieve data`,
	}
	tmp83 := new(DeviceDataDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp83.Run(c, args) },
	}
	tmp83.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp83.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-summary",
		Short: `Retrieve summary`,
	}
	tmp84 := new(DeviceSummaryDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/summary"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp84.Run(c, args) },
	}
	tmp84.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp84.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "download",
		Short: ``,
	}
	tmp85 := new(DownloadFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware/FIRMWAREID/download"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp85.Run(c, args) },
	}
	tmp85.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp85.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "filtered",
		Short: ``,
	}
	tmp86 := new(FilteredRecordsCommand)
	sub = &cobra.Command{
		Use:   `records ["/records/data/RECORDID/filtered"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp86.Run(c, args) },
	}
	tmp86.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp86.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get action`,
	}
	tmp87 := new(GetFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp87.Run(c, args) },
	}
	tmp87.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp87.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp88 := new(GetJSONDataCommand)
	sub = &cobra.Command{
		Use:   `json-data ["/data/devices/DEVICEID/data/json"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp88.Run(c, args) },
	}
	tmp88.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp88.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp89 := new(GetProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp89.Run(c, args) },
	}
	tmp89.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp89.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current",
		Short: `Get the authenticated user`,
	}
	tmp90 := new(GetCurrentUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp90.Run(c, args) },
	}
	tmp90.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp90.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current-user-image",
		Short: `Get the authenticated user's image`,
	}
	tmp91 := new(GetCurrentUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp91.Run(c, args) },
	}
	tmp91.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp91.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "getid",
		Short: `Get a user`,
	}
	tmp92 := new(GetIDUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp92.Run(c, args) },
	}
	tmp92.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp92.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-image",
		Short: `Get a project image`,
	}
	tmp93 := new(GetImageProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp93.Run(c, args) },
	}
	tmp93.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp93.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-media",
		Short: `Get a field note image`,
	}
	tmp94 := new(GetMediaFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-note-media/MEDIAID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp94.Run(c, args) },
	}
	tmp94.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp94.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user-image",
		Short: `Get a user image`,
	}
	tmp95 := new(GetUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/USERID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp95.Run(c, args) },
	}
	tmp95.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp95.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "invite-user",
		Short: `Invite a user to project`,
	}
	tmp96 := new(InviteUserProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/invite"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "Similique ipsum qui.",
   "role": 3458383168235590841
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp96.Run(c, args) },
	}
	tmp96.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp96.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp97 := new(ListFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp97.Run(c, args) },
	}
	tmp97.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp97.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp98 := new(ListProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp98.Run(c, args) },
	}
	tmp98.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp98.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-by-project",
		Short: `List users by project`,
	}
	tmp99 := new(ListByProjectUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/project/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp99.Run(c, args) },
	}
	tmp99.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp99.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-current",
		Short: `List the authenticated user's projects`,
	}
	tmp100 := new(ListCurrentProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/user/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp100.Run(c, args) },
	}
	tmp100.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp100.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-station",
		Short: `List the station's projects`,
	}
	tmp101 := new(ListStationProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/stations/STATIONID/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp101.Run(c, args) },
	}
	tmp101.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp101.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp102 := new(LoginUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/login"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "kristopher_hansen@olsonkoelpin.net",
   "password": "hvhqxc40im"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp102.Run(c, args) },
	}
	tmp102.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp102.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp103 := new(LogoutUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/logout"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp103.Run(c, args) },
	}
	tmp103.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp103.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "meta",
		Short: ``,
	}
	tmp104 := new(MetaRecordsCommand)
	sub = &cobra.Command{
		Use:   `records ["/records/meta/RECORDID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp104.Run(c, args) },
	}
	tmp104.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp104.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "process",
		Short: `Process data`,
	}
	tmp105 := new(ProcessDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/process"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp105.Run(c, args) },
	}
	tmp105.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp105.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "process-ingestion",
		Short: `Process ingestion`,
	}
	tmp106 := new(ProcessIngestionDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/ingestions/INGESTIONID/process"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp106.Run(c, args) },
	}
	tmp106.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp106.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "project-getid",
		Short: `Get a project's picture`,
	}
	tmp107 := new(ProjectGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/projects/PROJECTID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp107.Run(c, args) },
	}
	tmp107.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp107.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "project-roles",
		Short: ``,
	}
	tmp108 := new(ProjectRolesUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/projects/roles"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp108.Run(c, args) },
	}
	tmp108.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp108.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "recovery",
		Short: ``,
	}
	tmp109 := new(RecoveryUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/recovery"]`,
		Short: ``,
		Long: `

Payload example:

{
   "password": "6g6qg0z6y1",
   "token": "Omnis recusandae omnis perferendis illo beatae."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp109.Run(c, args) },
	}
	tmp109.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp109.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "recovery-lookup",
		Short: ``,
	}
	tmp110 := new(RecoveryLookupUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/recovery/lookup"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "Dolores facere veritatis quod voluptas non sit."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp110.Run(c, args) },
	}
	tmp110.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp110.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "refresh",
		Short: `Creates a valid JWT given a refresh token.`,
	}
	tmp111 := new(RefreshUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/refresh"]`,
		Short: ``,
		Long: `

Payload example:

{
   "refresh_token": "Officia ipsa quam consectetur rerum."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp111.Run(c, args) },
	}
	tmp111.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp111.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-station",
		Short: ``,
	}
	tmp112 := new(RemoveStationProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/stations/STATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp112.Run(c, args) },
	}
	tmp112.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp112.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-user",
		Short: `Remove a user from project`,
	}
	tmp113 := new(RemoveUserProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/members"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "Cumque repudiandae libero."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp113.Run(c, args) },
	}
	tmp113.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp113.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "resolved",
		Short: ``,
	}
	tmp114 := new(ResolvedRecordsCommand)
	sub = &cobra.Command{
		Use:   `records ["/records/data/RECORDID/resolved"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp114.Run(c, args) },
	}
	tmp114.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp114.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-current-user-image",
		Short: `Save the authenticated user's image`,
	}
	tmp115 := new(SaveCurrentUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp115.Run(c, args) },
	}
	tmp115.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp115.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-image",
		Short: `Save a project image`,
	}
	tmp116 := new(SaveImageProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp116.Run(c, args) },
	}
	tmp116.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp116.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-media",
		Short: `Save a field note image`,
	}
	tmp117 := new(SaveMediaFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-note-media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp117.Run(c, args) },
	}
	tmp117.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp117.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "send-validation",
		Short: ``,
	}
	tmp118 := new(SendValidationUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID/validate-email"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp118.Run(c, args) },
	}
	tmp118.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp118.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "summary",
		Short: `Retrieve summarized data`,
	}
	tmp119 := new(SummaryJSONDataCommand)
	sub = &cobra.Command{
		Use:   `json-data ["/data/devices/DEVICEID/summary/json"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp119.Run(c, args) },
	}
	tmp119.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp119.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "transmission-token",
		Short: ``,
	}
	tmp120 := new(TransmissionTokenUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/transmission-token"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp120.Run(c, args) },
	}
	tmp120.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp120.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp121 := new(UpdateFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes/FIELDNOTEID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 6936376325543937434,
   "created": "2004-04-15T09:40:59Z",
   "media_id": 8252764702077084069,
   "note": "Debitis qui."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp121.Run(c, args) },
	}
	tmp121.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp121.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp122 := new(UpdateProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Aut hic.",
   "end_time": "1994-08-15T13:51:44Z",
   "goal": "Rem quisquam repellat.",
   "location": "Ut unde eaque culpa unde iusto cumque.",
   "name": "Ut consequatur ea repudiandae veritatis delectus sit.",
   "private": false,
   "slug": "76xcws9vmo",
   "start_time": "2007-03-20T21:15:53Z",
   "tags": "Adipisci nam est est iure hic deserunt."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp122.Run(c, args) },
	}
	tmp122.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp122.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp123 := new(UpdateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bio": "Ducimus assumenda quod nesciunt.",
   "email": "connie.doyle@cruickshank.org",
   "name": "phnijq90su"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp123.Run(c, args) },
	}
	tmp123.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp123.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-getid",
		Short: `Get a user's picture`,
	}
	tmp124 := new(UserGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp124.Run(c, args) },
	}
	tmp124.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp124.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-saveid",
		Short: `Save a user's picture`,
	}
	tmp125 := new(UserSaveIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp125.Run(c, args) },
	}
	tmp125.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp125.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate",
		Short: `Validate a user's email address.`,
	}
	tmp126 := new(ValidateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/validate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp126.Run(c, args) },
	}
	tmp126.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp126.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AddFirmwareCommand command.
func (cmd *AddFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	var payload client.AddFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteFirmwareCommand command.
func (cmd *DeleteFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/firmware/%v", cmd.FirmwareID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var firmwareID int
	cc.Flags().IntVar(&cmd.FirmwareID, "firmwareId", firmwareID, ``)
}

// Run makes the HTTP request corresponding to the DownloadFirmwareCommand command.
func (cmd *DownloadFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/firmware/%v/download", cmd.FirmwareID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownloadFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownloadFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var firmwareID int
	cc.Flags().IntVar(&cmd.FirmwareID, "firmwareId", firmwareID, ``)
}

// Run makes the HTTP request corresponding to the ListFirmwareCommand command.
func (cmd *ListFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListFirmware(ctx, path, stringFlagVal("module", cmd.Module), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), stringFlagVal("profile", cmd.Profile))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var module string
	cc.Flags().StringVar(&cmd.Module, "module", module, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "profile", profile, ``)
}

// Run makes the HTTP request corresponding to the DeleteDataCommand command.
func (cmd *DeleteDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/ingestions/%v", cmd.IngestionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var ingestionID int
	cc.Flags().IntVar(&cmd.IngestionID, "ingestionId", ingestionID, ``)
}

// Run makes the HTTP request corresponding to the DeviceDataDataCommand command.
func (cmd *DeviceDataDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceDataData(ctx, path, intFlagVal("firstBlock", cmd.FirstBlock), intFlagVal("lastBlock", cmd.LastBlock), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceDataDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var firstBlock int
	cc.Flags().IntVar(&cmd.FirstBlock, "firstBlock", firstBlock, ``)
	var lastBlock int
	cc.Flags().IntVar(&cmd.LastBlock, "lastBlock", lastBlock, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
}

// Run makes the HTTP request corresponding to the DeviceSummaryDataCommand command.
func (cmd *DeviceSummaryDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/summary", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceSummaryData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceSummaryDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the ProcessDataCommand command.
func (cmd *ProcessDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/data/process"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProcessData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProcessDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ProcessIngestionDataCommand command.
func (cmd *ProcessIngestionDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/ingestions/%v/process", cmd.IngestionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProcessIngestionData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProcessIngestionDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var ingestionID int
	cc.Flags().IntVar(&cmd.IngestionID, "ingestionId", ingestionID, ``)
}

// Run makes the HTTP request corresponding to the AddFieldNoteCommand command.
func (cmd *AddFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes", cmd.StationID)
	}
	var payload client.AddFieldNotePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFieldNote(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the DeleteFieldNoteCommand command.
func (cmd *DeleteFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes/%v", cmd.StationID, cmd.FieldNoteID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var fieldNoteID int
	cc.Flags().IntVar(&cmd.FieldNoteID, "fieldNoteId", fieldNoteID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetFieldNoteCommand command.
func (cmd *GetFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetMediaFieldNoteCommand command.
func (cmd *GetMediaFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-note-media/%v", cmd.StationID, cmd.MediaID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetMediaFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetMediaFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var mediaID int
	cc.Flags().IntVar(&cmd.MediaID, "mediaId", mediaID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the SaveMediaFieldNoteCommand command.
func (cmd *SaveMediaFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-note-media", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveMediaFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveMediaFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the UpdateFieldNoteCommand command.
func (cmd *UpdateFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes/%v", cmd.StationID, cmd.FieldNoteID)
	}
	var payload client.AddFieldNotePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateFieldNote(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var fieldNoteID int
	cc.Flags().IntVar(&cmd.FieldNoteID, "fieldNoteId", fieldNoteID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetJSONDataCommand command.
func (cmd *GetJSONDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data/json", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp127 *bool
	if cmd.Internal != "" {
		var err error
		tmp127, err = boolVal(cmd.Internal)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--internal", "err", err)
			return err
		}
	}
	resp, err := c.GetJSONData(ctx, path, intFlagVal("end", cmd.End), tmp127, intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), intFlagVal("start", cmd.Start))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetJSONDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var end int
	cc.Flags().IntVar(&cmd.End, "end", end, ``)
	var internal string
	cc.Flags().StringVar(&cmd.Internal, "internal", internal, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var start int
	cc.Flags().IntVar(&cmd.Start, "start", start, ``)
}

// Run makes the HTTP request corresponding to the SummaryJSONDataCommand command.
func (cmd *SummaryJSONDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/summary/json", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp128 *bool
	if cmd.Internal != "" {
		var err error
		tmp128, err = boolVal(cmd.Internal)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--internal", "err", err)
			return err
		}
	}
	resp, err := c.SummaryJSONData(ctx, path, intFlagVal("end", cmd.End), tmp128, intFlagVal("interval", cmd.Interval), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), intFlagVal("resolution", cmd.Resolution), intFlagVal("start", cmd.Start))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SummaryJSONDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var end int
	cc.Flags().IntVar(&cmd.End, "end", end, ``)
	var internal string
	cc.Flags().StringVar(&cmd.Internal, "internal", internal, ``)
	var interval int
	cc.Flags().IntVar(&cmd.Interval, "interval", interval, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var resolution int
	cc.Flags().IntVar(&cmd.Resolution, "resolution", resolution, ``)
	var start int
	cc.Flags().IntVar(&cmd.Start, "start", start, ``)
}

// Run makes the HTTP request corresponding to the ProjectGetIDPictureCommand command.
func (cmd *ProjectGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/picture", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProjectGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProjectGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UserGetIDPictureCommand command.
func (cmd *UserGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the UserSaveIDPictureCommand command.
func (cmd *UserSaveIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserSaveIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserSaveIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the AddProjectCommand command.
func (cmd *AddProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the AddStationProjectCommand command.
func (cmd *AddStationProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/stations/%v", cmd.ProjectID, cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddStationProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddStationProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the DeleteProjectCommand command.
func (cmd *DeleteProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetProjectCommand command.
func (cmd *GetProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetImageProjectCommand command.
func (cmd *GetImageProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/media", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetImageProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetImageProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the InviteUserProjectCommand command.
func (cmd *InviteUserProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/invite", cmd.ProjectID)
	}
	var payload client.InviteUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.InviteUserProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *InviteUserProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the ListProjectCommand command.
func (cmd *ListProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListCurrentProjectCommand command.
func (cmd *ListCurrentProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCurrentProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCurrentProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListStationProjectCommand command.
func (cmd *ListStationProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/projects", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListStationProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListStationProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the RemoveStationProjectCommand command.
func (cmd *RemoveStationProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/stations/%v", cmd.ProjectID, cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveStationProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveStationProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the RemoveUserProjectCommand command.
func (cmd *RemoveUserProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/members", cmd.ProjectID)
	}
	var payload client.RemoveUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveUserProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveUserProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the SaveImageProjectCommand command.
func (cmd *SaveImageProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/media", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveImageProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveImageProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UpdateProjectCommand command.
func (cmd *UpdateProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the DataRecordsCommand command.
func (cmd *DataRecordsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/records/data/%v", cmd.RecordID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DataRecords(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DataRecordsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var recordID int
	cc.Flags().IntVar(&cmd.RecordID, "recordId", recordID, ``)
}

// Run makes the HTTP request corresponding to the FilteredRecordsCommand command.
func (cmd *FilteredRecordsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/records/data/%v/filtered", cmd.RecordID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.FilteredRecords(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *FilteredRecordsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var recordID int
	cc.Flags().IntVar(&cmd.RecordID, "recordId", recordID, ``)
}

// Run makes the HTTP request corresponding to the MetaRecordsCommand command.
func (cmd *MetaRecordsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/records/meta/%v", cmd.RecordID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.MetaRecords(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *MetaRecordsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var recordID int
	cc.Flags().IntVar(&cmd.RecordID, "recordId", recordID, ``)
}

// Run makes the HTTP request corresponding to the ResolvedRecordsCommand command.
func (cmd *ResolvedRecordsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/records/data/%v/resolved", cmd.RecordID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ResolvedRecords(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ResolvedRecordsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var recordID int
	cc.Flags().IntVar(&cmd.RecordID, "recordId", recordID, ``)
}

// Run makes the HTTP request corresponding to the AddUserCommand command.
func (cmd *AddUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	var payload client.AddUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ChangePasswordUserCommand command.
func (cmd *ChangePasswordUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/password", cmd.UserID)
	}
	var payload client.UpdateUserPasswordPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ChangePasswordUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ChangePasswordUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetCurrentUserCommand command.
func (cmd *GetCurrentUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetCurrentUserImageUserCommand command.
func (cmd *GetCurrentUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/media"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetIDUserCommand command.
func (cmd *GetIDUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetUserImageUserCommand command.
func (cmd *GetUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/user/%v/media", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListByProjectUserCommand command.
func (cmd *ListByProjectUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/project/%v", url.QueryEscape(cmd.ProjectID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListByProjectUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListByProjectUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID string
	cc.Flags().StringVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the LoginUserCommand command.
func (cmd *LoginUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/login"
	}
	var payload client.LoginPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LoginUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the LogoutUserCommand command.
func (cmd *LogoutUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/logout"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ProjectRolesUserCommand command.
func (cmd *ProjectRolesUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects/roles"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProjectRolesUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProjectRolesUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RecoveryUserCommand command.
func (cmd *RecoveryUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/recovery"
	}
	var payload client.RecoveryPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RecoveryUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RecoveryUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RecoveryLookupUserCommand command.
func (cmd *RecoveryLookupUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/recovery/lookup"
	}
	var payload client.RecoveryLookupPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RecoveryLookupUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RecoveryLookupUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the RefreshUserCommand command.
func (cmd *RefreshUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/refresh"
	}
	var payload client.RefreshUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the SaveCurrentUserImageUserCommand command.
func (cmd *SaveCurrentUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/media"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveCurrentUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveCurrentUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the SendValidationUserCommand command.
func (cmd *SendValidationUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/validate-email", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SendValidationUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SendValidationUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the TransmissionTokenUserCommand command.
func (cmd *TransmissionTokenUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/transmission-token"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.TransmissionTokenUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *TransmissionTokenUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateUserCommand command.
func (cmd *UpdateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	var payload client.UpdateUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ValidateUserCommand command.
func (cmd *ValidateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/validate"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateUser(ctx, path, cmd.Token)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, ``)
}
