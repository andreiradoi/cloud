// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": CLI Commands
//
// Command:
// $ main

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fieldkit/cloud/server/api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// ListBySourceExportCommand is the command line data structure for the list by source action of Export
	ListBySourceExportCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// AddFirmwareCommand is the command line data structure for the add action of Firmware
	AddFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// CheckFirmwareCommand is the command line data structure for the check action of Firmware
	CheckFirmwareCommand struct {
		DeviceID    string
		Module      string
		FkCompiled  string
		IfNoneMatch string
		PrettyPrint bool
	}

	// ListFirmwareCommand is the command line data structure for the list action of Firmware
	ListFirmwareCommand struct {
		Module      string
		Profile     string
		PrettyPrint bool
	}

	// ListDeviceFirmwareCommand is the command line data structure for the list device action of Firmware
	ListDeviceFirmwareCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// UpdateFirmwareCommand is the command line data structure for the update action of Firmware
	UpdateFirmwareCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GeographicalQueryGeojsonCommand is the command line data structure for the geographical query action of GeoJSON
	GeographicalQueryGeojsonCommand struct {
		PrettyPrint bool
	}

	// ListByIDGeojsonCommand is the command line data structure for the list by id action of GeoJSON
	ListByIDGeojsonCommand struct {
		FeatureID   int
		PrettyPrint bool
	}

	// ListBySourceGeojsonCommand is the command line data structure for the list by source action of GeoJSON
	ListBySourceGeojsonCommand struct {
		SourceID    int
		Descending  string
		PrettyPrint bool
	}

	// ListBySourceQueryCommand is the command line data structure for the list by source action of Query
	ListBySourceQueryCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// CheckTasksCommand is the command line data structure for the check action of Tasks
	CheckTasksCommand struct {
		PrettyPrint bool
	}

	// FiveTasksCommand is the command line data structure for the five action of Tasks
	FiveTasksCommand struct {
		PrettyPrint bool
	}

	// RefreshTasksCommand is the command line data structure for the refresh action of Tasks
	RefreshTasksCommand struct {
		DeviceID    string
		FileTypeID  string
		PrettyPrint bool
	}

	// AddAdministratorCommand is the command line data structure for the add action of administrator
	AddAdministratorCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// DeleteAdministratorCommand is the command line data structure for the delete action of administrator
	DeleteAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// GetAdministratorCommand is the command line data structure for the get action of administrator
	GetAdministratorCommand struct {
		Email string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDAdministratorCommand is the command line data structure for the get id action of administrator
	GetIDAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// ListAdministratorCommand is the command line data structure for the list action of administrator
	ListAdministratorCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDAdministratorCommand is the command line data structure for the list id action of administrator
	ListIDAdministratorCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// DeleteDataCommand is the command line data structure for the delete action of data
	DeleteDataCommand struct {
		IngestionID int
		PrettyPrint bool
	}

	// DeviceDataDataCommand is the command line data structure for the device data action of data
	DeviceDataDataCommand struct {
		DeviceID    string
		FirstBlock  int
		LastBlock   int
		Page        int
		PageSize    int
		PrettyPrint bool
	}

	// DeviceSummaryDataCommand is the command line data structure for the device summary action of data
	DeviceSummaryDataCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// ProcessDataCommand is the command line data structure for the process action of data
	ProcessDataCommand struct {
		PrettyPrint bool
	}

	// ProcessIngestionDataCommand is the command line data structure for the process ingestion action of data
	ProcessIngestionDataCommand struct {
		IngestionID int
		PrettyPrint bool
	}

	// AddDeviceCommand is the command line data structure for the add action of device
	AddDeviceCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// GetIDDeviceCommand is the command line data structure for the get id action of device
	GetIDDeviceCommand struct {
		ID          int
		PrettyPrint bool
	}

	// ListDeviceCommand is the command line data structure for the list action of device
	ListDeviceCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// UpdateDeviceCommand is the command line data structure for the update action of device
	UpdateDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// UpdateLocationDeviceCommand is the command line data structure for the update location action of device
	UpdateLocationDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// UpdateSchemaDeviceCommand is the command line data structure for the update schema action of device
	UpdateSchemaDeviceCommand struct {
		Payload     string
		ContentType string
		ID          int
		PrettyPrint bool
	}

	// AllDeviceDataCommand is the command line data structure for the all action of device_data
	AllDeviceDataCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// AllDeviceLogsCommand is the command line data structure for the all action of device_logs
	AllDeviceLogsCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// AddExpeditionCommand is the command line data structure for the add action of expedition
	AddExpeditionCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// GetExpeditionCommand is the command line data structure for the get action of expedition
	GetExpeditionCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDExpeditionCommand is the command line data structure for the get id action of expedition
	GetIDExpeditionCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ListExpeditionCommand is the command line data structure for the list action of expedition
	ListExpeditionCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDExpeditionCommand is the command line data structure for the list id action of expedition
	ListIDExpeditionCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UpdateExpeditionCommand is the command line data structure for the update action of expedition
	UpdateExpeditionCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddFieldNoteCommand is the command line data structure for the add action of field_note
	AddFieldNoteCommand struct {
		Payload     string
		ContentType string
		StationID   int
		PrettyPrint bool
	}

	// DeleteFieldNoteCommand is the command line data structure for the delete action of field_note
	DeleteFieldNoteCommand struct {
		FieldNoteID int
		StationID   int
		PrettyPrint bool
	}

	// GetFieldNoteCommand is the command line data structure for the get action of field_note
	GetFieldNoteCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// GetMediaFieldNoteCommand is the command line data structure for the get media action of field_note
	GetMediaFieldNoteCommand struct {
		MediaID     int
		StationID   int
		PrettyPrint bool
	}

	// SaveMediaFieldNoteCommand is the command line data structure for the save media action of field_note
	SaveMediaFieldNoteCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// UpdateFieldNoteCommand is the command line data structure for the update action of field_note
	UpdateFieldNoteCommand struct {
		Payload     string
		ContentType string
		FieldNoteID int
		StationID   int
		PrettyPrint bool
	}

	// CsvFilesCommand is the command line data structure for the csv action of files
	CsvFilesCommand struct {
		FileID      string
		Dl          string
		PrettyPrint bool
	}

	// DeviceInfoFilesCommand is the command line data structure for the device info action of files
	DeviceInfoFilesCommand struct {
		DeviceID    string
		PrettyPrint bool
	}

	// FileFilesCommand is the command line data structure for the file action of files
	FileFilesCommand struct {
		FileID      string
		PrettyPrint bool
	}

	// GetDeviceLocationHistoryFilesCommand is the command line data structure for the get device location history action of files
	GetDeviceLocationHistoryFilesCommand struct {
		DeviceID    string
		Page        int
		PrettyPrint bool
	}

	// ListDeviceDataFilesFilesCommand is the command line data structure for the list device data files action of files
	ListDeviceDataFilesFilesCommand struct {
		DeviceID    string
		Page        int
		PrettyPrint bool
	}

	// ListDeviceLogFilesFilesCommand is the command line data structure for the list device log files action of files
	ListDeviceLogFilesFilesCommand struct {
		DeviceID    string
		Page        int
		PrettyPrint bool
	}

	// ListDevicesFilesCommand is the command line data structure for the list devices action of files
	ListDevicesFilesCommand struct {
		PrettyPrint bool
	}

	// RawFilesCommand is the command line data structure for the raw action of files
	RawFilesCommand struct {
		FileID      string
		Dl          string
		PrettyPrint bool
	}

	// StatusFilesCommand is the command line data structure for the status action of files
	StatusFilesCommand struct {
		PrettyPrint bool
	}

	// UpdateDeviceInfoFilesCommand is the command line data structure for the update device info action of files
	UpdateDeviceInfoFilesCommand struct {
		Payload     string
		ContentType string
		DeviceID    string
		PrettyPrint bool
	}

	// GetJSONDataCommand is the command line data structure for the get action of jsonData
	GetJSONDataCommand struct {
		DeviceID    string
		End         int
		Internal    string
		Page        int
		PageSize    int
		Start       int
		PrettyPrint bool
	}

	// GetLinesJSONDataCommand is the command line data structure for the get lines action of jsonData
	GetLinesJSONDataCommand struct {
		DeviceID    string
		End         int
		Internal    string
		Page        int
		PageSize    int
		Start       int
		PrettyPrint bool
	}

	// AddMemberCommand is the command line data structure for the add action of member
	AddMemberCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		PrettyPrint bool
	}

	// DeleteMemberCommand is the command line data structure for the delete action of member
	DeleteMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// GetMemberCommand is the command line data structure for the get action of member
	GetMemberCommand struct {
		Email string
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// GetIDMemberCommand is the command line data structure for the get id action of member
	GetIDMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// ListMemberCommand is the command line data structure for the list action of member
	ListMemberCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// ListIDMemberCommand is the command line data structure for the list id action of member
	ListIDMemberCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// UpdateMemberCommand is the command line data structure for the update action of member
	UpdateMemberCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// ExpeditionGetIDPictureCommand is the command line data structure for the expedition get id action of picture
	ExpeditionGetIDPictureCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ProjectGetIDPictureCommand is the command line data structure for the project get id action of picture
	ProjectGetIDPictureCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UserGetIDPictureCommand is the command line data structure for the user get id action of picture
	UserGetIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// UserSaveIDPictureCommand is the command line data structure for the user save id action of picture
	UserSaveIDPictureCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// AddProjectCommand is the command line data structure for the add action of project
	AddProjectCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetProjectCommand is the command line data structure for the get action of project
	GetProjectCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDProjectCommand is the command line data structure for the get id action of project
	GetIDProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// GetImageProjectCommand is the command line data structure for the get image action of project
	GetImageProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// InviteUserProjectCommand is the command line data structure for the invite user action of project
	InviteUserProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// ListProjectCommand is the command line data structure for the list action of project
	ListProjectCommand struct {
		PrettyPrint bool
	}

	// ListCurrentProjectCommand is the command line data structure for the list current action of project
	ListCurrentProjectCommand struct {
		PrettyPrint bool
	}

	// RemoveUserProjectCommand is the command line data structure for the remove user action of project
	RemoveUserProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// SaveImageProjectCommand is the command line data structure for the save image action of project
	SaveImageProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// UpdateProjectCommand is the command line data structure for the update action of project
	UpdateProjectCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// DownloadSimpleCommand is the command line data structure for the download action of simple
	DownloadSimpleCommand struct {
		Token       string
		PrettyPrint bool
	}

	// MyFeaturesSimpleCommand is the command line data structure for the my features action of simple
	MyFeaturesSimpleCommand struct {
		PrettyPrint bool
	}

	// MySimpleSummarySimpleCommand is the command line data structure for the my simple summary action of simple
	MySimpleSummarySimpleCommand struct {
		PrettyPrint bool
	}

	// ListSourceCommand is the command line data structure for the list action of source
	ListSourceCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListExpeditionIDSourceCommand is the command line data structure for the list expedition id action of source
	ListExpeditionIDSourceCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ListIDSourceCommand is the command line data structure for the list id action of source
	ListIDSourceCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// SummaryByIDSourceCommand is the command line data structure for the summary by id action of source
	SummaryByIDSourceCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// TemporalClusterGeometryByIDSourceCommand is the command line data structure for the temporal cluster geometry by id action of source
	TemporalClusterGeometryByIDSourceCommand struct {
		ClusterID   int
		SourceID    int
		PrettyPrint bool
	}

	// UpdateSourceCommand is the command line data structure for the update action of source
	UpdateSourceCommand struct {
		Payload     string
		ContentType string
		SourceID    int
		PrettyPrint bool
	}

	// AddSourceTokenCommand is the command line data structure for the add action of source_token
	AddSourceTokenCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// DeleteSourceTokenCommand is the command line data structure for the delete action of source_token
	DeleteSourceTokenCommand struct {
		SourceTokenID int
		PrettyPrint   bool
	}

	// ListSourceTokenCommand is the command line data structure for the list action of source_token
	ListSourceTokenCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDSourceTokenCommand is the command line data structure for the list id action of source_token
	ListIDSourceTokenCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddStationCommand is the command line data structure for the add action of station
	AddStationCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteStationCommand is the command line data structure for the delete action of station
	DeleteStationCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// GetStationCommand is the command line data structure for the get action of station
	GetStationCommand struct {
		StationID   int
		PrettyPrint bool
	}

	// ListStationCommand is the command line data structure for the list action of station
	ListStationCommand struct {
		PrettyPrint bool
	}

	// UpdateStationCommand is the command line data structure for the update action of station
	UpdateStationCommand struct {
		Payload     string
		ContentType string
		StationID   int
		PrettyPrint bool
	}

	// AddStationLogCommand is the command line data structure for the add action of stationLog
	AddStationLogCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// AddMultipleStationLogCommand is the command line data structure for the addMultiple action of stationLog
	AddMultipleStationLogCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetStationLogCommand is the command line data structure for the get action of stationLog
	GetStationLogCommand struct {
		StationLog  string
		PrettyPrint bool
	}

	// UpdateStationLogCommand is the command line data structure for the update action of stationLog
	UpdateStationLogCommand struct {
		Payload      string
		ContentType  string
		StationLogID int
		PrettyPrint  bool
	}

	// AddTeamCommand is the command line data structure for the add action of team
	AddTeamCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// DeleteTeamCommand is the command line data structure for the delete action of team
	DeleteTeamCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// GetTeamCommand is the command line data structure for the get action of team
	GetTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// GetIDTeamCommand is the command line data structure for the get id action of team
	GetIDTeamCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// ListTeamCommand is the command line data structure for the list action of team
	ListTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDTeamCommand is the command line data structure for the list id action of team
	ListIDTeamCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// UpdateTeamCommand is the command line data structure for the update action of team
	UpdateTeamCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		PrettyPrint bool
	}

	// AddTwitterCommand is the command line data structure for the add action of twitter
	AddTwitterCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// CallbackTwitterCommand is the command line data structure for the callback action of twitter
	CallbackTwitterCommand struct {
		OauthToken    string
		OauthVerifier string
		PrettyPrint   bool
	}

	// GetIDTwitterCommand is the command line data structure for the get id action of twitter
	GetIDTwitterCommand struct {
		SourceID    int
		PrettyPrint bool
	}

	// ListTwitterCommand is the command line data structure for the list action of twitter
	ListTwitterCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDTwitterCommand is the command line data structure for the list id action of twitter
	ListIDTwitterCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddUserCommand is the command line data structure for the add action of user
	AddUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetCurrentUserCommand is the command line data structure for the get current action of user
	GetCurrentUserCommand struct {
		PrettyPrint bool
	}

	// GetCurrentUserImageUserCommand is the command line data structure for the get current user image action of user
	GetCurrentUserImageUserCommand struct {
		PrettyPrint bool
	}

	// GetIDUserCommand is the command line data structure for the get id action of user
	GetIDUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// GetUserImageUserCommand is the command line data structure for the get user image action of user
	GetUserImageUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// ListUserCommand is the command line data structure for the list action of user
	ListUserCommand struct {
		PrettyPrint bool
	}

	// ListByProjectUserCommand is the command line data structure for the list by project action of user
	ListByProjectUserCommand struct {
		ProjectID   string
		PrettyPrint bool
	}

	// LoginUserCommand is the command line data structure for the login action of user
	LoginUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// LogoutUserCommand is the command line data structure for the logout action of user
	LogoutUserCommand struct {
		PrettyPrint bool
	}

	// RefreshUserCommand is the command line data structure for the refresh action of user
	RefreshUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// SaveCurrentUserImageUserCommand is the command line data structure for the save current user image action of user
	SaveCurrentUserImageUserCommand struct {
		PrettyPrint bool
	}

	// UpdateUserCommand is the command line data structure for the update action of user
	UpdateUserCommand struct {
		Payload     string
		ContentType string
		UserID      int
		PrettyPrint bool
	}

	// ValidateUserCommand is the command line data structure for the validate action of user
	ValidateUserCommand struct {
		Token       string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp109 := new(AddFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "etag": "Voluptas sapiente pariatur doloribus.",
   "meta": "Eos amet non.",
   "module": "Rerum magni quia in veritatis illo.",
   "profile": "Molestias nulla consequatur.",
   "url": "Tempore non."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp109.Run(c, args) },
	}
	tmp109.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp109.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp110 := new(AddAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators"]`,
		Short: ``,
		Long: `

Payload example:

{
   "userId": 859400588339982234
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp110.Run(c, args) },
	}
	tmp110.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp110.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp111 := new(AddDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/expeditions/EXPEDITIONID/sources/devices"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Ullam ea amet aspernatur eaque accusamus voluptatibus.",
   "name": "Aperiam sit aut."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp111.Run(c, args) },
	}
	tmp111.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp111.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp112 := new(AddExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECTID/expeditions"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Qui dolores dicta labore delectus nisi et.",
   "name": "Necessitatibus nostrum.",
   "slug": "696e4tm3ii"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp112.Run(c, args) },
	}
	tmp112.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp112.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp113 := new(AddFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 4268081238479992643,
   "created": "1981-11-17T16:59:31Z",
   "media_id": 7544629447555257470,
   "note": "Debitis unde dignissimos consequatur eius corrupti voluptates."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp113.Run(c, args) },
	}
	tmp113.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp113.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp114 := new(AddMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role": "Qui ut atque quisquam deleniti.",
   "userId": 5312104092599562606
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp114.Run(c, args) },
	}
	tmp114.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp114.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp115 := new(AddProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Voluptatum eveniet aut ea sint.",
   "end_time": "2003-12-07T07:26:04Z",
   "goal": "Veritatis fugiat qui.",
   "location": "Soluta ut molestiae at autem.",
   "name": "Ut animi possimus.",
   "private": false,
   "slug": "lz3bqzntdn",
   "start_time": "1971-07-18T16:58:28Z",
   "tags": "Sapiente laboriosam modi."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp115.Run(c, args) },
	}
	tmp115.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp115.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp116 := new(AddSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/expeditions/EXPEDITIONID/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp116.Run(c, args) },
	}
	tmp116.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp116.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp117 := new(AddStationCommand)
	sub = &cobra.Command{
		Use:   `station ["/stations"]`,
		Short: ``,
		Long: `

Payload example:

{
   "device_id": "Labore quas quis error aut deserunt qui.",
   "name": "Dicta quaerat.",
   "status_json": {
      "Velit beatae est eius similique.": 0.7886212403022552
   }
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp117.Run(c, args) },
	}
	tmp117.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp117.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp118 := new(AddStationLogCommand)
	sub = &cobra.Command{
		Use:   `station-log ["/stationLog"]`,
		Short: ``,
		Long: `

Payload example:

{
   "ID": 4553545803349897270,
   "body": "Nulla vero.",
   "station_id": 9162812370338168618,
   "timestamp": "Iusto voluptatibus qui fugit iste quibusdam in."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp118.Run(c, args) },
	}
	tmp118.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp118.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp119 := new(AddTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITIONID/teams"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Aut quos aut natus.",
   "name": "lb81jdke11",
   "slug": "qb0vq2az0h"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp119.Run(c, args) },
	}
	tmp119.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp119.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp120 := new(AddTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/expeditions/EXPEDITIONID/sources/twitter-accounts"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Non quos."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp120.Run(c, args) },
	}
	tmp120.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp120.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp121 := new(AddUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "guadalupe@schultzkoch.net",
   "invite_token": "Similique sunt quaerat temporibus optio tempore dolores.",
   "name": "js9jyn6utc",
   "password": "mwq0qhyguj"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp121.Run(c, args) },
	}
	tmp121.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp121.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-multiple",
		Short: `Add multiple station logs`,
	}
	tmp122 := new(AddMultipleStationLogCommand)
	sub = &cobra.Command{
		Use:   `station-log ["/stationLogs"]`,
		Short: ``,
		Long: `

Payload example:

{
   "station_logs": [
      {
         "ID": 4553545803349897270,
         "body": "Nulla vero.",
         "station_id": 9162812370338168618,
         "timestamp": "Iusto voluptatibus qui fugit iste quibusdam in."
      },
      {
         "ID": 4553545803349897270,
         "body": "Nulla vero.",
         "station_id": 9162812370338168618,
         "timestamp": "Iusto voluptatibus qui fugit iste quibusdam in."
      }
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp122.Run(c, args) },
	}
	tmp122.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp122.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "all",
		Short: `all action`,
	}
	tmp123 := new(AllDeviceDataCommand)
	sub = &cobra.Command{
		Use:   `device-data ["/devices/DEVICEID/data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp123.Run(c, args) },
	}
	tmp123.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp123.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp124 := new(AllDeviceLogsCommand)
	sub = &cobra.Command{
		Use:   `device-logs ["/devices/DEVICEID/logs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp124.Run(c, args) },
	}
	tmp124.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp124.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "callback",
		Short: `OAuth callback endpoint for Twitter`,
	}
	tmp125 := new(CallbackTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/twitter/callback"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp125.Run(c, args) },
	}
	tmp125.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp125.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "check",
		Short: `check action`,
	}
	tmp126 := new(CheckFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/devices/DEVICEID/MODULE/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp126.Run(c, args) },
	}
	tmp126.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp126.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp127 := new(CheckTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/check"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp127.Run(c, args) },
	}
	tmp127.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp127.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "csv",
		Short: `Export file`,
	}
	tmp128 := new(CsvFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/files/FILEID/data.csv"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp128.Run(c, args) },
	}
	tmp128.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp128.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp129 := new(DeleteAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp129.Run(c, args) },
	}
	tmp129.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp129.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp130 := new(DeleteDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/ingestions/INGESTIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp130.Run(c, args) },
	}
	tmp130.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp130.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp131 := new(DeleteFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes/FIELDNOTEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp131.Run(c, args) },
	}
	tmp131.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp131.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp132 := new(DeleteMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp132.Run(c, args) },
	}
	tmp132.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp132.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp133 := new(DeleteSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/source-tokens/SOURCETOKENID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp133.Run(c, args) },
	}
	tmp133.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp133.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp134 := new(DeleteStationCommand)
	sub = &cobra.Command{
		Use:   `station ["/stations/STATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp134.Run(c, args) },
	}
	tmp134.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp134.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp135 := new(DeleteTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp135.Run(c, args) },
	}
	tmp135.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp135.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-data",
		Short: `Retrieve data`,
	}
	tmp136 := new(DeviceDataDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp136.Run(c, args) },
	}
	tmp136.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp136.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-info",
		Short: `Device info`,
	}
	tmp137 := new(DeviceInfoFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/devices/DEVICEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp137.Run(c, args) },
	}
	tmp137.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp137.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "device-summary",
		Short: `Retrieve summary`,
	}
	tmp138 := new(DeviceSummaryDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/devices/DEVICEID/summary"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp138.Run(c, args) },
	}
	tmp138.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp138.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "download",
		Short: ``,
	}
	tmp139 := new(DownloadSimpleCommand)
	sub = &cobra.Command{
		Use:   `simple ["/my/simple/download"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp139.Run(c, args) },
	}
	tmp139.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp139.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "expedition-getid",
		Short: `Get a expedition's picture`,
	}
	tmp140 := new(ExpeditionGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/expeditions/EXPEDITIONID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp140.Run(c, args) },
	}
	tmp140.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp140.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "file",
		Short: `File info`,
	}
	tmp141 := new(FileFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/files/FILEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp141.Run(c, args) },
	}
	tmp141.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp141.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "five",
		Short: `Run periodic checks`,
	}
	tmp142 := new(FiveTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/five"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp142.Run(c, args) },
	}
	tmp142.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp142.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "geographical-query",
		Short: `List features in a geographical area.`,
	}
	tmp143 := new(GeographicalQueryGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/features"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp143.Run(c, args) },
	}
	tmp143.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp143.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get action`,
	}
	tmp144 := new(GetAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators/@/EMAIL"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp144.Run(c, args) },
	}
	tmp144.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp144.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp145 := new(GetExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions/@/EXPEDITION"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp145.Run(c, args) },
	}
	tmp145.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp145.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp146 := new(GetFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp146.Run(c, args) },
	}
	tmp146.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp146.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp147 := new(GetJSONDataCommand)
	sub = &cobra.Command{
		Use:   `json-data ["/data/devices/DEVICEID/data/json"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp147.Run(c, args) },
	}
	tmp147.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp147.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp148 := new(GetMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members/@/EMAIL"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp148.Run(c, args) },
	}
	tmp148.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp148.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp149 := new(GetProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/@/PROJECT"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp149.Run(c, args) },
	}
	tmp149.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp149.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp150 := new(GetStationCommand)
	sub = &cobra.Command{
		Use:   `station ["/stations/@/STATIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp150.Run(c, args) },
	}
	tmp150.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp150.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp151 := new(GetStationLogCommand)
	sub = &cobra.Command{
		Use:   `station-log ["/stationlogs/@/STATIONLOG"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp151.Run(c, args) },
	}
	tmp151.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp151.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp152 := new(GetTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp152.Run(c, args) },
	}
	tmp152.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp152.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current",
		Short: `Get the authenticated user`,
	}
	tmp153 := new(GetCurrentUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp153.Run(c, args) },
	}
	tmp153.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp153.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current-user-image",
		Short: `Get the authenticated user's image`,
	}
	tmp154 := new(GetCurrentUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp154.Run(c, args) },
	}
	tmp154.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp154.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-device-location-history",
		Short: `device location history`,
	}
	tmp155 := new(GetDeviceLocationHistoryFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/devices/DEVICEID/locations"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp155.Run(c, args) },
	}
	tmp155.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp155.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "getid",
		Short: `getID action`,
	}
	tmp156 := new(GetIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp156.Run(c, args) },
	}
	tmp156.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp156.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp157 := new(GetIDDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp157.Run(c, args) },
	}
	tmp157.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp157.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp158 := new(GetIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/expeditions/EXPEDITIONID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp158.Run(c, args) },
	}
	tmp158.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp158.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp159 := new(GetIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp159.Run(c, args) },
	}
	tmp159.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp159.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp160 := new(GetIDProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp160.Run(c, args) },
	}
	tmp160.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp160.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp161 := new(GetIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp161.Run(c, args) },
	}
	tmp161.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp161.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp162 := new(GetIDTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/sources/twitter-accounts/SOURCEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp162.Run(c, args) },
	}
	tmp162.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp162.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp163 := new(GetIDUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp163.Run(c, args) },
	}
	tmp163.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp163.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-image",
		Short: `Get a project image`,
	}
	tmp164 := new(GetImageProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp164.Run(c, args) },
	}
	tmp164.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp164.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-lines",
		Short: `Retrieve data`,
	}
	tmp165 := new(GetLinesJSONDataCommand)
	sub = &cobra.Command{
		Use:   `json-data ["/data/devices/DEVICEID/data/lines"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp165.Run(c, args) },
	}
	tmp165.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp165.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-media",
		Short: `Get a field note image`,
	}
	tmp166 := new(GetMediaFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-note-media/MEDIAID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp166.Run(c, args) },
	}
	tmp166.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp166.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user-image",
		Short: `Get a user image`,
	}
	tmp167 := new(GetUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/USERID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp167.Run(c, args) },
	}
	tmp167.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp167.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "invite-user",
		Short: `Invite a user to project`,
	}
	tmp168 := new(InviteUserProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/invite"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "Aut quas ut omnis cum eveniet."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp168.Run(c, args) },
	}
	tmp168.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp168.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp169 := new(ListFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp169.Run(c, args) },
	}
	tmp169.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp169.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp170 := new(ListAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp170.Run(c, args) },
	}
	tmp170.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp170.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp171 := new(ListDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources/devices"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp171.Run(c, args) },
	}
	tmp171.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp171.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp172 := new(ListExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp172.Run(c, args) },
	}
	tmp172.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp172.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp173 := new(ListMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp173.Run(c, args) },
	}
	tmp173.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp173.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp174 := new(ListProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp174.Run(c, args) },
	}
	tmp174.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp174.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp175 := new(ListSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp175.Run(c, args) },
	}
	tmp175.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp175.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp176 := new(ListSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/projects/@/PROJECT/expeditions/@/EXPEDITION/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp176.Run(c, args) },
	}
	tmp176.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp176.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp177 := new(ListStationCommand)
	sub = &cobra.Command{
		Use:   `station ["/stations"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp177.Run(c, args) },
	}
	tmp177.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp177.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp178 := new(ListTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp178.Run(c, args) },
	}
	tmp178.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp178.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp179 := new(ListTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/projects/@/PROJECT/expeditions/@/EXPEDITION/sources/twitter-accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp179.Run(c, args) },
	}
	tmp179.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp179.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp180 := new(ListUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp180.Run(c, args) },
	}
	tmp180.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp180.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-byid",
		Short: `List a feature's GeoJSON by id.`,
	}
	tmp181 := new(ListByIDGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/features/FEATUREID/geojson"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp181.Run(c, args) },
	}
	tmp181.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp181.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-by-project",
		Short: `List users by project`,
	}
	tmp182 := new(ListByProjectUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/project/PROJECTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp182.Run(c, args) },
	}
	tmp182.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp182.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-by-source",
		Short: `listBySource action`,
	}
	tmp183 := new(ListBySourceExportCommand)
	sub = &cobra.Command{
		Use:   `export ["/sources/SOURCEID/csv"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp183.Run(c, args) },
	}
	tmp183.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp183.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp184 := new(ListBySourceGeojsonCommand)
	sub = &cobra.Command{
		Use:   `geojson ["/sources/SOURCEID/geojson"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp184.Run(c, args) },
	}
	tmp184.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp184.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp185 := new(ListBySourceQueryCommand)
	sub = &cobra.Command{
		Use:   `query ["/sources/SOURCEID/query"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp185.Run(c, args) },
	}
	tmp185.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp185.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-current",
		Short: `List the authenticated user's projects`,
	}
	tmp186 := new(ListCurrentProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/user/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp186.Run(c, args) },
	}
	tmp186.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp186.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-device",
		Short: `List device firmware`,
	}
	tmp187 := new(ListDeviceFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/devices/DEVICEID/firmware"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp187.Run(c, args) },
	}
	tmp187.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp187.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-device-data-files",
		Short: `List device files`,
	}
	tmp188 := new(ListDeviceDataFilesFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/devices/DEVICEID/files/data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp188.Run(c, args) },
	}
	tmp188.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp188.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-device-log-files",
		Short: `List device files`,
	}
	tmp189 := new(ListDeviceLogFilesFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/devices/DEVICEID/files/logs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp189.Run(c, args) },
	}
	tmp189.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp189.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-devices",
		Short: `List devices`,
	}
	tmp190 := new(ListDevicesFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/files/devices"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp190.Run(c, args) },
	}
	tmp190.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp190.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-expeditionid",
		Short: `List an expedition's sources`,
	}
	tmp191 := new(ListExpeditionIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/expeditions/EXPEDITIONID/sources"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp191.Run(c, args) },
	}
	tmp191.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp191.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "listid",
		Short: `listID action`,
	}
	tmp192 := new(ListIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECTID/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp192.Run(c, args) },
	}
	tmp192.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp192.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp193 := new(ListIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECTID/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp193.Run(c, args) },
	}
	tmp193.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp193.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp194 := new(ListIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp194.Run(c, args) },
	}
	tmp194.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp194.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp195 := new(ListIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp195.Run(c, args) },
	}
	tmp195.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp195.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp196 := new(ListIDSourceTokenCommand)
	sub = &cobra.Command{
		Use:   `source-token ["/expeditions/EXPEDITIONID/source-tokens"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp196.Run(c, args) },
	}
	tmp196.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp196.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp197 := new(ListIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITIONID/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp197.Run(c, args) },
	}
	tmp197.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp197.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp198 := new(ListIDTwitterCommand)
	sub = &cobra.Command{
		Use:   `twitter ["/expeditions/EXPEDITIONID/sources/twitter-accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp198.Run(c, args) },
	}
	tmp198.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp198.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp199 := new(LoginUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/login"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "cathy@ward.net",
   "password": "0clexwvao5"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp199.Run(c, args) },
	}
	tmp199.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp199.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp200 := new(LogoutUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/logout"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp200.Run(c, args) },
	}
	tmp200.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp200.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "my-features",
		Short: ``,
	}
	tmp201 := new(MyFeaturesSimpleCommand)
	sub = &cobra.Command{
		Use:   `simple ["/my/simple/features"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp201.Run(c, args) },
	}
	tmp201.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp201.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "my-simple-summary",
		Short: ``,
	}
	tmp202 := new(MySimpleSummarySimpleCommand)
	sub = &cobra.Command{
		Use:   `simple ["/my/simple"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp202.Run(c, args) },
	}
	tmp202.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp202.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "process",
		Short: `Process data`,
	}
	tmp203 := new(ProcessDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/process"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp203.Run(c, args) },
	}
	tmp203.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp203.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "process-ingestion",
		Short: `Process ingestion`,
	}
	tmp204 := new(ProcessIngestionDataCommand)
	sub = &cobra.Command{
		Use:   `data ["/data/ingestions/INGESTIONID/process"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp204.Run(c, args) },
	}
	tmp204.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp204.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "project-getid",
		Short: `Get a project's picture`,
	}
	tmp205 := new(ProjectGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/projects/PROJECTID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp205.Run(c, args) },
	}
	tmp205.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp205.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "raw",
		Short: `Export file`,
	}
	tmp206 := new(RawFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/files/FILEID/data.fkpb"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp206.Run(c, args) },
	}
	tmp206.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp206.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "refresh",
		Short: `refresh action`,
	}
	tmp207 := new(RefreshTasksCommand)
	sub = &cobra.Command{
		Use:   `tasks ["/tasks/refresh/DEVICEID/FILETYPEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp207.Run(c, args) },
	}
	tmp207.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp207.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp208 := new(RefreshUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/refresh"]`,
		Short: ``,
		Long: `

Payload example:

{
   "refresh_token": "Ad id dignissimos et nesciunt eos."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp208.Run(c, args) },
	}
	tmp208.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp208.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-user",
		Short: `Remove a user from project`,
	}
	tmp209 := new(RemoveUserProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/members/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "Illo ea."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp209.Run(c, args) },
	}
	tmp209.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp209.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-current-user-image",
		Short: `Save the authenticated user's image`,
	}
	tmp210 := new(SaveCurrentUserImageUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp210.Run(c, args) },
	}
	tmp210.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp210.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-image",
		Short: `Save a project image`,
	}
	tmp211 := new(SaveImageProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID/media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp211.Run(c, args) },
	}
	tmp211.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp211.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "save-media",
		Short: `Save a field note image`,
	}
	tmp212 := new(SaveMediaFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-note-media"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp212.Run(c, args) },
	}
	tmp212.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp212.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "status",
		Short: `File backend status`,
	}
	tmp213 := new(StatusFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/files/status"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp213.Run(c, args) },
	}
	tmp213.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp213.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "summary-byid",
		Short: `List an source`,
	}
	tmp214 := new(SummaryByIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID/summary"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp214.Run(c, args) },
	}
	tmp214.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp214.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "temporal-cluster-geometry-byid",
		Short: `Retrieve temporal cluster geometry`,
	}
	tmp215 := new(TemporalClusterGeometryByIDSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID/temporal/CLUSTERID/geometry"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp215.Run(c, args) },
	}
	tmp215.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp215.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp216 := new(UpdateFirmwareCommand)
	sub = &cobra.Command{
		Use:   `firmware ["/devices/firmware"]`,
		Short: ``,
		Long: `

Payload example:

{
   "deviceId": 1192486353789247065,
   "firmwareId": 2466190112427390781
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp216.Run(c, args) },
	}
	tmp216.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp216.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp217 := new(UpdateDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Repellat aliquid expedita ut sequi.",
   "name": "Officiis et exercitationem enim voluptatum animi sint."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp217.Run(c, args) },
	}
	tmp217.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp217.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp218 := new(UpdateExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/expeditions/EXPEDITIONID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Qui dolores dicta labore delectus nisi et.",
   "name": "Necessitatibus nostrum.",
   "slug": "696e4tm3ii"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp218.Run(c, args) },
	}
	tmp218.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp218.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp219 := new(UpdateFieldNoteCommand)
	sub = &cobra.Command{
		Use:   `field-note ["/stations/STATIONID/field-notes/FIELDNOTEID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 4268081238479992643,
   "created": "1981-11-17T16:59:31Z",
   "media_id": 7544629447555257470,
   "note": "Debitis unde dignissimos consequatur eius corrupti voluptates."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp219.Run(c, args) },
	}
	tmp219.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp219.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp220 := new(UpdateMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAMID/members/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role": "Aperiam nostrum est iure iusto."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp220.Run(c, args) },
	}
	tmp220.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp220.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp221 := new(UpdateProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECTID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Voluptatum eveniet aut ea sint.",
   "end_time": "2003-12-07T07:26:04Z",
   "goal": "Veritatis fugiat qui.",
   "location": "Soluta ut molestiae at autem.",
   "name": "Ut animi possimus.",
   "private": false,
   "slug": "lz3bqzntdn",
   "start_time": "1971-07-18T16:58:28Z",
   "tags": "Sapiente laboriosam modi."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp221.Run(c, args) },
	}
	tmp221.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp221.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp222 := new(UpdateSourceCommand)
	sub = &cobra.Command{
		Use:   `source ["/sources/SOURCEID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "active": true,
   "name": "Reiciendis temporibus et maiores.",
   "teamId": 6651773843965457305,
   "userId": 3041408290640646001
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp222.Run(c, args) },
	}
	tmp222.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp222.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp223 := new(UpdateStationCommand)
	sub = &cobra.Command{
		Use:   `station ["/stations/STATIONID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Quod temporibus at.",
   "status_json": {
      "Asperiores repudiandae.": "2009-04-05T05:15:59Z"
   }
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp223.Run(c, args) },
	}
	tmp223.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp223.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp224 := new(UpdateStationLogCommand)
	sub = &cobra.Command{
		Use:   `station-log ["/stationlogs/STATIONLOGID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "ID": 4553545803349897270,
   "body": "Nulla vero.",
   "station_id": 9162812370338168618,
   "timestamp": "Iusto voluptatibus qui fugit iste quibusdam in."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp224.Run(c, args) },
	}
	tmp224.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp224.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp225 := new(UpdateTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAMID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Aut quos aut natus.",
   "name": "lb81jdke11",
   "slug": "qb0vq2az0h"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp225.Run(c, args) },
	}
	tmp225.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp225.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp226 := new(UpdateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "bio": "Illo vel corporis quod totam cumque et.",
   "email": "joelle@beatty.info",
   "name": "3j7iqjyrhc"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp226.Run(c, args) },
	}
	tmp226.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp226.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-device-info",
		Short: `Device info`,
	}
	tmp227 := new(UpdateDeviceInfoFilesCommand)
	sub = &cobra.Command{
		Use:   `files ["/devices/DEVICEID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "deviceId": "Quam aliquid hic soluta ab quia enim.",
   "name": "Sunt dignissimos possimus ut et.",
   "notes": "Doloribus quia error necessitatibus."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp227.Run(c, args) },
	}
	tmp227.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp227.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-location",
		Short: `Update an Device source location`,
	}
	tmp228 := new(UpdateLocationDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID/location"]`,
		Short: ``,
		Long: `

Payload example:

{
   "key": "Esse officiis.",
   "latitude": 0.48770235253113436,
   "longitude": 0.10910306982928762
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp228.Run(c, args) },
	}
	tmp228.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp228.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-schema",
		Short: `Update an Device source schema`,
	}
	tmp229 := new(UpdateSchemaDeviceCommand)
	sub = &cobra.Command{
		Use:   `device ["/sources/devices/ID/schemas"]`,
		Short: ``,
		Long: `

Payload example:

{
   "active": false,
   "jsonSchema": "Voluptate quis voluptate ipsa fugiat culpa nulla.",
   "key": "Quisquam eaque distinctio ipsam unde nostrum optio."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp229.Run(c, args) },
	}
	tmp229.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp229.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-getid",
		Short: `Get a user's picture`,
	}
	tmp230 := new(UserGetIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp230.Run(c, args) },
	}
	tmp230.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp230.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-saveid",
		Short: `Save a user's picture`,
	}
	tmp231 := new(UserSaveIDPictureCommand)
	sub = &cobra.Command{
		Use:   `picture ["/users/USERID/picture"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp231.Run(c, args) },
	}
	tmp231.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp231.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate",
		Short: `Validate a user's email address.`,
	}
	tmp232 := new(ValidateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/validate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp232.Run(c, args) },
	}
	tmp232.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp232.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the ListBySourceExportCommand command.
func (cmd *ListBySourceExportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/csv", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBySourceExport(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceExportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the AddFirmwareCommand command.
func (cmd *AddFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	var payload client.AddFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the CheckFirmwareCommand command.
func (cmd *CheckFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/%v/firmware", url.QueryEscape(cmd.DeviceID), url.QueryEscape(cmd.Module))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CheckFirmware(ctx, path, stringFlagVal("Fk-Compiled", cmd.FkCompiled), stringFlagVal("If-None-Match", cmd.IfNoneMatch))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CheckFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var module string
	cc.Flags().StringVar(&cmd.Module, "module", module, ``)
	cc.Flags().StringVar(&cmd.FkCompiled, "Fk-Compiled", "", ``)
	cc.Flags().StringVar(&cmd.IfNoneMatch, "If-None-Match", "", ``)
}

// Run makes the HTTP request corresponding to the ListFirmwareCommand command.
func (cmd *ListFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/firmware"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListFirmware(ctx, path, stringFlagVal("module", cmd.Module), stringFlagVal("profile", cmd.Profile))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var module string
	cc.Flags().StringVar(&cmd.Module, "module", module, ``)
	var profile string
	cc.Flags().StringVar(&cmd.Profile, "profile", profile, ``)
}

// Run makes the HTTP request corresponding to the ListDeviceFirmwareCommand command.
func (cmd *ListDeviceFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/firmware", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDeviceFirmware(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDeviceFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the UpdateFirmwareCommand command.
func (cmd *UpdateFirmwareCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/devices/firmware"
	}
	var payload client.UpdateDeviceFirmwarePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateFirmware(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateFirmwareCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GeographicalQueryGeojsonCommand command.
func (cmd *GeographicalQueryGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/features"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GeographicalQueryGeoJSON(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GeographicalQueryGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListByIDGeojsonCommand command.
func (cmd *ListByIDGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/features/%v/geojson", cmd.FeatureID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListByIDGeoJSON(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListByIDGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var featureID int
	cc.Flags().IntVar(&cmd.FeatureID, "featureId", featureID, ``)
}

// Run makes the HTTP request corresponding to the ListBySourceGeojsonCommand command.
func (cmd *ListBySourceGeojsonCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/geojson", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp233 *bool
	if cmd.Descending != "" {
		var err error
		tmp233, err = boolVal(cmd.Descending)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--descending", "err", err)
			return err
		}
	}
	resp, err := c.ListBySourceGeoJSON(ctx, path, tmp233)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceGeojsonCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
	var descending string
	cc.Flags().StringVar(&cmd.Descending, "descending", descending, ``)
}

// Run makes the HTTP request corresponding to the ListBySourceQueryCommand command.
func (cmd *ListBySourceQueryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/query", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBySourceQuery(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBySourceQueryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the CheckTasksCommand command.
func (cmd *CheckTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/tasks/check"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CheckTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CheckTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the FiveTasksCommand command.
func (cmd *FiveTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/tasks/five"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.FiveTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *FiveTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RefreshTasksCommand command.
func (cmd *RefreshTasksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/tasks/refresh/%v/%v", url.QueryEscape(cmd.DeviceID), url.QueryEscape(cmd.FileTypeID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshTasks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshTasksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var fileTypeID string
	cc.Flags().StringVar(&cmd.FileTypeID, "fileTypeId", fileTypeID, ``)
}

// Run makes the HTTP request corresponding to the AddAdministratorCommand command.
func (cmd *AddAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators", cmd.ProjectID)
	}
	var payload client.AddAdministratorPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAdministrator(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the DeleteAdministratorCommand command.
func (cmd *DeleteAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetAdministratorCommand command.
func (cmd *GetAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Email))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, ``)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDAdministratorCommand command.
func (cmd *GetIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListAdministratorCommand command.
func (cmd *ListAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDAdministratorCommand command.
func (cmd *ListIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the DeleteDataCommand command.
func (cmd *DeleteDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/ingestions/%v", cmd.IngestionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var ingestionID int
	cc.Flags().IntVar(&cmd.IngestionID, "ingestionId", ingestionID, ``)
}

// Run makes the HTTP request corresponding to the DeviceDataDataCommand command.
func (cmd *DeviceDataDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceDataData(ctx, path, intFlagVal("firstBlock", cmd.FirstBlock), intFlagVal("lastBlock", cmd.LastBlock), intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceDataDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var firstBlock int
	cc.Flags().IntVar(&cmd.FirstBlock, "firstBlock", firstBlock, ``)
	var lastBlock int
	cc.Flags().IntVar(&cmd.LastBlock, "lastBlock", lastBlock, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
}

// Run makes the HTTP request corresponding to the DeviceSummaryDataCommand command.
func (cmd *DeviceSummaryDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/summary", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceSummaryData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceSummaryDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the ProcessDataCommand command.
func (cmd *ProcessDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/data/process"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProcessData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProcessDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ProcessIngestionDataCommand command.
func (cmd *ProcessIngestionDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/ingestions/%v/process", cmd.IngestionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProcessIngestionData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProcessIngestionDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var ingestionID int
	cc.Flags().IntVar(&cmd.IngestionID, "ingestionId", ingestionID, ``)
}

// Run makes the HTTP request corresponding to the AddDeviceCommand command.
func (cmd *AddDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/devices", cmd.ExpeditionID)
	}
	var payload client.AddDeviceSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the GetIDDeviceCommand command.
func (cmd *GetIDDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDDevice(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the ListDeviceCommand command.
func (cmd *ListDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources/devices", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDevice(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the UpdateDeviceCommand command.
func (cmd *UpdateDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v", cmd.ID)
	}
	var payload client.UpdateDeviceSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the UpdateLocationDeviceCommand command.
func (cmd *UpdateLocationDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v/location", cmd.ID)
	}
	var payload client.UpdateDeviceSourceLocationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateLocationDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateLocationDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the UpdateSchemaDeviceCommand command.
func (cmd *UpdateSchemaDeviceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/devices/%v/schemas", cmd.ID)
	}
	var payload client.UpdateDeviceSourceSchemaPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSchemaDevice(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSchemaDeviceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the AllDeviceDataCommand command.
func (cmd *AllDeviceDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/data", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AllDeviceData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AllDeviceDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the AllDeviceLogsCommand command.
func (cmd *AllDeviceLogsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/logs", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AllDeviceLogs(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AllDeviceLogsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the AddExpeditionCommand command.
func (cmd *AddExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expeditions", cmd.ProjectID)
	}
	var payload client.AddExpeditionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddExpedition(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetExpeditionCommand command.
func (cmd *GetExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDExpeditionCommand command.
func (cmd *GetIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ListExpeditionCommand command.
func (cmd *ListExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDExpeditionCommand command.
func (cmd *ListIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expeditions", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UpdateExpeditionCommand command.
func (cmd *UpdateExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v", cmd.ExpeditionID)
	}
	var payload client.AddExpeditionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateExpedition(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddFieldNoteCommand command.
func (cmd *AddFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes", cmd.StationID)
	}
	var payload client.AddFieldNotePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddFieldNote(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the DeleteFieldNoteCommand command.
func (cmd *DeleteFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes/%v", cmd.StationID, cmd.FieldNoteID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var fieldNoteID int
	cc.Flags().IntVar(&cmd.FieldNoteID, "fieldNoteId", fieldNoteID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetFieldNoteCommand command.
func (cmd *GetFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetMediaFieldNoteCommand command.
func (cmd *GetMediaFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-note-media/%v", cmd.StationID, cmd.MediaID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetMediaFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetMediaFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var mediaID int
	cc.Flags().IntVar(&cmd.MediaID, "mediaId", mediaID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the SaveMediaFieldNoteCommand command.
func (cmd *SaveMediaFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-note-media", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveMediaFieldNote(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveMediaFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the UpdateFieldNoteCommand command.
func (cmd *UpdateFieldNoteCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v/field-notes/%v", cmd.StationID, cmd.FieldNoteID)
	}
	var payload client.AddFieldNotePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateFieldNote(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateFieldNoteCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var fieldNoteID int
	cc.Flags().IntVar(&cmd.FieldNoteID, "fieldNoteId", fieldNoteID, ``)
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the CsvFilesCommand command.
func (cmd *CsvFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/files/%v/data.csv", url.QueryEscape(cmd.FileID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp234 *bool
	if cmd.Dl != "" {
		var err error
		tmp234, err = boolVal(cmd.Dl)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--dl", "err", err)
			return err
		}
	}
	resp, err := c.CsvFiles(ctx, path, tmp234)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CsvFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var fileID string
	cc.Flags().StringVar(&cmd.FileID, "fileId", fileID, ``)
	cc.Flags().StringVar(&cmd.Dl, "dl", "true", ``)
}

// Run makes the HTTP request corresponding to the DeviceInfoFilesCommand command.
func (cmd *DeviceInfoFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeviceInfoFiles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeviceInfoFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the FileFilesCommand command.
func (cmd *FileFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/files/%v", url.QueryEscape(cmd.FileID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.FileFiles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *FileFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var fileID string
	cc.Flags().StringVar(&cmd.FileID, "fileId", fileID, ``)
}

// Run makes the HTTP request corresponding to the GetDeviceLocationHistoryFilesCommand command.
func (cmd *GetDeviceLocationHistoryFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/locations", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetDeviceLocationHistoryFiles(ctx, path, intFlagVal("page", cmd.Page))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetDeviceLocationHistoryFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
}

// Run makes the HTTP request corresponding to the ListDeviceDataFilesFilesCommand command.
func (cmd *ListDeviceDataFilesFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/files/data", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDeviceDataFilesFiles(ctx, path, intFlagVal("page", cmd.Page))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDeviceDataFilesFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
}

// Run makes the HTTP request corresponding to the ListDeviceLogFilesFilesCommand command.
func (cmd *ListDeviceLogFilesFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v/files/logs", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDeviceLogFilesFiles(ctx, path, intFlagVal("page", cmd.Page))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDeviceLogFilesFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
}

// Run makes the HTTP request corresponding to the ListDevicesFilesCommand command.
func (cmd *ListDevicesFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/files/devices"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListDevicesFiles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListDevicesFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RawFilesCommand command.
func (cmd *RawFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/files/%v/data.fkpb", url.QueryEscape(cmd.FileID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp235 *bool
	if cmd.Dl != "" {
		var err error
		tmp235, err = boolVal(cmd.Dl)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--dl", "err", err)
			return err
		}
	}
	resp, err := c.RawFiles(ctx, path, tmp235)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RawFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var fileID string
	cc.Flags().StringVar(&cmd.FileID, "fileId", fileID, ``)
	cc.Flags().StringVar(&cmd.Dl, "dl", "true", ``)
}

// Run makes the HTTP request corresponding to the StatusFilesCommand command.
func (cmd *StatusFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/files/status"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.StatusFiles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StatusFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateDeviceInfoFilesCommand command.
func (cmd *UpdateDeviceInfoFilesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/devices/%v", url.QueryEscape(cmd.DeviceID))
	}
	var payload client.UpdateDeviceInfoPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateDeviceInfoFiles(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateDeviceInfoFilesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
}

// Run makes the HTTP request corresponding to the GetJSONDataCommand command.
func (cmd *GetJSONDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data/json", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp236 *bool
	if cmd.Internal != "" {
		var err error
		tmp236, err = boolVal(cmd.Internal)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--internal", "err", err)
			return err
		}
	}
	resp, err := c.GetJSONData(ctx, path, intFlagVal("end", cmd.End), tmp236, intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), intFlagVal("start", cmd.Start))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetJSONDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var end int
	cc.Flags().IntVar(&cmd.End, "end", end, ``)
	var internal string
	cc.Flags().StringVar(&cmd.Internal, "internal", internal, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var start int
	cc.Flags().IntVar(&cmd.Start, "start", start, ``)
}

// Run makes the HTTP request corresponding to the GetLinesJSONDataCommand command.
func (cmd *GetLinesJSONDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/data/devices/%v/data/lines", url.QueryEscape(cmd.DeviceID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp237 *bool
	if cmd.Internal != "" {
		var err error
		tmp237, err = boolVal(cmd.Internal)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--internal", "err", err)
			return err
		}
	}
	resp, err := c.GetLinesJSONData(ctx, path, intFlagVal("end", cmd.End), tmp237, intFlagVal("page", cmd.Page), intFlagVal("pageSize", cmd.PageSize), intFlagVal("start", cmd.Start))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetLinesJSONDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var deviceID string
	cc.Flags().StringVar(&cmd.DeviceID, "deviceId", deviceID, ``)
	var end int
	cc.Flags().IntVar(&cmd.End, "end", end, ``)
	var internal string
	cc.Flags().StringVar(&cmd.Internal, "internal", internal, ``)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, ``)
	var pageSize int
	cc.Flags().IntVar(&cmd.PageSize, "pageSize", pageSize, ``)
	var start int
	cc.Flags().IntVar(&cmd.Start, "start", start, ``)
}

// Run makes the HTTP request corresponding to the AddMemberCommand command.
func (cmd *AddMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members", cmd.TeamID)
	}
	var payload client.AddMemberPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddMember(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the DeleteMemberCommand command.
func (cmd *DeleteMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetMemberCommand command.
func (cmd *GetMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team), url.QueryEscape(cmd.Email))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, ``)
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the GetIDMemberCommand command.
func (cmd *GetIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListMemberCommand command.
func (cmd *ListMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the ListIDMemberCommand command.
func (cmd *ListIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the UpdateMemberCommand command.
func (cmd *UpdateMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	var payload client.UpdateMemberPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateMember(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ExpeditionGetIDPictureCommand command.
func (cmd *ExpeditionGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/picture", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ExpeditionGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExpeditionGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ProjectGetIDPictureCommand command.
func (cmd *ProjectGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/picture", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ProjectGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ProjectGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UserGetIDPictureCommand command.
func (cmd *UserGetIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserGetIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserGetIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the UserSaveIDPictureCommand command.
func (cmd *UserSaveIDPictureCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/picture", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserSaveIDPicture(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserSaveIDPictureCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the AddProjectCommand command.
func (cmd *AddProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetProjectCommand command.
func (cmd *GetProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDProjectCommand command.
func (cmd *GetIDProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetImageProjectCommand command.
func (cmd *GetImageProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/media", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetImageProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetImageProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the InviteUserProjectCommand command.
func (cmd *InviteUserProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/invite", cmd.ProjectID)
	}
	var payload client.InviteUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.InviteUserProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *InviteUserProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the ListProjectCommand command.
func (cmd *ListProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListCurrentProjectCommand command.
func (cmd *ListCurrentProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCurrentProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCurrentProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RemoveUserProjectCommand command.
func (cmd *RemoveUserProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/members/%v", cmd.ProjectID, cmd.UserID)
	}
	var payload client.RemoveUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveUserProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveUserProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the SaveImageProjectCommand command.
func (cmd *SaveImageProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/media", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveImageProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveImageProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the UpdateProjectCommand command.
func (cmd *UpdateProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the DownloadSimpleCommand command.
func (cmd *DownloadSimpleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/my/simple/download"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownloadSimple(ctx, path, cmd.Token)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownloadSimpleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, ``)
}

// Run makes the HTTP request corresponding to the MyFeaturesSimpleCommand command.
func (cmd *MyFeaturesSimpleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/my/simple/features"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.MyFeaturesSimple(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *MyFeaturesSimpleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the MySimpleSummarySimpleCommand command.
func (cmd *MySimpleSummarySimpleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/my/simple"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.MySimpleSummarySimple(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *MySimpleSummarySimpleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListSourceCommand command.
func (cmd *ListSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListExpeditionIDSourceCommand command.
func (cmd *ListExpeditionIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListExpeditionIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListExpeditionIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ListIDSourceCommand command.
func (cmd *ListIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the SummaryByIDSourceCommand command.
func (cmd *SummaryByIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/summary", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SummaryByIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SummaryByIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the TemporalClusterGeometryByIDSourceCommand command.
func (cmd *TemporalClusterGeometryByIDSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v/temporal/%v/geometry", cmd.SourceID, cmd.ClusterID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.TemporalClusterGeometryByIDSource(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *TemporalClusterGeometryByIDSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterID int
	cc.Flags().IntVar(&cmd.ClusterID, "clusterId", clusterID, ``)
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the UpdateSourceCommand command.
func (cmd *UpdateSourceCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/%v", cmd.SourceID)
	}
	var payload client.UpdateSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSource(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSourceCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the AddSourceTokenCommand command.
func (cmd *AddSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/source-tokens", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the DeleteSourceTokenCommand command.
func (cmd *DeleteSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/source-tokens/%v", cmd.SourceTokenID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceTokenID int
	cc.Flags().IntVar(&cmd.SourceTokenID, "sourceTokenId", sourceTokenID, ``)
}

// Run makes the HTTP request corresponding to the ListSourceTokenCommand command.
func (cmd *ListSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/source-tokens", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDSourceTokenCommand command.
func (cmd *ListIDSourceTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/source-tokens", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDSourceToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDSourceTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddStationCommand command.
func (cmd *AddStationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/stations"
	}
	var payload client.AddStationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddStation(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddStationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteStationCommand command.
func (cmd *DeleteStationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteStation(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteStationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the GetStationCommand command.
func (cmd *GetStationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/@/%v", cmd.StationID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetStation(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetStationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the ListStationCommand command.
func (cmd *ListStationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/stations"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListStation(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListStationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateStationCommand command.
func (cmd *UpdateStationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stations/%v", cmd.StationID)
	}
	var payload client.UpdateStationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateStation(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateStationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var stationID int
	cc.Flags().IntVar(&cmd.StationID, "stationId", stationID, ``)
}

// Run makes the HTTP request corresponding to the AddStationLogCommand command.
func (cmd *AddStationLogCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/stationLog"
	}
	var payload client.AddStationLogPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddStationLog(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddStationLogCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the AddMultipleStationLogCommand command.
func (cmd *AddMultipleStationLogCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/stationLogs"
	}
	var payload client.AddStationLogsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddMultipleStationLog(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddMultipleStationLogCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetStationLogCommand command.
func (cmd *GetStationLogCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stationlogs/@/%v", url.QueryEscape(cmd.StationLog))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetStationLog(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetStationLogCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var stationLog string
	cc.Flags().StringVar(&cmd.StationLog, "stationLog", stationLog, ``)
}

// Run makes the HTTP request corresponding to the UpdateStationLogCommand command.
func (cmd *UpdateStationLogCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/stationlogs/%v", cmd.StationLogID)
	}
	var payload client.AddStationLogPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateStationLog(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateStationLogCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var stationLogID int
	cc.Flags().IntVar(&cmd.StationLogID, "stationLogId", stationLogID, ``)
}

// Run makes the HTTP request corresponding to the AddTeamCommand command.
func (cmd *AddTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/teams", cmd.ExpeditionID)
	}
	var payload client.AddTeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddTeam(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the DeleteTeamCommand command.
func (cmd *DeleteTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the GetTeamCommand command.
func (cmd *GetTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the GetIDTeamCommand command.
func (cmd *GetIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the ListTeamCommand command.
func (cmd *ListTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDTeamCommand command.
func (cmd *ListIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/teams", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the UpdateTeamCommand command.
func (cmd *UpdateTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	var payload client.AddTeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateTeam(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "teamId", teamID, ``)
}

// Run makes the HTTP request corresponding to the AddTwitterCommand command.
func (cmd *AddTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/twitter-accounts", cmd.ExpeditionID)
	}
	var payload client.AddTwitterAccountSourcePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddTwitter(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the CallbackTwitterCommand command.
func (cmd *CallbackTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/twitter/callback"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CallbackTwitter(ctx, path, cmd.OauthToken, stringFlagVal("oauthVerifier", cmd.OauthVerifier))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CallbackTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var oauthToken string
	cc.Flags().StringVar(&cmd.OauthToken, "oauthToken", oauthToken, ``)
	var oauthVerifier string
	cc.Flags().StringVar(&cmd.OauthVerifier, "oauthVerifier", oauthVerifier, ``)
}

// Run makes the HTTP request corresponding to the GetIDTwitterCommand command.
func (cmd *GetIDTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sources/twitter-accounts/%v", cmd.SourceID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sourceID int
	cc.Flags().IntVar(&cmd.SourceID, "sourceId", sourceID, ``)
}

// Run makes the HTTP request corresponding to the ListTwitterCommand command.
func (cmd *ListTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/sources/twitter-accounts", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDTwitterCommand command.
func (cmd *ListIDTwitterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/sources/twitter-accounts", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDTwitter(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDTwitterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expeditionId", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddUserCommand command.
func (cmd *AddUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	var payload client.AddUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetCurrentUserCommand command.
func (cmd *GetCurrentUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetCurrentUserImageUserCommand command.
func (cmd *GetCurrentUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/media"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetIDUserCommand command.
func (cmd *GetIDUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the GetUserImageUserCommand command.
func (cmd *GetUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/user/%v/media", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ListUserCommand command.
func (cmd *ListUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListByProjectUserCommand command.
func (cmd *ListByProjectUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/project/%v", url.QueryEscape(cmd.ProjectID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListByProjectUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListByProjectUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID string
	cc.Flags().StringVar(&cmd.ProjectID, "projectId", projectID, ``)
}

// Run makes the HTTP request corresponding to the LoginUserCommand command.
func (cmd *LoginUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/login"
	}
	var payload client.LoginPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LoginUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the LogoutUserCommand command.
func (cmd *LogoutUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/logout"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RefreshUserCommand command.
func (cmd *RefreshUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/refresh"
	}
	var payload client.RefreshUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the SaveCurrentUserImageUserCommand command.
func (cmd *SaveCurrentUserImageUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/media"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SaveCurrentUserImageUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SaveCurrentUserImageUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateUserCommand command.
func (cmd *UpdateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	var payload client.UpdateUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userId", userID, ``)
}

// Run makes the HTTP request corresponding to the ValidateUserCommand command.
func (cmd *ValidateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/validate"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateUser(ctx, path, cmd.Token)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, ``)
}
