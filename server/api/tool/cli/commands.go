// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "fieldkit": CLI Commands
//
// The content of this file is auto-generated, DO NOT MODIFY

package cli

import (
	"encoding/json"
	"fmt"
	"github.com/O-C-R/fieldkit/server/api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"golang.org/x/net/context"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AddAdministratorCommand is the command line data structure for the add action of administrator
	AddAdministratorCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// DeleteAdministratorCommand is the command line data structure for the delete action of administrator
	DeleteAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// GetAdministratorCommand is the command line data structure for the get action of administrator
	GetAdministratorCommand struct {
		// Project slug
		Project string
		// Username
		Username    string
		PrettyPrint bool
	}

	// GetIDAdministratorCommand is the command line data structure for the get id action of administrator
	GetIDAdministratorCommand struct {
		ProjectID   int
		UserID      int
		PrettyPrint bool
	}

	// ListAdministratorCommand is the command line data structure for the list action of administrator
	ListAdministratorCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDAdministratorCommand is the command line data structure for the list id action of administrator
	ListIDAdministratorCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// AddExpeditionCommand is the command line data structure for the add action of expedition
	AddExpeditionCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// GetExpeditionCommand is the command line data structure for the get action of expedition
	GetExpeditionCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDExpeditionCommand is the command line data structure for the get id action of expedition
	GetIDExpeditionCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// ListExpeditionCommand is the command line data structure for the list action of expedition
	ListExpeditionCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDExpeditionCommand is the command line data structure for the list id action of expedition
	ListIDExpeditionCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// AddInputCommand is the command line data structure for the add action of input
	AddInputCommand struct {
		Payload     string
		ContentType string
		ProjectID   int
		PrettyPrint bool
	}

	// GetInputCommand is the command line data structure for the get action of input
	GetInputCommand struct {
		// Input slug
		Input string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDInputCommand is the command line data structure for the get id action of input
	GetIDInputCommand struct {
		InputID     int
		PrettyPrint bool
	}

	// ListInputCommand is the command line data structure for the list action of input
	ListInputCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDInputCommand is the command line data structure for the list id action of input
	ListIDInputCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// AddMemberCommand is the command line data structure for the add action of member
	AddMemberCommand struct {
		Payload     string
		ContentType string
		TeamID      int
		PrettyPrint bool
	}

	// DeleteMemberCommand is the command line data structure for the delete action of member
	DeleteMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// GetMemberCommand is the command line data structure for the get action of member
	GetMemberCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team string
		// Team slug
		Username    string
		PrettyPrint bool
	}

	// GetIDMemberCommand is the command line data structure for the get id action of member
	GetIDMemberCommand struct {
		TeamID      int
		UserID      int
		PrettyPrint bool
	}

	// ListMemberCommand is the command line data structure for the list action of member
	ListMemberCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Team slug
		Team        string
		PrettyPrint bool
	}

	// ListIDMemberCommand is the command line data structure for the list id action of member
	ListIDMemberCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// AddProjectCommand is the command line data structure for the add action of project
	AddProjectCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetProjectCommand is the command line data structure for the get action of project
	GetProjectCommand struct {
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// GetIDProjectCommand is the command line data structure for the get id action of project
	GetIDProjectCommand struct {
		ProjectID   int
		PrettyPrint bool
	}

	// ListProjectCommand is the command line data structure for the list action of project
	ListProjectCommand struct {
		PrettyPrint bool
	}

	// ListCurrentProjectCommand is the command line data structure for the list current action of project
	ListCurrentProjectCommand struct {
		PrettyPrint bool
	}

	// AddTeamCommand is the command line data structure for the add action of team
	AddTeamCommand struct {
		Payload      string
		ContentType  string
		ExpeditionID int
		PrettyPrint  bool
	}

	// GetTeamCommand is the command line data structure for the get action of team
	GetTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project string
		// Project slug
		Team        string
		PrettyPrint bool
	}

	// GetIDTeamCommand is the command line data structure for the get id action of team
	GetIDTeamCommand struct {
		TeamID      int
		PrettyPrint bool
	}

	// ListTeamCommand is the command line data structure for the list action of team
	ListTeamCommand struct {
		// Expedition slug
		Expedition string
		// Project slug
		Project     string
		PrettyPrint bool
	}

	// ListIDTeamCommand is the command line data structure for the list id action of team
	ListIDTeamCommand struct {
		ExpeditionID int
		PrettyPrint  bool
	}

	// AddUserCommand is the command line data structure for the add action of user
	AddUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// GetUserCommand is the command line data structure for the get action of user
	GetUserCommand struct {
		Username    string
		PrettyPrint bool
	}

	// GetCurrentUserCommand is the command line data structure for the get current action of user
	GetCurrentUserCommand struct {
		PrettyPrint bool
	}

	// GetIDUserCommand is the command line data structure for the get id action of user
	GetIDUserCommand struct {
		UserID      int
		PrettyPrint bool
	}

	// ListUserCommand is the command line data structure for the list action of user
	ListUserCommand struct {
		PrettyPrint bool
	}

	// LoginUserCommand is the command line data structure for the login action of user
	LoginUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// LogoutUserCommand is the command line data structure for the logout action of user
	LogoutUserCommand struct {
		PrettyPrint bool
	}

	// RefreshUserCommand is the command line data structure for the refresh action of user
	RefreshUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ValidateUserCommand is the command line data structure for the validate action of user
	ValidateUserCommand struct {
		Token       string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp24 := new(AddAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECT_ID/administrator"]`,
		Short: ``,
		Long: `

Payload example:

{
   "user_id": 5370365768490460960
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp25 := new(AddExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECT_ID/expedition"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Dolorem impedit hic dolore quidem repellendus cupiditate.",
   "name": "Doloribus recusandae dignissimos ea nobis in.",
   "slug": "xef7unsz2r"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp26 := new(AddInputCommand)
	sub = &cobra.Command{
		Use:   `input ["/projects/PROJECT_ID/input"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Ut voluptatem et.",
   "slug": "y7qrfgzslj"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp27 := new(AddMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAM_ID/member"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role": "Natus dolores quo suscipit voluptatem magni in.",
   "user_id": 1077091600673584356
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp28 := new(AddProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/project"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Nostrum facere dignissimos.",
   "name": "Repellendus quam soluta.",
   "slug": "i3n7ahu8r8"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp29 := new(AddTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITION_ID/team"]`,
		Short: ``,
		Long: `

Payload example:

{
   "description": "Dolores a voluptas sed dolorum itaque.",
   "name": "Sequi corrupti.",
   "slug": "0o5eo4ic2d"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp30 := new(AddUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "coby.douglas@mooremonahan.info",
   "invite_token": "Expedita libero.",
   "password": "guc87ez0kv",
   "username": "3i11056gah"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp31 := new(DeleteAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECT_ID/administrators/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(DeleteMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAM_ID/members/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get action`,
	}
	tmp33 := new(GetAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(GetExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions/@/EXPEDITION"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp35 := new(GetInputCommand)
	sub = &cobra.Command{
		Use:   `input ["/projects/@/PROJECT/inputs/@/INPUT"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp36 := new(GetMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp36.Run(c, args) },
	}
	tmp36.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp36.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp37 := new(GetProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/@/PROJECT"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp37.Run(c, args) },
	}
	tmp37.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp37.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp38 := new(GetTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp38.Run(c, args) },
	}
	tmp38.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp38.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp39 := new(GetUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/@/USERNAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp39.Run(c, args) },
	}
	tmp39.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp39.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-current",
		Short: `Get the authenticated user`,
	}
	tmp40 := new(GetCurrentUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp40.Run(c, args) },
	}
	tmp40.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp40.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "getid",
		Short: `getID action`,
	}
	tmp41 := new(GetIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECT_ID/administrators/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp41.Run(c, args) },
	}
	tmp41.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp41.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp42 := new(GetIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/expeditions/EXPEDITION_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp42.Run(c, args) },
	}
	tmp42.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp42.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp43 := new(GetIDInputCommand)
	sub = &cobra.Command{
		Use:   `input ["/inputs/INPUT_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp43.Run(c, args) },
	}
	tmp43.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp43.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp44 := new(GetIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAM_ID/members/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp44.Run(c, args) },
	}
	tmp44.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp44.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp45 := new(GetIDProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects/PROJECT_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp45.Run(c, args) },
	}
	tmp45.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp45.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp46 := new(GetIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/teams/TEAM_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp46.Run(c, args) },
	}
	tmp46.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp46.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp47 := new(GetIDUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp47.Run(c, args) },
	}
	tmp47.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp47.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp48 := new(ListAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/@/PROJECT/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp48.Run(c, args) },
	}
	tmp48.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp48.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp49 := new(ListExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/@/PROJECT/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp49.Run(c, args) },
	}
	tmp49.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp49.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp50 := new(ListInputCommand)
	sub = &cobra.Command{
		Use:   `input ["/projects/@/PROJECT/inputs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp50.Run(c, args) },
	}
	tmp50.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp50.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp51 := new(ListMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams/@/TEAM/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp51.Run(c, args) },
	}
	tmp51.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp51.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp52 := new(ListProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp52.Run(c, args) },
	}
	tmp52.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp52.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp53 := new(ListTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/projects/@/PROJECT/expeditions/@/EXPEDITION/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp53.Run(c, args) },
	}
	tmp53.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp53.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp54 := new(ListUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/users"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp54.Run(c, args) },
	}
	tmp54.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp54.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-current",
		Short: `List the authenticated user's projects`,
	}
	tmp55 := new(ListCurrentProjectCommand)
	sub = &cobra.Command{
		Use:   `project ["/user/projects"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp55.Run(c, args) },
	}
	tmp55.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp55.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "listid",
		Short: `listID action`,
	}
	tmp56 := new(ListIDAdministratorCommand)
	sub = &cobra.Command{
		Use:   `administrator ["/projects/PROJECT_ID/administrators"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp56.Run(c, args) },
	}
	tmp56.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp56.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp57 := new(ListIDExpeditionCommand)
	sub = &cobra.Command{
		Use:   `expedition ["/projects/PROJECT_ID/expeditions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp57.Run(c, args) },
	}
	tmp57.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp57.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp58 := new(ListIDInputCommand)
	sub = &cobra.Command{
		Use:   `input ["/projects/PROJECT_ID/inputs"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp58.Run(c, args) },
	}
	tmp58.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp58.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp59 := new(ListIDMemberCommand)
	sub = &cobra.Command{
		Use:   `member ["/teams/TEAM_ID/members"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp59.Run(c, args) },
	}
	tmp59.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp59.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp60 := new(ListIDTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/expeditions/EXPEDITION_ID/teams"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp60.Run(c, args) },
	}
	tmp60.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp60.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp61 := new(LoginUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/login"]`,
		Short: ``,
		Long: `

Payload example:

{
   "password": "dgbyyauoy5",
   "username": "dmi76cingd"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp61.Run(c, args) },
	}
	tmp61.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp61.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "logout",
		Short: `Creates a valid JWT given login credentials.`,
	}
	tmp62 := new(LogoutUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/logout"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp62.Run(c, args) },
	}
	tmp62.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp62.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "refresh",
		Short: `Creates a valid JWT given a refresh token.`,
	}
	tmp63 := new(RefreshUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/refresh"]`,
		Short: ``,
		Long: `

Payload example:

{
   "refresh_token": "Et quia ut incidunt consequatur magni."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp63.Run(c, args) },
	}
	tmp63.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp63.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate",
		Short: `Validate a user's email address.`,
	}
	tmp64 := new(ValidateUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/validate"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp64.Run(c, args) },
	}
	tmp64.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp64.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if rpath == "/swagger.yaml" {
		fnf = c.DownloadSwaggerYaml
		if outfile == "" {
			outfile = "swagger.yaml"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AddAdministratorCommand command.
func (cmd *AddAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrator", cmd.ProjectID)
	}
	var payload client.AddAdministratorPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAdministrator(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the DeleteAdministratorCommand command.
func (cmd *DeleteAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, ``)
}

// Run makes the HTTP request corresponding to the GetAdministratorCommand command.
func (cmd *GetAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, `Username`)
}

// Run makes the HTTP request corresponding to the GetIDAdministratorCommand command.
func (cmd *GetIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators/%v", cmd.ProjectID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, ``)
}

// Run makes the HTTP request corresponding to the ListAdministratorCommand command.
func (cmd *ListAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/administrators", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDAdministratorCommand command.
func (cmd *ListIDAdministratorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/administrators", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDAdministrator(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDAdministratorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the AddExpeditionCommand command.
func (cmd *AddExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expedition", cmd.ProjectID)
	}
	var payload client.AddExpeditionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddExpedition(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetExpeditionCommand command.
func (cmd *GetExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDExpeditionCommand command.
func (cmd *GetIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expedition_id", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the ListExpeditionCommand command.
func (cmd *ListExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDExpeditionCommand command.
func (cmd *ListIDExpeditionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/expeditions", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDExpedition(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDExpeditionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the AddInputCommand command.
func (cmd *AddInputCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/input", cmd.ProjectID)
	}
	var payload client.AddInputPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddInput(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddInputCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the GetInputCommand command.
func (cmd *GetInputCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/inputs/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Input))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetInput(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetInputCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var input string
	cc.Flags().StringVar(&cmd.Input, "input", input, `Input slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDInputCommand command.
func (cmd *GetIDInputCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/inputs/%v", cmd.InputID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDInput(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDInputCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var inputID int
	cc.Flags().IntVar(&cmd.InputID, "input_id", inputID, ``)
}

// Run makes the HTTP request corresponding to the ListInputCommand command.
func (cmd *ListInputCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/inputs", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListInput(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListInputCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDInputCommand command.
func (cmd *ListIDInputCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v/inputs", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDInput(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDInputCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the AddMemberCommand command.
func (cmd *AddMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/member", cmd.TeamID)
	}
	var payload client.AddMemberPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddMember(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "team_id", teamID, ``)
}

// Run makes the HTTP request corresponding to the DeleteMemberCommand command.
func (cmd *DeleteMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "team_id", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, ``)
}

// Run makes the HTTP request corresponding to the GetMemberCommand command.
func (cmd *GetMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team), url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, `Team slug`)
}

// Run makes the HTTP request corresponding to the GetIDMemberCommand command.
func (cmd *GetIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members/%v", cmd.TeamID, cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "team_id", teamID, ``)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, ``)
}

// Run makes the HTTP request corresponding to the ListMemberCommand command.
func (cmd *ListMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v/members", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Team slug`)
}

// Run makes the HTTP request corresponding to the ListIDMemberCommand command.
func (cmd *ListIDMemberCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v/members", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDMember(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDMemberCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "team_id", teamID, ``)
}

// Run makes the HTTP request corresponding to the AddProjectCommand command.
func (cmd *AddProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/project"
	}
	var payload client.AddProjectPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddProject(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetProjectCommand command.
func (cmd *GetProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v", url.QueryEscape(cmd.Project))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDProjectCommand command.
func (cmd *GetIDProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/%v", cmd.ProjectID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var projectID int
	cc.Flags().IntVar(&cmd.ProjectID, "project_id", projectID, ``)
}

// Run makes the HTTP request corresponding to the ListProjectCommand command.
func (cmd *ListProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListCurrentProjectCommand command.
func (cmd *ListCurrentProjectCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user/projects"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCurrentProject(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCurrentProjectCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddTeamCommand command.
func (cmd *AddTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/team", cmd.ExpeditionID)
	}
	var payload client.AddTeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddTeam(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expedition_id", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the GetTeamCommand command.
func (cmd *GetTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams/@/%v", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition), url.QueryEscape(cmd.Team))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Project slug`)
}

// Run makes the HTTP request corresponding to the GetIDTeamCommand command.
func (cmd *GetIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/teams/%v", cmd.TeamID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var teamID int
	cc.Flags().IntVar(&cmd.TeamID, "team_id", teamID, ``)
}

// Run makes the HTTP request corresponding to the ListTeamCommand command.
func (cmd *ListTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/projects/@/%v/expeditions/@/%v/teams", url.QueryEscape(cmd.Project), url.QueryEscape(cmd.Expedition))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expedition string
	cc.Flags().StringVar(&cmd.Expedition, "expedition", expedition, `Expedition slug`)
	var project string
	cc.Flags().StringVar(&cmd.Project, "project", project, `Project slug`)
}

// Run makes the HTTP request corresponding to the ListIDTeamCommand command.
func (cmd *ListIDTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/expeditions/%v/teams", cmd.ExpeditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListIDTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListIDTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var expeditionID int
	cc.Flags().IntVar(&cmd.ExpeditionID, "expedition_id", expeditionID, ``)
}

// Run makes the HTTP request corresponding to the AddUserCommand command.
func (cmd *AddUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user"
	}
	var payload client.AddUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the GetUserCommand command.
func (cmd *GetUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/@/%v", url.QueryEscape(cmd.Username))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var username string
	cc.Flags().StringVar(&cmd.Username, "username", username, ``)
}

// Run makes the HTTP request corresponding to the GetCurrentUserCommand command.
func (cmd *GetCurrentUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCurrentUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCurrentUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetIDUserCommand command.
func (cmd *GetIDUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetIDUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetIDUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, ``)
}

// Run makes the HTTP request corresponding to the ListUserCommand command.
func (cmd *ListUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the LoginUserCommand command.
func (cmd *LoginUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/login"
	}
	var payload client.LoginPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LoginUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the LogoutUserCommand command.
func (cmd *LogoutUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/logout"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogoutUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogoutUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the RefreshUserCommand command.
func (cmd *RefreshUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/refresh"
	}
	var payload client.RefreshUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RefreshUser(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RefreshUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ValidateUserCommand command.
func (cmd *ValidateUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/validate"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateUser(ctx, path, cmd.Token)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var token string
	cc.Flags().StringVar(&cmd.Token, "token", token, ``)
}
