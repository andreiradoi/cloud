consumes:
- application/json
definitions:
  AddAdministratorPayload:
    example:
      user_id: 4.2461847e+18
    properties:
      user_id:
        example: 4.2461847e+18
        format: int64
        type: integer
    required:
    - user_id
    title: AddAdministratorPayload
    type: object
  AddExpeditionPayload:
    example:
      description: Fugit nisi odio vel tempore.
      name: Facere et quo vel aut.
      slug: urowl9c0x3
    properties:
      description:
        example: Fugit nisi odio vel tempore.
        type: string
      name:
        example: Facere et quo vel aut.
        type: string
      slug:
        example: urowl9c0x3
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddExpeditionPayload
    type: object
  AddFieldkitInputPayload:
    example:
      name: Molestiae illo officiis dignissimos consectetur quo.
    properties:
      name:
        example: Molestiae illo officiis dignissimos consectetur quo.
        type: string
    required:
    - name
    title: AddFieldkitInputPayload
    type: object
  AddMemberPayload:
    example:
      role: Eum consequatur numquam repellat accusamus ipsa rerum.
      user_id: 7.24646e+18
    properties:
      role:
        example: Eum consequatur numquam repellat accusamus ipsa rerum.
        type: string
      user_id:
        example: 7.24646e+18
        format: int64
        type: integer
    required:
    - user_id
    - role
    title: AddMemberPayload
    type: object
  AddProjectPayload:
    example:
      description: Vel expedita impedit et incidunt illo voluptatem.
      name: Hic aliquid animi sit sint doloremque.
      slug: e7n4jt477a
    properties:
      description:
        example: Vel expedita impedit et incidunt illo voluptatem.
        type: string
      name:
        example: Hic aliquid animi sit sint doloremque.
        type: string
      slug:
        example: e7n4jt477a
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddProjectPayload
    type: object
  AddSchemaPayload:
    example:
      json_schema: true
    properties:
      json_schema:
        example: true
    required:
    - json_schema
    title: AddSchemaPayload
    type: object
  AddTeamPayload:
    example:
      description: Accusantium et et perspiciatis et.
      name: hu9e7ambii
      slug: ahxosx7rjw
    properties:
      description:
        example: Accusantium et et perspiciatis et.
        type: string
      name:
        example: hu9e7ambii
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: ahxosx7rjw
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddTeamPayload
    type: object
  AddTwitterAccountInputPayload:
    example:
      name: Tempora cumque sed voluptatem.
    properties:
      name:
        example: Tempora cumque sed voluptatem.
        type: string
    required:
    - name
    title: AddTwitterAccountInputPayload
    type: object
  AddUserPayload:
    example:
      bio: Et praesentium.
      email: grace.bartoletti@ankundingmcglynn.com
      invite_token: Repudiandae eaque necessitatibus voluptatum odit.
      name: 05j6w1dd45
      password: dgtuoe9agp
      username: lepy9p8qr0
    properties:
      bio:
        example: Et praesentium.
        type: string
      email:
        example: grace.bartoletti@ankundingmcglynn.com
        format: email
        type: string
      invite_token:
        example: Repudiandae eaque necessitatibus voluptatum odit.
        type: string
      name:
        example: 05j6w1dd45
        maxLength: 256
        pattern: \S
        type: string
      password:
        example: dgtuoe9agp
        minLength: 10
        type: string
      username:
        example: lepy9p8qr0
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - email
    - username
    - password
    - bio
    - invite_token
    title: AddUserPayload
    type: object
  Document:
    description: Document media type (default view)
    example:
      data: a1912f1b-adb5-4383-8eca-2dfd7ec7e893
      id: Possimus porro quaerat in qui.
      input_id: 7.480706e+18
      location:
        coordinates:
        - 0.8597355
        - 0.8597355
        type: Point
      team_id: 7.1933954e+18
      timestamp: 9.0560484e+18
      user_id: 2.319954e+18
    properties:
      data:
        example: a1912f1b-adb5-4383-8eca-2dfd7ec7e893
      id:
        example: Possimus porro quaerat in qui.
        type: string
      input_id:
        example: 7.480706e+18
        format: int64
        type: integer
      location:
        $ref: '#/definitions/Point'
      team_id:
        example: 7.1933954e+18
        format: int64
        type: integer
      timestamp:
        example: 9.0560484e+18
        format: int64
        type: integer
      user_id:
        example: 2.319954e+18
        format: int64
        type: integer
    required:
    - id
    - input_id
    - timestamp
    - location
    - data
    title: 'Mediatype identifier: application/vnd.app.document+json; view=default'
    type: object
  DocumentCollection:
    description: DocumentCollection is the media type for an array of Document (default
      view)
    example:
    - data: a1912f1b-adb5-4383-8eca-2dfd7ec7e893
      id: Possimus porro quaerat in qui.
      input_id: 7.480706e+18
      location:
        coordinates:
        - 0.8597355
        - 0.8597355
        type: Point
      team_id: 7.1933954e+18
      timestamp: 9.0560484e+18
      user_id: 2.319954e+18
    - data: a1912f1b-adb5-4383-8eca-2dfd7ec7e893
      id: Possimus porro quaerat in qui.
      input_id: 7.480706e+18
      location:
        coordinates:
        - 0.8597355
        - 0.8597355
        type: Point
      team_id: 7.1933954e+18
      timestamp: 9.0560484e+18
      user_id: 2.319954e+18
    items:
      $ref: '#/definitions/Document'
    title: 'Mediatype identifier: application/vnd.app.document+json; type=collection;
      view=default'
    type: array
  Documents:
    description: Documents media type (default view)
    example:
      documents:
      - data: a1912f1b-adb5-4383-8eca-2dfd7ec7e893
        id: Possimus porro quaerat in qui.
        input_id: 7.480706e+18
        location:
          coordinates:
          - 0.8597355
          - 0.8597355
          type: Point
        team_id: 7.1933954e+18
        timestamp: 9.0560484e+18
        user_id: 2.319954e+18
    properties:
      documents:
        $ref: '#/definitions/DocumentCollection'
    required:
    - documents
    title: 'Mediatype identifier: application/vnd.app.documents+json; view=default'
    type: object
  Expedition:
    description: Expedition media type (default view)
    example:
      description: Est qui ratione sequi et inventore.
      id: 8.8054075e+18
      name: Cumque nihil.
      slug: 0n2552fo50
    properties:
      description:
        example: Est qui ratione sequi et inventore.
        type: string
      id:
        example: 8.8054075e+18
        format: int64
        type: integer
      name:
        example: Cumque nihil.
        type: string
      slug:
        example: 0n2552fo50
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.expedition+json; view=default'
    type: object
  ExpeditionCollection:
    description: ExpeditionCollection is the media type for an array of Expedition
      (default view)
    example:
    - description: Est qui ratione sequi et inventore.
      id: 8.8054075e+18
      name: Cumque nihil.
      slug: 0n2552fo50
    items:
      $ref: '#/definitions/Expedition'
    title: 'Mediatype identifier: application/vnd.app.expedition+json; type=collection;
      view=default'
    type: array
  Expeditions:
    description: Expeditions media type (default view)
    example:
      expeditions:
      - description: Est qui ratione sequi et inventore.
        id: 8.8054075e+18
        name: Cumque nihil.
        slug: 0n2552fo50
      - description: Est qui ratione sequi et inventore.
        id: 8.8054075e+18
        name: Cumque nihil.
        slug: 0n2552fo50
      - description: Est qui ratione sequi et inventore.
        id: 8.8054075e+18
        name: Cumque nihil.
        slug: 0n2552fo50
    properties:
      expeditions:
        $ref: '#/definitions/ExpeditionCollection'
    required:
    - expeditions
    title: 'Mediatype identifier: application/vnd.app.expeditions+json; view=default'
    type: object
  FieldkitBinary:
    description: FieldkitBinary media type (default view)
    example:
      fields:
      - float64
      - float64
      id: 6.7204097e+18
      input_id: 4.969073e+18
      latitude: Provident earum sit enim sapiente assumenda.
      longitude: Dolores dolores et.
      mapper:
        Velit quo eveniet in consequatur debitis.: Ratione aut et.
      schema_id: 5.67901e+18
    properties:
      fields:
        example:
        - float64
        - float64
        items:
          enum:
          - varint
          - uvarint
          - float32
          - float64
          example: float64
          type: string
        type: array
      id:
        example: 6.7204097e+18
        format: int64
        type: integer
      input_id:
        example: 4.969073e+18
        format: int64
        type: integer
      latitude:
        example: Provident earum sit enim sapiente assumenda.
        type: string
      longitude:
        example: Dolores dolores et.
        type: string
      mapper:
        additionalProperties: true
        example:
          Velit quo eveniet in consequatur debitis.: Ratione aut et.
        type: object
      schema_id:
        example: 5.67901e+18
        format: int64
        type: integer
    required:
    - id
    - input_id
    - schema_id
    - fields
    - mapper
    title: 'Mediatype identifier: application/vnd.app.fieldkit_input_binary+json;
      view=default'
    type: object
  FieldkitInput:
    description: FieldkitInput media type (default view)
    example:
      expedition_id: 8.241352e+18
      id: 2.436628e+18
      name: Voluptatum ducimus perspiciatis quasi error.
      team_id: 1.3719604e+18
      user_id: 4.1249876e+17
    properties:
      expedition_id:
        example: 8.241352e+18
        format: int64
        type: integer
      id:
        example: 2.436628e+18
        format: int64
        type: integer
      name:
        example: Voluptatum ducimus perspiciatis quasi error.
        type: string
      team_id:
        example: 1.3719604e+18
        format: int64
        type: integer
      user_id:
        example: 4.1249876e+17
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - name
    title: 'Mediatype identifier: application/vnd.app.fieldkit_input+json; view=default'
    type: object
  FieldkitInputCollection:
    description: FieldkitInputCollection is the media type for an array of FieldkitInput
      (default view)
    example:
    - expedition_id: 8.241352e+18
      id: 2.436628e+18
      name: Voluptatum ducimus perspiciatis quasi error.
      team_id: 1.3719604e+18
      user_id: 4.1249876e+17
    items:
      $ref: '#/definitions/FieldkitInput'
    title: 'Mediatype identifier: application/vnd.app.fieldkit_input+json; type=collection;
      view=default'
    type: array
  FieldkitInputs:
    description: FieldkitInputs media type (default view)
    example:
      fieldkit_inputs:
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
    properties:
      fieldkit_inputs:
        $ref: '#/definitions/FieldkitInputCollection'
    required:
    - fieldkit_inputs
    title: 'Mediatype identifier: application/vnd.app.fieldkit_inputs+json; view=default'
    type: object
  Input:
    description: Input media type (default view)
    example:
      expedition_id: 5.97091e+18
      id: 5.857079e+18
      name: Ipsa expedita qui eum.
      team_id: 4.621577e+18
      user_id: 2.594328e+18
    properties:
      expedition_id:
        example: 5.97091e+18
        format: int64
        type: integer
      id:
        example: 5.857079e+18
        format: int64
        type: integer
      name:
        example: Ipsa expedita qui eum.
        type: string
      team_id:
        example: 4.621577e+18
        format: int64
        type: integer
      user_id:
        example: 2.594328e+18
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - name
    title: 'Mediatype identifier: application/vnd.app.input+json; view=default'
    type: object
  Inputs:
    description: Inputs media type (default view)
    example:
      fieldkit_inputs:
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
      - expedition_id: 8.241352e+18
        id: 2.436628e+18
        name: Voluptatum ducimus perspiciatis quasi error.
        team_id: 1.3719604e+18
        user_id: 4.1249876e+17
      twitter_account_inputs:
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
    properties:
      fieldkit_inputs:
        $ref: '#/definitions/FieldkitInputCollection'
      twitter_account_inputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    title: 'Mediatype identifier: application/vnd.app.inputs+json; view=default'
    type: object
  Location:
    description: Location media type (default view)
    example:
      location: http://mclaughlin.biz/myrtis
    properties:
      location:
        example: http://mclaughlin.biz/myrtis
        format: uri
        type: string
    required:
    - location
    title: 'Mediatype identifier: application/vnd.app.location+json; view=default'
    type: object
  LoginPayload:
    example:
      password: xt2bl3l7uq
      username: 8jsn3lezln
    properties:
      password:
        example: xt2bl3l7uq
        minLength: 10
        type: string
      username:
        example: 8jsn3lezln
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - username
    - password
    title: LoginPayload
    type: object
  Point:
    description: Point media type (default view)
    example:
      coordinates:
      - 0.8597355
      - 0.8597355
      type: Point
    properties:
      coordinates:
        example:
        - 0.8597355
        - 0.8597355
        items:
          example: 0.8597355
          format: double
          type: number
        maxLength: 2
        minLength: 2
        type: array
      type:
        enum:
        - Point
        example: Point
        type: string
    required:
    - type
    - coordinates
    title: 'Mediatype identifier: application/vnd.app.point+json; view=default'
    type: object
  Project:
    description: Project media type (default view)
    example:
      description: Magni in ipsam asperiores nostrum facere dignissimos.
      id: 3.9715237e+18
      name: Quam soluta.
      slug: i3n7ahu8r8
    properties:
      description:
        example: Magni in ipsam asperiores nostrum facere dignissimos.
        type: string
      id:
        example: 3.9715237e+18
        format: int64
        type: integer
      name:
        example: Quam soluta.
        type: string
      slug:
        example: i3n7ahu8r8
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.project+json; view=default'
    type: object
  ProjectAdministrator:
    description: ProjectAdministrator media type (default view)
    example:
      project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    properties:
      project_id:
        example: 1.2833427e+18
        format: int64
        type: integer
      user_id:
        example: 6.2970576e+18
        format: int64
        type: integer
    required:
    - project_id
    - user_id
    title: 'Mediatype identifier: application/vnd.app.administrator+json; view=default'
    type: object
  ProjectAdministratorCollection:
    description: ProjectAdministratorCollection is the media type for an array of
      ProjectAdministrator (default view)
    example:
    - project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    - project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    - project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    items:
      $ref: '#/definitions/ProjectAdministrator'
    title: 'Mediatype identifier: application/vnd.app.administrator+json; type=collection;
      view=default'
    type: array
  ProjectAdministrators:
    description: ProjectAdministrators media type (default view)
    example:
      administrators:
      - project_id: 1.2833427e+18
        user_id: 6.2970576e+18
    properties:
      administrators:
        $ref: '#/definitions/ProjectAdministratorCollection'
    required:
    - administrators
    title: 'Mediatype identifier: application/vnd.app.administrators+json; view=default'
    type: object
  ProjectCollection:
    description: ProjectCollection is the media type for an array of Project (default
      view)
    example:
    - description: Magni in ipsam asperiores nostrum facere dignissimos.
      id: 3.9715237e+18
      name: Quam soluta.
      slug: i3n7ahu8r8
    - description: Magni in ipsam asperiores nostrum facere dignissimos.
      id: 3.9715237e+18
      name: Quam soluta.
      slug: i3n7ahu8r8
    items:
      $ref: '#/definitions/Project'
    title: 'Mediatype identifier: application/vnd.app.project+json; type=collection;
      view=default'
    type: array
  Projects:
    description: Projects media type (default view)
    example:
      projects:
      - description: Magni in ipsam asperiores nostrum facere dignissimos.
        id: 3.9715237e+18
        name: Quam soluta.
        slug: i3n7ahu8r8
      - description: Magni in ipsam asperiores nostrum facere dignissimos.
        id: 3.9715237e+18
        name: Quam soluta.
        slug: i3n7ahu8r8
      - description: Magni in ipsam asperiores nostrum facere dignissimos.
        id: 3.9715237e+18
        name: Quam soluta.
        slug: i3n7ahu8r8
    properties:
      projects:
        $ref: '#/definitions/ProjectCollection'
    required:
    - projects
    title: 'Mediatype identifier: application/vnd.app.projects+json; view=default'
    type: object
  RefreshUserPayload:
    example:
      refresh_token: Iusto cumque ut.
    properties:
      refresh_token:
        example: Iusto cumque ut.
        type: string
    required:
    - refresh_token
    title: RefreshUserPayload
    type: object
  Schema:
    description: Schema media type (default view)
    example:
      id: 1.8372573e+18
      json_schema: 6.5765226e+17
      project_id: 3.363932e+18
    properties:
      id:
        example: 1.8372573e+18
        format: int64
        type: integer
      json_schema:
        example: 6.5765226e+17
      project_id:
        example: 3.363932e+18
        format: int64
        type: integer
    required:
    - id
    - json_schema
    title: 'Mediatype identifier: application/vnd.app.schema+json; view=default'
    type: object
  SchemaCollection:
    description: SchemaCollection is the media type for an array of Schema (default
      view)
    example:
    - id: 1.8372573e+18
      json_schema: 6.5765226e+17
      project_id: 3.363932e+18
    items:
      $ref: '#/definitions/Schema'
    title: 'Mediatype identifier: application/vnd.app.schema+json; type=collection;
      view=default'
    type: array
  Schemas:
    description: Schemas media type (default view)
    example:
      schemas:
      - id: 1.8372573e+18
        json_schema: 6.5765226e+17
        project_id: 3.363932e+18
    properties:
      schemas:
        $ref: '#/definitions/SchemaCollection'
    title: 'Mediatype identifier: application/vnd.app.schemas+json; view=default'
    type: object
  SetFieldkitBinaryPayload:
    example:
      fields:
      - float64
      mapper:
        Velit quo eveniet in consequatur debitis.: Ratione aut et.
      schema_id: 3.877557e+18
    properties:
      fields:
        example:
        - float64
        items:
          enum:
          - varint
          - uvarint
          - float32
          - float64
          example: float64
          type: string
        type: array
      mapper:
        additionalProperties: true
        example:
          Velit quo eveniet in consequatur debitis.: Ratione aut et.
        type: object
      schema_id:
        example: 3.877557e+18
        format: int64
        type: integer
    required:
    - schema_id
    - fields
    - mapper
    title: SetFieldkitBinaryPayload
    type: object
  Team:
    description: Team media type (default view)
    example:
      description: Corrupti laudantium quo eos.
      id: 1.43399e+18
      name: o4ic2d6hce
      slug: 0voebzeo5q
    properties:
      description:
        example: Corrupti laudantium quo eos.
        type: string
      id:
        example: 1.43399e+18
        format: int64
        type: integer
      name:
        example: o4ic2d6hce
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: 0voebzeo5q
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.team+json; view=default'
    type: object
  TeamCollection:
    description: TeamCollection is the media type for an array of Team (default view)
    example:
    - description: Corrupti laudantium quo eos.
      id: 1.43399e+18
      name: o4ic2d6hce
      slug: 0voebzeo5q
    - description: Corrupti laudantium quo eos.
      id: 1.43399e+18
      name: o4ic2d6hce
      slug: 0voebzeo5q
    items:
      $ref: '#/definitions/Team'
    title: 'Mediatype identifier: application/vnd.app.team+json; type=collection;
      view=default'
    type: array
  TeamMember:
    description: TeamMember media type (default view)
    example:
      role: Optio autem et autem aliquid.
      team_id: 4.7661465e+18
      user_id: 1.14219664e+17
    properties:
      role:
        example: Optio autem et autem aliquid.
        type: string
      team_id:
        example: 4.7661465e+18
        format: int64
        type: integer
      user_id:
        example: 1.14219664e+17
        format: int64
        type: integer
    required:
    - team_id
    - user_id
    - role
    title: 'Mediatype identifier: application/vnd.app.member+json; view=default'
    type: object
  TeamMemberCollection:
    description: TeamMemberCollection is the media type for an array of TeamMember
      (default view)
    example:
    - role: Optio autem et autem aliquid.
      team_id: 4.7661465e+18
      user_id: 1.14219664e+17
    - role: Optio autem et autem aliquid.
      team_id: 4.7661465e+18
      user_id: 1.14219664e+17
    items:
      $ref: '#/definitions/TeamMember'
    title: 'Mediatype identifier: application/vnd.app.member+json; type=collection;
      view=default'
    type: array
  TeamMembers:
    description: TeamMembers media type (default view)
    example:
      members:
      - role: Optio autem et autem aliquid.
        team_id: 4.7661465e+18
        user_id: 1.14219664e+17
      - role: Optio autem et autem aliquid.
        team_id: 4.7661465e+18
        user_id: 1.14219664e+17
    properties:
      members:
        $ref: '#/definitions/TeamMemberCollection'
    required:
    - members
    title: 'Mediatype identifier: application/vnd.app.members+json; view=default'
    type: object
  Teams:
    description: Teams media type (default view)
    example:
      teams:
      - description: Corrupti laudantium quo eos.
        id: 1.43399e+18
        name: o4ic2d6hce
        slug: 0voebzeo5q
    properties:
      teams:
        $ref: '#/definitions/TeamCollection'
    required:
    - teams
    title: 'Mediatype identifier: application/vnd.app.teams+json; view=default'
    type: object
  TwitterAccountInput:
    description: TwitterAccountInput media type (default view)
    example:
      expedition_id: 5.1149286e+18
      id: 1.3454926e+17
      name: Quidem quis fugit commodi ut.
      screen_name: Et aperiam amet nulla dolore.
      team_id: 9.060172e+18
      twitter_account_id: 1.9465085e+18
      user_id: 2.419429e+18
    properties:
      expedition_id:
        example: 5.1149286e+18
        format: int64
        type: integer
      id:
        example: 1.3454926e+17
        format: int64
        type: integer
      name:
        example: Quidem quis fugit commodi ut.
        type: string
      screen_name:
        example: Et aperiam amet nulla dolore.
        type: string
      team_id:
        example: 9.060172e+18
        format: int64
        type: integer
      twitter_account_id:
        example: 1.9465085e+18
        format: int64
        type: integer
      user_id:
        example: 2.419429e+18
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - name
    - twitter_account_id
    - screen_name
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      view=default'
    type: object
  TwitterAccountInputCollection:
    description: TwitterAccountInputCollection is the media type for an array of TwitterAccountInput
      (default view)
    example:
    - expedition_id: 5.1149286e+18
      id: 1.3454926e+17
      name: Quidem quis fugit commodi ut.
      screen_name: Et aperiam amet nulla dolore.
      team_id: 9.060172e+18
      twitter_account_id: 1.9465085e+18
      user_id: 2.419429e+18
    - expedition_id: 5.1149286e+18
      id: 1.3454926e+17
      name: Quidem quis fugit commodi ut.
      screen_name: Et aperiam amet nulla dolore.
      team_id: 9.060172e+18
      twitter_account_id: 1.9465085e+18
      user_id: 2.419429e+18
    items:
      $ref: '#/definitions/TwitterAccountInput'
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      type=collection; view=default'
    type: array
  TwitterAccountInputs:
    description: TwitterAccountInputs media type (default view)
    example:
      twitter_account_inputs:
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
      - expedition_id: 5.1149286e+18
        id: 1.3454926e+17
        name: Quidem quis fugit commodi ut.
        screen_name: Et aperiam amet nulla dolore.
        team_id: 9.060172e+18
        twitter_account_id: 1.9465085e+18
        user_id: 2.419429e+18
    properties:
      twitter_account_inputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    required:
    - twitter_account_inputs
    title: 'Mediatype identifier: application/vnd.app.twitter_account_intputs+json;
      view=default'
    type: object
  UpdateInputPayload:
    example:
      name: Ratione nisi ea sed.
      team_id: 5.9637593e+18
      user_id: 8.7125543e+18
    properties:
      name:
        example: Ratione nisi ea sed.
        type: string
      team_id:
        example: 5.9637593e+18
        format: int64
        type: integer
      user_id:
        example: 8.7125543e+18
        format: int64
        type: integer
    required:
    - name
    title: UpdateInputPayload
    type: object
  UpdateMemberPayload:
    example:
      role: Dolorem consequatur quidem sed.
    properties:
      role:
        example: Dolorem consequatur quidem sed.
        type: string
    required:
    - role
    title: UpdateMemberPayload
    type: object
  UpdateSchemaPayload:
    example:
      json_schema: 0.60104454
      project_id: 5.541664e+18
    properties:
      json_schema:
        example: 0.60104454
      project_id:
        example: 5.541664e+18
        format: int64
        type: integer
    required:
    - json_schema
    title: UpdateSchemaPayload
    type: object
  UpdateUserPayload:
    example:
      bio: Consequatur ea repudiandae veritatis delectus sit.
      email: consuelo_sipes@reichel.info
      name: qbyl3ug0j6
      username: ckqzcr94vj
    properties:
      bio:
        example: Consequatur ea repudiandae veritatis delectus sit.
        type: string
      email:
        example: consuelo_sipes@reichel.info
        format: email
        type: string
      name:
        example: qbyl3ug0j6
        maxLength: 256
        pattern: \S
        type: string
      username:
        example: ckqzcr94vj
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - email
    - username
    - bio
    title: UpdateUserPayload
    type: object
  User:
    description: User media type (default view)
    example:
      bio: Adipisci aut ducimus autem et.
      email: omer.little@herman.info
      id: 3.008085e+18
      name: cingd200ja
      username: ckup4mrplu
    properties:
      bio:
        example: Adipisci aut ducimus autem et.
        type: string
      email:
        example: omer.little@herman.info
        format: email
        type: string
      id:
        example: 3.008085e+18
        format: int64
        type: integer
      name:
        example: cingd200ja
        maxLength: 256
        pattern: \S
        type: string
      username:
        example: ckup4mrplu
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - username
    - email
    - bio
    title: 'Mediatype identifier: application/vnd.app.user+json; view=default'
    type: object
  UserCollection:
    description: UserCollection is the media type for an array of User (default view)
    example:
    - bio: Adipisci aut ducimus autem et.
      email: omer.little@herman.info
      id: 3.008085e+18
      name: cingd200ja
      username: ckup4mrplu
    items:
      $ref: '#/definitions/User'
    title: 'Mediatype identifier: application/vnd.app.user+json; type=collection;
      view=default'
    type: array
  Users:
    description: Users media type (default view)
    example:
      users:
      - bio: Adipisci aut ducimus autem et.
        email: omer.little@herman.info
        id: 3.008085e+18
        name: cingd200ja
        username: ckup4mrplu
      - bio: Adipisci aut ducimus autem et.
        email: omer.little@herman.info
        id: 3.008085e+18
        name: cingd200ja
        username: ckup4mrplu
      - bio: Adipisci aut ducimus autem et.
        email: omer.little@herman.info
        id: 3.008085e+18
        name: cingd200ja
        username: ckup4mrplu
    properties:
      users:
        $ref: '#/definitions/UserCollection'
    required:
    - users
    title: 'Mediatype identifier: application/vnd.app.users+json; view=default'
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: api.fieldkit.org
info:
  description: A one-click open platform for field researchers and explorers.
  title: Fieldkit API
  version: ""
paths:
  /expeditions/{expedition_id}:
    get:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#get id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id expedition
      tags:
      - expedition
    patch:
      description: |-
        Update an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#update
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update expedition
      tags:
      - expedition
  /expeditions/{expedition_id}/documents:
    get:
      description: List a expedition's documents
      operationId: document#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.documents+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Documents'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list id document
      tags:
      - document
  /expeditions/{expedition_id}/inputs:
    get:
      description: |-
        List a project's inputs

        Required security scopes:
          * `api:access`
      operationId: input#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id input
      tags:
      - input
  /expeditions/{expedition_id}/inputs/fieldkits:
    get:
      description: |-
        List an expedition's Fieldkit inputs

        Required security scopes:
          * `api:access`
      operationId: fieldkit#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.fieldkit_inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FieldkitInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id fieldkit
      tags:
      - fieldkit
    post:
      description: |-
        Add a Fieldkit input

        Required security scopes:
          * `api:access`
      operationId: fieldkit#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddFieldkitInputPayload'
      produces:
      - application/vnd.app.fieldkit_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FieldkitInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add fieldkit
      tags:
      - fieldkit
  /expeditions/{expedition_id}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id twitter
      tags:
      - twitter
    post:
      description: |-
        Add a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTwitterAccountInputPayload'
      produces:
      - application/vnd.app.location+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Location'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add twitter
      tags:
      - twitter
  /expeditions/{expedition_id}/picture:
    get:
      description: Get a expedition's picture
      operationId: picture#expedition get id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: expedition get id picture
      tags:
      - picture
  /expeditions/{expedition_id}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id team
      tags:
      - team
    post:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add team
      tags:
      - team
  /inputs/{input_id}:
    patch:
      description: |-
        Update an input

        Required security scopes:
          * `api:access`
      operationId: input#update
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateInputPayload'
      produces:
      - application/vnd.app.input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Input'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update input
      tags:
      - input
  /inputs/fieldkits/{input_id}:
    get:
      description: |-
        Get a Fieldkit input

        Required security scopes:
          * `api:access`
      operationId: fieldkit#get id
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      produces:
      - application/vnd.app.fieldkit_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FieldkitInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id fieldkit
      tags:
      - fieldkit
  /inputs/fieldkits/{input_id}/binary/{binary_id}:
    put:
      description: |-
        Set a Fieldkit binary format

        Required security scopes:
          * `api:access`
      operationId: fieldkit#set binary
      parameters:
      - in: path
        maximum: 32767
        name: binary_id
        required: true
        type: integer
      - in: path
        name: input_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/SetFieldkitBinaryPayload'
      produces:
      - application/vnd.app.fieldkit_input_binary+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FieldkitBinary'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: set binary fieldkit
      tags:
      - fieldkit
  /inputs/fieldkits/{input_id}/send/binary:
    post:
      description: |-
        Send binary data

        Required security scopes:
          * `api:access`
      operationId: fieldkit#send binary
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: send binary fieldkit
      tags:
      - fieldkit
  /inputs/fieldkits/{input_id}/send/csv:
    post:
      description: |-
        Send CSV data

        Required security scopes:
          * `api:access`
      operationId: fieldkit#send csv
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: send csv fieldkit
      tags:
      - fieldkit
  /inputs/twitter-accounts/{input_id}:
    get:
      description: |-
        Get a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#get id
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id twitter
      tags:
      - twitter
  /login:
    post:
      description: Creates a valid JWT given login credentials.
      operationId: user#login
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: login user
      tags:
      - user
  /logout:
    post:
      description: |-
        Creates a valid JWT given login credentials.

        Required security scopes:
          * `api:access`
      operationId: user#logout
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: logout user
      tags:
      - user
  /projects:
    get:
      description: |-
        List projects

        Required security scopes:
          * `api:access`
      operationId: project#list
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list project
      tags:
      - project
    post:
      description: |-
        Add a project

        Required security scopes:
          * `api:access`
      operationId: project#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add project
      tags:
      - project
  /projects/@/{project}:
    get:
      description: Get a project
      operationId: project#get
      parameters:
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get project
      tags:
      - project
  /projects/@/{project}/administrators:
    get:
      description: |-
        List an project's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list
      parameters:
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list administrator
      tags:
      - administrator
  /projects/@/{project}/administrators/@/{username}:
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get
      parameters:
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Username
        in: path
        name: username
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get administrator
      tags:
      - administrator
  /projects/@/{project}/expeditions:
    get:
      description: List a project's expeditions
      operationId: expedition#list
      parameters:
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}:
    get:
      description: Add an expedition
      operationId: expedition#get
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}/documents:
    get:
      description: List a expedition's documents
      operationId: document#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.documents+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Documents'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list document
      tags:
      - document
  /projects/@/{project}/expeditions/@/{expedition}/inputs:
    get:
      description: |-
        List a project's inputs

        Required security scopes:
          * `api:access`
      operationId: input#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list input
      tags:
      - input
  /projects/@/{project}/expeditions/@/{expedition}/inputs/fieldkits:
    get:
      description: |-
        List an expedition's Fieldkit inputs

        Required security scopes:
          * `api:access`
      operationId: fieldkit#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.fieldkit_inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FieldkitInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list fieldkit
      tags:
      - fieldkit
  /projects/@/{project}/expeditions/@/{expedition}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list twitter
      tags:
      - twitter
  /projects/@/{project}/expeditions/@/{expedition}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}:
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: team
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members:
    get:
      description: |-
        List an team's members

        Required security scopes:
          * `api:access`
      operationId: member#list
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        name: team
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list member
      tags:
      - member
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members/@/{username}:
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get
      parameters:
      - description: Expedition slug
        in: path
        name: expedition
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        name: team
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        name: username
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get member
      tags:
      - member
  /projects/@/{project}/schemas:
    get:
      description: |-
        List a project's schemas

        Required security scopes:
          * `api:access`
      operationId: schema#list
      parameters:
      - description: Project slug
        in: path
        name: project
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.schemas+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Schemas'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list schema
      tags:
      - schema
  /projects/{project_id}:
    get:
      description: |-
        Get a project

        Required security scopes:
          * `api:access`
      operationId: project#get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id project
      tags:
      - project
    patch:
      description: |-
        Update a project

        Required security scopes:
          * `api:access`
      operationId: project#update
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update project
      tags:
      - project
  /projects/{project_id}/administrators:
    get:
      description: |-
        List an projects's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id administrator
      tags:
      - administrator
    post:
      description: |-
        Add an administrator to a project

        Required security scopes:
          * `api:access`
      operationId: administrator#add
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddAdministratorPayload'
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add administrator
      tags:
      - administrator
  /projects/{project_id}/administrators/{user_id}:
    delete:
      description: |-
        Remove an administrator from a project

        Required security scopes:
          * `api:access`
      operationId: administrator#delete
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete administrator
      tags:
      - administrator
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id administrator
      tags:
      - administrator
  /projects/{project_id}/expeditions:
    get:
      description: |-
        List a project's expeditions

        Required security scopes:
          * `api:access`
      operationId: expedition#list id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id expedition
      tags:
      - expedition
    post:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#add
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add expedition
      tags:
      - expedition
  /projects/{project_id}/picture:
    get:
      description: Get a project's picture
      operationId: picture#project get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: project get id picture
      tags:
      - picture
  /projects/{project_id}/schemas:
    get:
      description: |-
        List a project's schemas

        Required security scopes:
          * `api:access`
      operationId: schema#list id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.schemas+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Schemas'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id schema
      tags:
      - schema
    post:
      description: |-
        Add a schema

        Required security scopes:
          * `api:access`
      operationId: schema#add
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddSchemaPayload'
      produces:
      - application/vnd.app.schema+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Schema'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add schema
      tags:
      - schema
  /refresh:
    post:
      description: Creates a valid JWT given a refresh token.
      operationId: user#refresh
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/RefreshUserPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: refresh user
      tags:
      - user
  /schemas/{schema_id}:
    patch:
      description: |-
        Update a schema

        Required security scopes:
          * `api:access`
      operationId: schema#update
      parameters:
      - in: path
        name: schema_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateSchemaPayload'
      produces:
      - application/vnd.app.schema+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Schema'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update schema
      tags:
      - schema
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.json
  /swagger.yaml:
    get:
      operationId: swagger#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.yaml
  /teams/{team_id}:
    delete:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#delete
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete team
      tags:
      - team
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id team
      tags:
      - team
    patch:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#update
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update team
      tags:
      - team
  /teams/{team_id}/members:
    get:
      description: |-
        List an teams's members

        Required security scopes:
          * `api:access`
      operationId: member#list id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id member
      tags:
      - member
    post:
      description: |-
        Add a member to a team

        Required security scopes:
          * `api:access`
      operationId: member#add
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add member
      tags:
      - member
  /teams/{team_id}/members/{user_id}:
    delete:
      description: |-
        Remove a member from a team

        Required security scopes:
          * `api:access`
      operationId: member#delete
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete member
      tags:
      - member
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id member
      tags:
      - member
    patch:
      description: |-
        Update a member

        Required security scopes:
          * `api:access`
      operationId: member#update
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update member
      tags:
      - member
  /twitter/callback:
    get:
      description: OAuth callback endpoint for Twitter
      operationId: twitter#callback
      parameters:
      - in: query
        name: oauth_token
        required: true
        type: string
      - in: query
        name: oauth_verifier
        required: true
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "400":
          description: Bad Request
      schemes:
      - https
      summary: callback twitter
      tags:
      - twitter
  /user:
    get:
      description: |-
        Get the authenticated user

        Required security scopes:
          * `api:access`
      operationId: user#get current
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get current user
      tags:
      - user
  /user/projects:
    get:
      description: |-
        List the authenticated user's projects

        Required security scopes:
          * `api:access`
      operationId: project#list current
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list current project
      tags:
      - project
  /users:
    get:
      description: |-
        List users

        Required security scopes:
          * `api:access`
      operationId: user#list
      produces:
      - application/vnd.app.users+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list user
      tags:
      - user
    post:
      description: Add a user
      operationId: user#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: add user
      tags:
      - user
  /users/@/{username}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get
      parameters:
      - in: path
        name: username
        required: true
        type: string
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get user
      tags:
      - user
  /users/{user_id}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get id
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id user
      tags:
      - user
    patch:
      description: |-
        Update a user

        Required security scopes:
          * `api:access`
      operationId: user#update
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update user
      tags:
      - user
  /users/{user_id}/picture:
    get:
      description: Get a user's picture
      operationId: picture#user get id
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: user get id picture
      tags:
      - picture
  /validate:
    get:
      description: Validate a user's email address.
      operationId: user#validate
      parameters:
      - in: query
        name: token
        required: true
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: validate user
      tags:
      - user
produces:
- application/json
responses:
  BadRequest:
    description: Bad Request
  NoContent:
    description: No Content
  Unauthorized:
    description: Unauthorized
schemes:
- https
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
