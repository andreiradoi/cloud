consumes:
- application/json
definitions:
  AddAdministratorPayload:
    example:
      userId: 6.3747106e+18
    properties:
      userId:
        example: 6.3747106e+18
        format: int64
        type: integer
    required:
    - userId
    title: AddAdministratorPayload
    type: object
  AddDeviceInputPayload:
    example:
      key: Ipsa rerum.
      name: Sed dolorem.
    properties:
      key:
        example: Ipsa rerum.
        type: string
      name:
        example: Sed dolorem.
        type: string
    required:
    - name
    - key
    title: AddDeviceInputPayload
    type: object
  AddExpeditionPayload:
    example:
      description: Amet est accusantium et et.
      name: Et est soluta et aut.
      slug: 7ambiiuahx
    properties:
      description:
        example: Amet est accusantium et et.
        type: string
      name:
        example: Et est soluta et aut.
        type: string
      slug:
        example: 7ambiiuahx
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddExpeditionPayload
    type: object
  AddMemberPayload:
    example:
      role: Est tempora cumque sed.
      userId: 5.676036e+18
    properties:
      role:
        example: Est tempora cumque sed.
        type: string
      userId:
        example: 5.676036e+18
        format: int64
        type: integer
    required:
    - userId
    - role
    title: AddMemberPayload
    type: object
  AddProjectPayload:
    example:
      description: Assumenda ut minima.
      name: Voluptates dicta consectetur.
      slug: 12lgh80jxq
    properties:
      description:
        example: Assumenda ut minima.
        type: string
      name:
        example: Voluptates dicta consectetur.
        type: string
      slug:
        example: 12lgh80jxq
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddProjectPayload
    type: object
  AddTeamPayload:
    example:
      description: In doloribus.
      name: igp59zqliv
      slug: uepd168s1l
    properties:
      description:
        example: In doloribus.
        type: string
      name:
        example: igp59zqliv
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: uepd168s1l
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddTeamPayload
    type: object
  AddTwitterAccountInputPayload:
    example:
      name: Necessitatibus voluptatum odit eum qui.
    properties:
      name:
        example: Necessitatibus voluptatum odit eum qui.
        type: string
    required:
    - name
    title: AddTwitterAccountInputPayload
    type: object
  AddUserPayload:
    example:
      bio: Minima cupiditate ullam impedit.
      email: kiara@swaniawski.biz
      invite_token: Ut unde eaque culpa unde iusto cumque.
      name: v0074l47q7
      password: xcws9vmoha
      username: diw072s4wt
    properties:
      bio:
        example: Minima cupiditate ullam impedit.
        type: string
      email:
        example: kiara@swaniawski.biz
        format: email
        type: string
      invite_token:
        example: Ut unde eaque culpa unde iusto cumque.
        type: string
      name:
        example: v0074l47q7
        maxLength: 256
        pattern: \S
        type: string
      password:
        example: xcws9vmoha
        minLength: 10
        type: string
      username:
        description: Username
        example: diw072s4wt
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - name
    - email
    - username
    - password
    - bio
    - invite_token
    title: AddUserPayload
    type: object
  DeviceInput:
    description: DeviceInput media type (default view)
    example:
      active: false
      expeditionId: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Quis blanditiis recusandae est quidem rem.
      teamId: 9.165355e+18
      token: Ratione sequi et inventore voluptas rerum.
      userId: 8.568918e+18
    properties:
      active:
        example: false
        type: boolean
      expeditionId:
        example: 5.794513e+18
        format: int64
        type: integer
      id:
        example: 8.930515e+18
        format: int64
        type: integer
      key:
        example: Quaerat in qui.
        type: string
      name:
        example: Quis blanditiis recusandae est quidem rem.
        type: string
      teamId:
        example: 9.165355e+18
        format: int64
        type: integer
      token:
        example: Ratione sequi et inventore voluptas rerum.
        type: string
      userId:
        example: 8.568918e+18
        format: int64
        type: integer
    required:
    - id
    - expeditionId
    - active
    - name
    - token
    - key
    title: 'Mediatype identifier: application/vnd.app.device_input+json; view=default'
    type: object
  DeviceInputCollection:
    description: DeviceInputCollection is the media type for an array of DeviceInput
      (default view)
    example:
    - active: false
      expeditionId: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Quis blanditiis recusandae est quidem rem.
      teamId: 9.165355e+18
      token: Ratione sequi et inventore voluptas rerum.
      userId: 8.568918e+18
    - active: false
      expeditionId: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Quis blanditiis recusandae est quidem rem.
      teamId: 9.165355e+18
      token: Ratione sequi et inventore voluptas rerum.
      userId: 8.568918e+18
    - active: false
      expeditionId: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Quis blanditiis recusandae est quidem rem.
      teamId: 9.165355e+18
      token: Ratione sequi et inventore voluptas rerum.
      userId: 8.568918e+18
    items:
      $ref: '#/definitions/DeviceInput'
    title: 'Mediatype identifier: application/vnd.app.device_input+json; type=collection;
      view=default'
    type: array
  DeviceInputs:
    description: DeviceInputs media type (default view)
    example:
      deviceInputs:
      - active: false
        expeditionId: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Quis blanditiis recusandae est quidem rem.
        teamId: 9.165355e+18
        token: Ratione sequi et inventore voluptas rerum.
        userId: 8.568918e+18
    properties:
      deviceInputs:
        $ref: '#/definitions/DeviceInputCollection'
    required:
    - deviceInputs
    title: 'Mediatype identifier: application/vnd.app.device_inputs+json; view=default'
    type: object
  DeviceSchema:
    description: DeviceSchema media type (default view)
    example:
      active: true
      deviceId: 3.6825135e+17
      jsonSchema: Laboriosam aut voluptatum.
      key: Error dignissimos.
      projectId: 8.369166e+18
      schemaId: 5.950821e+18
    properties:
      active:
        example: true
        type: boolean
      deviceId:
        example: 3.6825135e+17
        format: int64
        type: integer
      jsonSchema:
        example: Laboriosam aut voluptatum.
        type: string
      key:
        example: Error dignissimos.
        type: string
      projectId:
        example: 8.369166e+18
        format: int64
        type: integer
      schemaId:
        example: 5.950821e+18
        format: int64
        type: integer
    required:
    - deviceId
    - schemaId
    - projectId
    - active
    - jsonSchema
    - key
    title: 'Mediatype identifier: application/vnd.app.device_schema+json; view=default'
    type: object
  DeviceSchemaCollection:
    description: DeviceSchemaCollection is the media type for an array of DeviceSchema
      (default view)
    example:
    - active: true
      deviceId: 3.6825135e+17
      jsonSchema: Laboriosam aut voluptatum.
      key: Error dignissimos.
      projectId: 8.369166e+18
      schemaId: 5.950821e+18
    - active: true
      deviceId: 3.6825135e+17
      jsonSchema: Laboriosam aut voluptatum.
      key: Error dignissimos.
      projectId: 8.369166e+18
      schemaId: 5.950821e+18
    items:
      $ref: '#/definitions/DeviceSchema'
    title: 'Mediatype identifier: application/vnd.app.device_schema+json; type=collection;
      view=default'
    type: array
  DeviceSchemas:
    description: DeviceSchemas media type (default view)
    example:
      schemas:
      - active: true
        deviceId: 3.6825135e+17
        jsonSchema: Laboriosam aut voluptatum.
        key: Error dignissimos.
        projectId: 8.369166e+18
        schemaId: 5.950821e+18
    properties:
      schemas:
        $ref: '#/definitions/DeviceSchemaCollection'
    required:
    - schemas
    title: 'Mediatype identifier: application/vnd.app.device_schemas+json; view=default'
    type: object
  Expedition:
    description: Expedition media type (default view)
    example:
      description: Ut voluptatum ducimus perspiciatis quasi error.
      id: 1.3719604e+18
      name: Debitis ducimus.
      slug: hxwu5kh0we
    properties:
      description:
        example: Ut voluptatum ducimus perspiciatis quasi error.
        type: string
      id:
        example: 1.3719604e+18
        format: int64
        type: integer
      name:
        example: Debitis ducimus.
        type: string
      slug:
        example: hxwu5kh0we
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.expedition+json; view=default'
    type: object
  ExpeditionCollection:
    description: ExpeditionCollection is the media type for an array of Expedition
      (default view)
    example:
    - description: Ut voluptatum ducimus perspiciatis quasi error.
      id: 1.3719604e+18
      name: Debitis ducimus.
      slug: hxwu5kh0we
    - description: Ut voluptatum ducimus perspiciatis quasi error.
      id: 1.3719604e+18
      name: Debitis ducimus.
      slug: hxwu5kh0we
    - description: Ut voluptatum ducimus perspiciatis quasi error.
      id: 1.3719604e+18
      name: Debitis ducimus.
      slug: hxwu5kh0we
    items:
      $ref: '#/definitions/Expedition'
    title: 'Mediatype identifier: application/vnd.app.expedition+json; type=collection;
      view=default'
    type: array
  Expeditions:
    description: Expeditions media type (default view)
    example:
      expeditions:
      - description: Ut voluptatum ducimus perspiciatis quasi error.
        id: 1.3719604e+18
        name: Debitis ducimus.
        slug: hxwu5kh0we
      - description: Ut voluptatum ducimus perspiciatis quasi error.
        id: 1.3719604e+18
        name: Debitis ducimus.
        slug: hxwu5kh0we
    properties:
      expeditions:
        $ref: '#/definitions/ExpeditionCollection'
    required:
    - expeditions
    title: 'Mediatype identifier: application/vnd.app.expeditions+json; view=default'
    type: object
  GeoJSON:
    description: GeoJSON media type (default view)
    example:
      features:
      - geometry:
          coordinates:
          - 0.2960596
          - 0.2960596
          - 0.2960596
          type: Quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      - geometry:
          coordinates:
          - 0.2960596
          - 0.2960596
          - 0.2960596
          type: Quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      - geometry:
          coordinates:
          - 0.2960596
          - 0.2960596
          - 0.2960596
          type: Quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      type: Expedita qui eum.
    properties:
      features:
        $ref: '#/definitions/GeoJSONFeatureCollection'
      type:
        example: Expedita qui eum.
        type: string
    required:
    - type
    - features
    title: 'Mediatype identifier: application/vnd.app.geojson+json; view=default'
    type: object
  GeoJSONFeature:
    description: GeoJSONFeature media type (default view)
    example:
      geometry:
        coordinates:
        - 0.2960596
        - 0.2960596
        - 0.2960596
        type: Quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    properties:
      geometry:
        $ref: '#/definitions/GeoJSONGeometry'
      properties:
        additionalProperties: true
        example:
          Sit ratione aut et.: 3.0362945e+18
        type: object
      type:
        example: Odit sapiente.
        type: string
    required:
    - type
    - geometry
    - properties
    title: 'Mediatype identifier: application/vnd.app.geojson-feature+json; view=default'
    type: object
  GeoJSONFeatureCollection:
    description: GeoJSONFeatureCollection is the media type for an array of GeoJSONFeature
      (default view)
    example:
    - geometry:
        coordinates:
        - 0.2960596
        - 0.2960596
        - 0.2960596
        type: Quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    - geometry:
        coordinates:
        - 0.2960596
        - 0.2960596
        - 0.2960596
        type: Quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    - geometry:
        coordinates:
        - 0.2960596
        - 0.2960596
        - 0.2960596
        type: Quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    items:
      $ref: '#/definitions/GeoJSONFeature'
    title: 'Mediatype identifier: application/vnd.app.geojson-feature+json; type=collection;
      view=default'
    type: array
  GeoJSONGeometry:
    description: GeoJSONGeometry media type (default view)
    example:
      coordinates:
      - 0.2960596
      - 0.2960596
      - 0.2960596
      type: Quo eveniet in.
    properties:
      coordinates:
        example:
        - 0.2960596
        - 0.2960596
        - 0.2960596
        items:
          example: 0.2960596
          format: double
          type: number
        type: array
      type:
        example: Quo eveniet in.
        type: string
    required:
    - type
    - coordinates
    title: 'Mediatype identifier: application/vnd.app.geojson-geometry+json; view=default'
    type: object
  Input:
    description: Input media type (default view)
    example:
      active: false
      expeditionId: 5.1553956e+18
      id: 3.8114873e+18
      name: Dolore laboriosam soluta quia molestias.
      teamId: 3.7761713e+18
      userId: 4.7540266e+18
    properties:
      active:
        example: false
        type: boolean
      expeditionId:
        example: 5.1553956e+18
        format: int64
        type: integer
      id:
        example: 3.8114873e+18
        format: int64
        type: integer
      name:
        example: Dolore laboriosam soluta quia molestias.
        type: string
      teamId:
        example: 3.7761713e+18
        format: int64
        type: integer
      userId:
        example: 4.7540266e+18
        format: int64
        type: integer
    required:
    - id
    - expeditionId
    - name
    title: 'Mediatype identifier: application/vnd.app.input+json; view=default'
    type: object
  InputToken:
    description: InputToken media type (default view)
    example:
      expeditionId: 4.977542e+18
      id: 7.839764e+18
      token: Reprehenderit totam dolorem impedit hic.
    properties:
      expeditionId:
        example: 4.977542e+18
        format: int64
        type: integer
      id:
        example: 7.839764e+18
        format: int64
        type: integer
      token:
        example: Reprehenderit totam dolorem impedit hic.
        type: string
    required:
    - id
    - token
    - expeditionId
    title: 'Mediatype identifier: application/vnd.app.input_token+json; view=default'
    type: object
  InputTokenCollection:
    description: InputTokenCollection is the media type for an array of InputToken
      (default view)
    example:
    - expeditionId: 4.977542e+18
      id: 7.839764e+18
      token: Reprehenderit totam dolorem impedit hic.
    items:
      $ref: '#/definitions/InputToken'
    title: 'Mediatype identifier: application/vnd.app.input_token+json; type=collection;
      view=default'
    type: array
  InputTokens:
    description: InputTokens media type (default view)
    example:
      inputTokens:
      - expeditionId: 4.977542e+18
        id: 7.839764e+18
        token: Reprehenderit totam dolorem impedit hic.
      - expeditionId: 4.977542e+18
        id: 7.839764e+18
        token: Reprehenderit totam dolorem impedit hic.
      - expeditionId: 4.977542e+18
        id: 7.839764e+18
        token: Reprehenderit totam dolorem impedit hic.
    properties:
      inputTokens:
        $ref: '#/definitions/InputTokenCollection'
    required:
    - inputTokens
    title: 'Mediatype identifier: application/vnd.app.input_tokens+json; view=default'
    type: object
  Inputs:
    description: Inputs media type (default view)
    example:
      deviceInputs:
      - active: false
        expeditionId: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Quis blanditiis recusandae est quidem rem.
        teamId: 9.165355e+18
        token: Ratione sequi et inventore voluptas rerum.
        userId: 8.568918e+18
      - active: false
        expeditionId: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Quis blanditiis recusandae est quidem rem.
        teamId: 9.165355e+18
        token: Ratione sequi et inventore voluptas rerum.
        userId: 8.568918e+18
      twitterAccountInputs:
      - expeditionId: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screenName: Placeat amet illo reprehenderit quod provident dolorum.
        teamId: 6.943343e+18
        twitterAccountId: 1.3138473e+18
        userId: 6.7501333e+18
      - expeditionId: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screenName: Placeat amet illo reprehenderit quod provident dolorum.
        teamId: 6.943343e+18
        twitterAccountId: 1.3138473e+18
        userId: 6.7501333e+18
    properties:
      deviceInputs:
        $ref: '#/definitions/DeviceInputCollection'
      twitterAccountInputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    title: 'Mediatype identifier: application/vnd.app.inputs+json; view=default'
    type: object
  Location:
    description: Location media type (default view)
    example:
      location: http://lebsacksanford.biz/samanta.cummerata
    properties:
      location:
        example: http://lebsacksanford.biz/samanta.cummerata
        format: uri
        type: string
    required:
    - location
    title: 'Mediatype identifier: application/vnd.app.location+json; view=default'
    type: object
  LoginPayload:
    example:
      password: o8fcm9dpz8
      username: ljd524hqby
    properties:
      password:
        example: o8fcm9dpz8
        minLength: 10
        type: string
      username:
        description: Username
        example: ljd524hqby
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - username
    - password
    title: LoginPayload
    type: object
  PagedGeoJSON:
    description: PagedGeoJSON media type (default view)
    example:
      geo:
        features:
        - geometry:
            coordinates:
            - 0.2960596
            - 0.2960596
            - 0.2960596
            type: Quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        - geometry:
            coordinates:
            - 0.2960596
            - 0.2960596
            - 0.2960596
            type: Quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        - geometry:
            coordinates:
            - 0.2960596
            - 0.2960596
            - 0.2960596
            type: Quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        type: Expedita qui eum.
      hasMore: true
      nextUrl: Dignissimos voluptatem consequatur nihil.
      previousUrl: Corrupti voluptates beatae.
    properties:
      geo:
        $ref: '#/definitions/GeoJSON'
      hasMore:
        example: true
        type: boolean
      nextUrl:
        example: Dignissimos voluptatem consequatur nihil.
        type: string
      previousUrl:
        example: Corrupti voluptates beatae.
        type: string
    required:
    - nextUrl
    - geo
    - hasMore
    title: 'Mediatype identifier: application/vnd.app.paged-geojson+json; view=default'
    type: object
  Project:
    description: Project media type (default view)
    example:
      description: Ipsa soluta minus consequatur ullam sed magni.
      id: 3.675992e+18
      name: Blanditiis debitis eos iure ea.
      slug: jv73wy8mr3
    properties:
      description:
        example: Ipsa soluta minus consequatur ullam sed magni.
        type: string
      id:
        example: 3.675992e+18
        format: int64
        type: integer
      name:
        example: Blanditiis debitis eos iure ea.
        type: string
      slug:
        example: jv73wy8mr3
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.project+json; view=default'
    type: object
  ProjectAdministrator:
    description: ProjectAdministrator media type (default view)
    example:
      projectId: 1.2833427e+18
      userId: 6.2970576e+18
    properties:
      projectId:
        example: 1.2833427e+18
        format: int64
        type: integer
      userId:
        example: 6.2970576e+18
        format: int64
        type: integer
    required:
    - projectId
    - userId
    title: 'Mediatype identifier: application/vnd.app.administrator+json; view=default'
    type: object
  ProjectAdministratorCollection:
    description: ProjectAdministratorCollection is the media type for an array of
      ProjectAdministrator (default view)
    example:
    - projectId: 1.2833427e+18
      userId: 6.2970576e+18
    items:
      $ref: '#/definitions/ProjectAdministrator'
    title: 'Mediatype identifier: application/vnd.app.administrator+json; type=collection;
      view=default'
    type: array
  ProjectAdministrators:
    description: ProjectAdministrators media type (default view)
    example:
      administrators:
      - projectId: 1.2833427e+18
        userId: 6.2970576e+18
      - projectId: 1.2833427e+18
        userId: 6.2970576e+18
    properties:
      administrators:
        $ref: '#/definitions/ProjectAdministratorCollection'
    required:
    - administrators
    title: 'Mediatype identifier: application/vnd.app.administrators+json; view=default'
    type: object
  ProjectCollection:
    description: ProjectCollection is the media type for an array of Project (default
      view)
    example:
    - description: Ipsa soluta minus consequatur ullam sed magni.
      id: 3.675992e+18
      name: Blanditiis debitis eos iure ea.
      slug: jv73wy8mr3
    - description: Ipsa soluta minus consequatur ullam sed magni.
      id: 3.675992e+18
      name: Blanditiis debitis eos iure ea.
      slug: jv73wy8mr3
    items:
      $ref: '#/definitions/Project'
    title: 'Mediatype identifier: application/vnd.app.project+json; type=collection;
      view=default'
    type: array
  Projects:
    description: Projects media type (default view)
    example:
      projects:
      - description: Ipsa soluta minus consequatur ullam sed magni.
        id: 3.675992e+18
        name: Blanditiis debitis eos iure ea.
        slug: jv73wy8mr3
      - description: Ipsa soluta minus consequatur ullam sed magni.
        id: 3.675992e+18
        name: Blanditiis debitis eos iure ea.
        slug: jv73wy8mr3
    properties:
      projects:
        $ref: '#/definitions/ProjectCollection'
    required:
    - projects
    title: 'Mediatype identifier: application/vnd.app.projects+json; view=default'
    type: object
  RefreshUserPayload:
    example:
      refresh_token: Iste illo nobis eos asperiores non nam.
    properties:
      refresh_token:
        example: Iste illo nobis eos asperiores non nam.
        type: string
    required:
    - refresh_token
    title: RefreshUserPayload
    type: object
  Team:
    description: Team media type (default view)
    example:
      description: Dolores sit qui perspiciatis.
      id: 4.574803e+18
      name: ltfvtq833g
      slug: c87ez0kvi3
    properties:
      description:
        example: Dolores sit qui perspiciatis.
        type: string
      id:
        example: 4.574803e+18
        format: int64
        type: integer
      name:
        example: ltfvtq833g
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: c87ez0kvi3
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.team+json; view=default'
    type: object
  TeamCollection:
    description: TeamCollection is the media type for an array of Team (default view)
    example:
    - description: Dolores sit qui perspiciatis.
      id: 4.574803e+18
      name: ltfvtq833g
      slug: c87ez0kvi3
    items:
      $ref: '#/definitions/Team'
    title: 'Mediatype identifier: application/vnd.app.team+json; type=collection;
      view=default'
    type: array
  TeamMember:
    description: TeamMember media type (default view)
    example:
      role: Voluptas sed dolorum itaque qui sequi.
      teamId: 3.9228076e+18
      userId: 4.8803786e+18
    properties:
      role:
        example: Voluptas sed dolorum itaque qui sequi.
        type: string
      teamId:
        example: 3.9228076e+18
        format: int64
        type: integer
      userId:
        example: 4.8803786e+18
        format: int64
        type: integer
    required:
    - teamId
    - userId
    - role
    title: 'Mediatype identifier: application/vnd.app.member+json; view=default'
    type: object
  TeamMemberCollection:
    description: TeamMemberCollection is the media type for an array of TeamMember
      (default view)
    example:
    - role: Voluptas sed dolorum itaque qui sequi.
      teamId: 3.9228076e+18
      userId: 4.8803786e+18
    items:
      $ref: '#/definitions/TeamMember'
    title: 'Mediatype identifier: application/vnd.app.member+json; type=collection;
      view=default'
    type: array
  TeamMembers:
    description: TeamMembers media type (default view)
    example:
      members:
      - role: Voluptas sed dolorum itaque qui sequi.
        teamId: 3.9228076e+18
        userId: 4.8803786e+18
      - role: Voluptas sed dolorum itaque qui sequi.
        teamId: 3.9228076e+18
        userId: 4.8803786e+18
    properties:
      members:
        $ref: '#/definitions/TeamMemberCollection'
    required:
    - members
    title: 'Mediatype identifier: application/vnd.app.members+json; view=default'
    type: object
  Teams:
    description: Teams media type (default view)
    example:
      teams:
      - description: Dolores sit qui perspiciatis.
        id: 4.574803e+18
        name: ltfvtq833g
        slug: c87ez0kvi3
      - description: Dolores sit qui perspiciatis.
        id: 4.574803e+18
        name: ltfvtq833g
        slug: c87ez0kvi3
      - description: Dolores sit qui perspiciatis.
        id: 4.574803e+18
        name: ltfvtq833g
        slug: c87ez0kvi3
    properties:
      teams:
        $ref: '#/definitions/TeamCollection'
    required:
    - teams
    title: 'Mediatype identifier: application/vnd.app.teams+json; view=default'
    type: object
  TwitterAccountInput:
    description: TwitterAccountInput media type (default view)
    example:
      expeditionId: 2.4099368e+18
      id: 2.8585887e+18
      name: Dignissimos ea nobis in harum doloribus.
      screenName: Placeat amet illo reprehenderit quod provident dolorum.
      teamId: 6.943343e+18
      twitterAccountId: 1.3138473e+18
      userId: 6.7501333e+18
    properties:
      expeditionId:
        example: 2.4099368e+18
        format: int64
        type: integer
      id:
        example: 2.8585887e+18
        format: int64
        type: integer
      name:
        example: Dignissimos ea nobis in harum doloribus.
        type: string
      screenName:
        example: Placeat amet illo reprehenderit quod provident dolorum.
        type: string
      teamId:
        example: 6.943343e+18
        format: int64
        type: integer
      twitterAccountId:
        example: 1.3138473e+18
        format: int64
        type: integer
      userId:
        example: 6.7501333e+18
        format: int64
        type: integer
    required:
    - id
    - expeditionId
    - name
    - twitterAccountId
    - screenName
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      view=default'
    type: object
  TwitterAccountInputCollection:
    description: TwitterAccountInputCollection is the media type for an array of TwitterAccountInput
      (default view)
    example:
    - expeditionId: 2.4099368e+18
      id: 2.8585887e+18
      name: Dignissimos ea nobis in harum doloribus.
      screenName: Placeat amet illo reprehenderit quod provident dolorum.
      teamId: 6.943343e+18
      twitterAccountId: 1.3138473e+18
      userId: 6.7501333e+18
    items:
      $ref: '#/definitions/TwitterAccountInput'
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      type=collection; view=default'
    type: array
  TwitterAccountInputs:
    description: TwitterAccountInputs media type (default view)
    example:
      twitterAccountInputs:
      - expeditionId: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screenName: Placeat amet illo reprehenderit quod provident dolorum.
        teamId: 6.943343e+18
        twitterAccountId: 1.3138473e+18
        userId: 6.7501333e+18
    properties:
      twitterAccountInputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    required:
    - twitterAccountInputs
    title: 'Mediatype identifier: application/vnd.app.twitter_account_intputs+json;
      view=default'
    type: object
  UpdateDeviceInputLocationPayload:
    example:
      key: Hic aliquid animi sit sint doloremque.
      latitude: 0.32631305
      longitude: 0.79287654
    properties:
      key:
        example: Hic aliquid animi sit sint doloremque.
        type: string
      latitude:
        example: 0.32631305
        format: double
        type: number
      longitude:
        example: 0.79287654
        format: double
        type: number
    required:
    - key
    - longitude
    - latitude
    title: UpdateDeviceInputLocationPayload
    type: object
  UpdateDeviceInputPayload:
    example:
      key: Quidem sed tempora vel expedita impedit.
      name: Incidunt illo voluptatem.
    properties:
      key:
        example: Quidem sed tempora vel expedita impedit.
        type: string
      name:
        example: Incidunt illo voluptatem.
        type: string
    required:
    - name
    - key
    title: UpdateDeviceInputPayload
    type: object
  UpdateDeviceInputSchemaPayload:
    example:
      active: false
      jsonSchema: Maxime consequatur ut.
      key: Aperiam perferendis veritatis dolore eius iusto.
    properties:
      active:
        example: false
        type: boolean
      jsonSchema:
        example: Maxime consequatur ut.
        type: string
      key:
        example: Aperiam perferendis veritatis dolore eius iusto.
        type: string
    required:
    - key
    - active
    - jsonSchema
    title: UpdateDeviceInputSchemaPayload
    type: object
  UpdateInputPayload:
    example:
      active: true
      name: Velit unde.
      teamId: 7.6975253e+18
      userId: 6.3603015e+18
    properties:
      active:
        example: true
        type: boolean
      name:
        example: Velit unde.
        type: string
      teamId:
        example: 7.6975253e+18
        format: int64
        type: integer
      userId:
        example: 6.3603015e+18
        format: int64
        type: integer
    required:
    - name
    title: UpdateInputPayload
    type: object
  UpdateMemberPayload:
    example:
      role: Et praesentium.
    properties:
      role:
        example: Et praesentium.
        type: string
    required:
    - role
    title: UpdateMemberPayload
    type: object
  UpdateUserPayload:
    example:
      bio: Sunt commodi consequatur qui.
      email: joelle@friesen.info
      name: vcbmmrted8
      username: ycrrcazxi7
    properties:
      bio:
        example: Sunt commodi consequatur qui.
        type: string
      email:
        example: joelle@friesen.info
        format: email
        type: string
      name:
        example: vcbmmrted8
        maxLength: 256
        pattern: \S
        type: string
      username:
        description: Username
        example: ycrrcazxi7
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - name
    - email
    - username
    - bio
    title: UpdateUserPayload
    type: object
  User:
    description: User media type (default view)
    example:
      bio: Rem sint velit ad laboriosam voluptatem explicabo.
      email: ulices@schillerauer.name
      id: 3.2672563e+18
      name: x3fovu72r0
      username: h0spvjjveb
    properties:
      bio:
        example: Rem sint velit ad laboriosam voluptatem explicabo.
        type: string
      email:
        example: ulices@schillerauer.name
        format: email
        type: string
      id:
        example: 3.2672563e+18
        format: int64
        type: integer
      name:
        example: x3fovu72r0
        maxLength: 256
        pattern: \S
        type: string
      username:
        description: Username
        example: h0spvjjveb
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - id
    - name
    - username
    - email
    - bio
    title: 'Mediatype identifier: application/vnd.app.user+json; view=default'
    type: object
  UserCollection:
    description: UserCollection is the media type for an array of User (default view)
    example:
    - bio: Rem sint velit ad laboriosam voluptatem explicabo.
      email: ulices@schillerauer.name
      id: 3.2672563e+18
      name: x3fovu72r0
      username: h0spvjjveb
    items:
      $ref: '#/definitions/User'
    title: 'Mediatype identifier: application/vnd.app.user+json; type=collection;
      view=default'
    type: array
  Users:
    description: Users media type (default view)
    example:
      users:
      - bio: Rem sint velit ad laboriosam voluptatem explicabo.
        email: ulices@schillerauer.name
        id: 3.2672563e+18
        name: x3fovu72r0
        username: h0spvjjveb
    properties:
      users:
        $ref: '#/definitions/UserCollection'
    required:
    - users
    title: 'Mediatype identifier: application/vnd.app.users+json; view=default'
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: api.fieldkit.org:8080
info:
  description: A one-click open platform for field researchers and explorers.
  title: Fieldkit API
  version: ""
paths:
  /expeditions/{expeditionId}:
    get:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#get id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id expedition
      tags:
      - expedition
    patch:
      description: |-
        Update an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#update
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update expedition
      tags:
      - expedition
  /expeditions/{expeditionId}/input-tokens:
    get:
      description: |-
        Update an expedition's input tokens

        Required security scopes:
          * `api:access`
      operationId: input_token#list id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.input_tokens+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputTokens'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id input_token
      tags:
      - input_token
    post:
      description: |-
        Add an input token

        Required security scopes:
          * `api:access`
      operationId: input_token#add
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.input_token+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputToken'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add input_token
      tags:
      - input_token
  /expeditions/{expeditionId}/inputs:
    get:
      description: |-
        List an expedition's inputs

        Required security scopes:
          * `api:access`
      operationId: input#list expedition id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list expedition id input
      tags:
      - input
  /expeditions/{expeditionId}/inputs/devices:
    post:
      description: |-
        Add a Device input

        Required security scopes:
          * `api:access`
      operationId: device#add
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddDeviceInputPayload'
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add device
      tags:
      - device
  /expeditions/{expeditionId}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id twitter
      tags:
      - twitter
    post:
      description: |-
        Add a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#add
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTwitterAccountInputPayload'
      produces:
      - application/vnd.app.location+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Location'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add twitter
      tags:
      - twitter
  /expeditions/{expeditionId}/picture:
    get:
      description: Get a expedition's picture
      operationId: picture#expedition get id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: expedition get id picture
      tags:
      - picture
  /expeditions/{expeditionId}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list id
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id team
      tags:
      - team
    post:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#add
      parameters:
      - in: path
        name: expeditionId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add team
      tags:
      - team
  /features/{featureId}/geojson:
    get:
      description: List a feature's GeoJSON by id.
      operationId: GeoJSON#list by id
      parameters:
      - in: path
        name: featureId
        required: true
        type: integer
      produces:
      - application/vnd.app.paged-geojson+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PagedGeoJSON'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list by id GeoJSON
      tags:
      - GeoJSON
  /input-tokens/{inputTokenId}:
    delete:
      description: |-
        Delete an input token

        Required security scopes:
          * `api:access`
      operationId: input_token#delete
      parameters:
      - in: path
        name: inputTokenId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete input_token
      tags:
      - input_token
  /inputs/{inputId}:
    get:
      description: List an input
      operationId: input#list id
      parameters:
      - in: path
        name: inputId
        required: true
        type: integer
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list id input
      tags:
      - input
    patch:
      description: |-
        Update an input

        Required security scopes:
          * `api:access`
      operationId: input#update
      parameters:
      - in: path
        name: inputId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateInputPayload'
      produces:
      - application/vnd.app.input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Input'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update input
      tags:
      - input
  /inputs/{inputId}/geojson:
    get:
      description: List an input's features in a GeoJSON.
      operationId: GeoJSON#list by input
      parameters:
      - in: query
        name: descending
        required: false
        type: boolean
      - in: path
        name: inputId
        required: true
        type: integer
      produces:
      - application/vnd.app.paged-geojson+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PagedGeoJSON'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list by input GeoJSON
      tags:
      - GeoJSON
  /inputs/devices/{id}:
    get:
      description: |-
        Get a Device input

        Required security scopes:
          * `api:access`
      operationId: device#get id
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id device
      tags:
      - device
    patch:
      description: |-
        Update an Device input

        Required security scopes:
          * `api:access`
      operationId: device#update
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceInputPayload'
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update device
      tags:
      - device
  /inputs/devices/{id}/location:
    patch:
      description: |-
        Update an Device input location

        Required security scopes:
          * `api:access`
      operationId: device#update location
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceInputLocationPayload'
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update location device
      tags:
      - device
  /inputs/devices/{id}/schemas:
    patch:
      description: |-
        Update an Device input schema

        Required security scopes:
          * `api:access`
      operationId: device#update schema
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceInputSchemaPayload'
      produces:
      - application/vnd.app.device_schemas+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceSchemas'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update schema device
      tags:
      - device
  /inputs/twitter-accounts/{inputId}:
    get:
      description: |-
        Get a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#get id
      parameters:
      - in: path
        name: inputId
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id twitter
      tags:
      - twitter
  /login:
    post:
      description: Creates a valid JWT given login credentials.
      operationId: user#login
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: login user
      tags:
      - user
  /logout:
    post:
      description: |-
        Creates a valid JWT given login credentials.

        Required security scopes:
          * `api:access`
      operationId: user#logout
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: logout user
      tags:
      - user
  /projects:
    get:
      description: |-
        List projects

        Required security scopes:
          * `api:access`
      operationId: project#list
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list project
      tags:
      - project
    post:
      description: |-
        Add a project

        Required security scopes:
          * `api:access`
      operationId: project#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add project
      tags:
      - project
  /projects/@/{project}:
    get:
      description: Get a project
      operationId: project#get
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get project
      tags:
      - project
  /projects/@/{project}/administrators:
    get:
      description: |-
        List an project's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list administrator
      tags:
      - administrator
  /projects/@/{project}/administrators/@/{username}:
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Username
        in: path
        maxLength: 40
        name: username
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get administrator
      tags:
      - administrator
  /projects/@/{project}/expeditions:
    get:
      description: List a project's expeditions
      operationId: expedition#list
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}:
    get:
      description: Add an expedition
      operationId: expedition#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}/geojson:
    get:
      description: List a expedition's features in a GeoJSON.
      operationId: GeoJSON#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.paged-geojson+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PagedGeoJSON'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list GeoJSON
      tags:
      - GeoJSON
  /projects/@/{project}/expeditions/@/{expedition}/input-tokens:
    get:
      description: |-
        List an expedition's input tokens

        Required security scopes:
          * `api:access`
      operationId: input_token#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.input_tokens+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputTokens'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list input_token
      tags:
      - input_token
  /projects/@/{project}/expeditions/@/{expedition}/inputs:
    get:
      description: List a project's inputs
      operationId: input#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list input
      tags:
      - input
  /projects/@/{project}/expeditions/@/{expedition}/inputs/devices:
    get:
      description: |-
        List an expedition's Device inputs

        Required security scopes:
          * `api:access`
      operationId: device#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.device_inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list device
      tags:
      - device
  /projects/@/{project}/expeditions/@/{expedition}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list twitter
      tags:
      - twitter
  /projects/@/{project}/expeditions/@/{expedition}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}:
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members:
    get:
      description: |-
        List an team's members

        Required security scopes:
          * `api:access`
      operationId: member#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list member
      tags:
      - member
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members/@/{username}:
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Username
        in: path
        maxLength: 40
        name: username
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get member
      tags:
      - member
  /projects/{projectId}:
    get:
      description: |-
        Get a project

        Required security scopes:
          * `api:access`
      operationId: project#get id
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id project
      tags:
      - project
    patch:
      description: |-
        Update a project

        Required security scopes:
          * `api:access`
      operationId: project#update
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update project
      tags:
      - project
  /projects/{projectId}/administrators:
    get:
      description: |-
        List an projects's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list id
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id administrator
      tags:
      - administrator
    post:
      description: |-
        Add an administrator to a project

        Required security scopes:
          * `api:access`
      operationId: administrator#add
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddAdministratorPayload'
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add administrator
      tags:
      - administrator
  /projects/{projectId}/administrators/{userId}:
    delete:
      description: |-
        Remove an administrator from a project

        Required security scopes:
          * `api:access`
      operationId: administrator#delete
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete administrator
      tags:
      - administrator
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get id
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id administrator
      tags:
      - administrator
  /projects/{projectId}/expeditions:
    get:
      description: |-
        List a project's expeditions

        Required security scopes:
          * `api:access`
      operationId: expedition#list id
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id expedition
      tags:
      - expedition
    post:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#add
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add expedition
      tags:
      - expedition
  /projects/{projectId}/picture:
    get:
      description: Get a project's picture
      operationId: picture#project get id
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: project get id picture
      tags:
      - picture
  /refresh:
    post:
      description: Creates a valid JWT given a refresh token.
      operationId: user#refresh
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/RefreshUserPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: refresh user
      tags:
      - user
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.json
  /swagger.yaml:
    get:
      operationId: swagger#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.yaml
  /teams/{teamId}:
    delete:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#delete
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete team
      tags:
      - team
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get id
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id team
      tags:
      - team
    patch:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#update
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update team
      tags:
      - team
  /teams/{teamId}/members:
    get:
      description: |-
        List an teams's members

        Required security scopes:
          * `api:access`
      operationId: member#list id
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id member
      tags:
      - member
    post:
      description: |-
        Add a member to a team

        Required security scopes:
          * `api:access`
      operationId: member#add
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add member
      tags:
      - member
  /teams/{teamId}/members/{userId}:
    delete:
      description: |-
        Remove a member from a team

        Required security scopes:
          * `api:access`
      operationId: member#delete
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete member
      tags:
      - member
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get id
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id member
      tags:
      - member
    patch:
      description: |-
        Update a member

        Required security scopes:
          * `api:access`
      operationId: member#update
      parameters:
      - in: path
        name: teamId
        required: true
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update member
      tags:
      - member
  /twitter/callback:
    get:
      description: OAuth callback endpoint for Twitter
      operationId: twitter#callback
      parameters:
      - in: query
        name: oauthToken
        required: true
        type: string
      - in: query
        name: oauthVerifier
        required: false
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "400":
          description: Bad Request
      schemes:
      - https
      summary: callback twitter
      tags:
      - twitter
  /user:
    get:
      description: |-
        Get the authenticated user

        Required security scopes:
          * `api:access`
      operationId: user#get current
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get current user
      tags:
      - user
  /user/projects:
    get:
      description: |-
        List the authenticated user's projects

        Required security scopes:
          * `api:access`
      operationId: project#list current
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list current project
      tags:
      - project
  /users:
    get:
      description: |-
        List users

        Required security scopes:
          * `api:access`
      operationId: user#list
      produces:
      - application/vnd.app.users+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list user
      tags:
      - user
    post:
      description: Add a user
      operationId: user#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: add user
      tags:
      - user
  /users/@/{username}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get
      parameters:
      - in: path
        name: username
        required: true
        type: string
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get user
      tags:
      - user
  /users/{userId}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get id
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id user
      tags:
      - user
    patch:
      description: |-
        Update a user

        Required security scopes:
          * `api:access`
      operationId: user#update
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update user
      tags:
      - user
  /users/{userId}/picture:
    get:
      description: Get a user's picture
      operationId: picture#user get id
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: user get id picture
      tags:
      - picture
  /validate:
    get:
      description: Validate a user's email address.
      operationId: user#validate
      parameters:
      - in: query
        name: token
        required: true
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: validate user
      tags:
      - user
produces:
- application/json
responses:
  BadRequest:
    description: Bad Request
  NoContent:
    description: No Content
  Unauthorized:
    description: Unauthorized
schemes:
- https
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
