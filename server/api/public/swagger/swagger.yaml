consumes:
- application/json
definitions:
  AddAdministratorPayload:
    example:
      user_id: 6.3747106e+18
    properties:
      user_id:
        example: 6.3747106e+18
        format: int64
        type: integer
    required:
    - user_id
    title: AddAdministratorPayload
    type: object
  AddDeviceInputPayload:
    example:
      key: Ipsa rerum.
      name: Sed dolorem.
    properties:
      key:
        example: Ipsa rerum.
        type: string
      name:
        example: Sed dolorem.
        type: string
    required:
    - name
    - key
    title: AddDeviceInputPayload
    type: object
  AddExpeditionPayload:
    example:
      description: Maxime consequatur ut.
      name: Aperiam perferendis veritatis dolore eius iusto.
      slug: 8qkueb63hu
    properties:
      description:
        example: Maxime consequatur ut.
        type: string
      name:
        example: Aperiam perferendis veritatis dolore eius iusto.
        type: string
      slug:
        example: 8qkueb63hu
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddExpeditionPayload
    type: object
  AddMemberPayload:
    example:
      role: Necessitatibus non veritatis velit.
      user_id: 2.9741548e+18
    properties:
      role:
        example: Necessitatibus non veritatis velit.
        type: string
      user_id:
        example: 2.9741548e+18
        format: int64
        type: integer
    required:
    - user_id
    - role
    title: AddMemberPayload
    type: object
  AddProjectPayload:
    example:
      description: Tempora cumque sed voluptatem.
      name: Et praesentium.
      slug: rbwtu6d712
    properties:
      description:
        example: Tempora cumque sed voluptatem.
        type: string
      name:
        example: Et praesentium.
        type: string
      slug:
        example: rbwtu6d712
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddProjectPayload
    type: object
  AddTeamPayload:
    example:
      description: Eos animi quisquam amet non vero.
      name: ftx2igp59z
      slug: liv0uepd16
    properties:
      description:
        example: Eos animi quisquam amet non vero.
        type: string
      name:
        example: ftx2igp59z
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: liv0uepd16
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - name
    - slug
    - description
    title: AddTeamPayload
    type: object
  AddTwitterAccountInputPayload:
    example:
      name: Occaecati iure repudiandae eaque.
    properties:
      name:
        example: Occaecati iure repudiandae eaque.
        type: string
    required:
    - name
    title: AddTwitterAccountInputPayload
    type: object
  AddUserPayload:
    example:
      bio: Voluptatum odit eum qui magnam minima cupiditate.
      email: makenzie.brown@hirthe.name
      invite_token: Repellat autem ut unde.
      name: nik2mv0074
      password: 47q76xcws9
      username: mohafdiw07
    properties:
      bio:
        example: Voluptatum odit eum qui magnam minima cupiditate.
        type: string
      email:
        example: makenzie.brown@hirthe.name
        format: email
        type: string
      invite_token:
        example: Repellat autem ut unde.
        type: string
      name:
        example: nik2mv0074
        maxLength: 256
        pattern: \S
        type: string
      password:
        example: 47q76xcws9
        minLength: 10
        type: string
      username:
        description: Username
        example: mohafdiw07
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - name
    - email
    - username
    - password
    - bio
    - invite_token
    title: AddUserPayload
    type: object
  DeviceInput:
    description: DeviceInput media type (default view)
    example:
      active: false
      expedition_id: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Facilis quis blanditiis recusandae est.
      team_id: 4.0004988e+18
      token: Vel est.
      user_id: 7.8603976e+18
    properties:
      active:
        example: false
        type: boolean
      expedition_id:
        example: 5.794513e+18
        format: int64
        type: integer
      id:
        example: 8.930515e+18
        format: int64
        type: integer
      key:
        example: Quaerat in qui.
        type: string
      name:
        example: Facilis quis blanditiis recusandae est.
        type: string
      team_id:
        example: 4.0004988e+18
        format: int64
        type: integer
      token:
        example: Vel est.
        type: string
      user_id:
        example: 7.8603976e+18
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - active
    - name
    - token
    - key
    title: 'Mediatype identifier: application/vnd.app.device_input+json; view=default'
    type: object
  DeviceInputCollection:
    description: DeviceInputCollection is the media type for an array of DeviceInput
      (default view)
    example:
    - active: false
      expedition_id: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Facilis quis blanditiis recusandae est.
      team_id: 4.0004988e+18
      token: Vel est.
      user_id: 7.8603976e+18
    - active: false
      expedition_id: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Facilis quis blanditiis recusandae est.
      team_id: 4.0004988e+18
      token: Vel est.
      user_id: 7.8603976e+18
    - active: false
      expedition_id: 5.794513e+18
      id: 8.930515e+18
      key: Quaerat in qui.
      name: Facilis quis blanditiis recusandae est.
      team_id: 4.0004988e+18
      token: Vel est.
      user_id: 7.8603976e+18
    items:
      $ref: '#/definitions/DeviceInput'
    title: 'Mediatype identifier: application/vnd.app.device_input+json; type=collection;
      view=default'
    type: array
  DeviceInputs:
    description: DeviceInputs media type (default view)
    example:
      device_inputs:
      - active: false
        expedition_id: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Facilis quis blanditiis recusandae est.
        team_id: 4.0004988e+18
        token: Vel est.
        user_id: 7.8603976e+18
    properties:
      device_inputs:
        $ref: '#/definitions/DeviceInputCollection'
    required:
    - device_inputs
    title: 'Mediatype identifier: application/vnd.app.device_inputs+json; view=default'
    type: object
  DeviceSchema:
    description: DeviceSchema media type (default view)
    example:
      active: true
      device_id: 6.682842e+18
      json_schema: Rerum cumque.
      key: Sit labore dolorem vel laboriosam aut.
      project_id: 2.4394763e+18
      schema_id: 2.2726114e+18
    properties:
      active:
        example: true
        type: boolean
      device_id:
        example: 6.682842e+18
        format: int64
        type: integer
      json_schema:
        example: Rerum cumque.
        type: string
      key:
        example: Sit labore dolorem vel laboriosam aut.
        type: string
      project_id:
        example: 2.4394763e+18
        format: int64
        type: integer
      schema_id:
        example: 2.2726114e+18
        format: int64
        type: integer
    required:
    - device_id
    - schema_id
    - project_id
    - active
    - json_schema
    - key
    title: 'Mediatype identifier: application/vnd.app.device_schema+json; view=default'
    type: object
  DeviceSchemaCollection:
    description: DeviceSchemaCollection is the media type for an array of DeviceSchema
      (default view)
    example:
    - active: true
      device_id: 6.682842e+18
      json_schema: Rerum cumque.
      key: Sit labore dolorem vel laboriosam aut.
      project_id: 2.4394763e+18
      schema_id: 2.2726114e+18
    items:
      $ref: '#/definitions/DeviceSchema'
    title: 'Mediatype identifier: application/vnd.app.device_schema+json; type=collection;
      view=default'
    type: array
  DeviceSchemas:
    description: DeviceSchemas media type (default view)
    example:
      schemas:
      - active: true
        device_id: 6.682842e+18
        json_schema: Rerum cumque.
        key: Sit labore dolorem vel laboriosam aut.
        project_id: 2.4394763e+18
        schema_id: 2.2726114e+18
      - active: true
        device_id: 6.682842e+18
        json_schema: Rerum cumque.
        key: Sit labore dolorem vel laboriosam aut.
        project_id: 2.4394763e+18
        schema_id: 2.2726114e+18
    properties:
      schemas:
        $ref: '#/definitions/DeviceSchemaCollection'
    required:
    - schemas
    title: 'Mediatype identifier: application/vnd.app.device_schemas+json; view=default'
    type: object
  Expedition:
    description: Expedition media type (default view)
    example:
      description: Incidunt consequuntur fugit non ut.
      id: 7.202539e+18
      name: Perspiciatis quasi error voluptatem et.
      slug: mrhxwu5kh0
    properties:
      description:
        example: Incidunt consequuntur fugit non ut.
        type: string
      id:
        example: 7.202539e+18
        format: int64
        type: integer
      name:
        example: Perspiciatis quasi error voluptatem et.
        type: string
      slug:
        example: mrhxwu5kh0
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.expedition+json; view=default'
    type: object
  ExpeditionCollection:
    description: ExpeditionCollection is the media type for an array of Expedition
      (default view)
    example:
    - description: Incidunt consequuntur fugit non ut.
      id: 7.202539e+18
      name: Perspiciatis quasi error voluptatem et.
      slug: mrhxwu5kh0
    - description: Incidunt consequuntur fugit non ut.
      id: 7.202539e+18
      name: Perspiciatis quasi error voluptatem et.
      slug: mrhxwu5kh0
    - description: Incidunt consequuntur fugit non ut.
      id: 7.202539e+18
      name: Perspiciatis quasi error voluptatem et.
      slug: mrhxwu5kh0
    items:
      $ref: '#/definitions/Expedition'
    title: 'Mediatype identifier: application/vnd.app.expedition+json; type=collection;
      view=default'
    type: array
  Expeditions:
    description: Expeditions media type (default view)
    example:
      expeditions:
      - description: Incidunt consequuntur fugit non ut.
        id: 7.202539e+18
        name: Perspiciatis quasi error voluptatem et.
        slug: mrhxwu5kh0
    properties:
      expeditions:
        $ref: '#/definitions/ExpeditionCollection'
    required:
    - expeditions
    title: 'Mediatype identifier: application/vnd.app.expeditions+json; view=default'
    type: object
  GeoJSON:
    description: GeoJSON media type (default view)
    example:
      features:
      - geometry:
          coordinates:
          - 0.860823
          - 0.860823
          type: Sit velit quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      - geometry:
          coordinates:
          - 0.860823
          - 0.860823
          type: Sit velit quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      - geometry:
          coordinates:
          - 0.860823
          - 0.860823
          type: Sit velit quo eveniet in.
        properties:
          Sit ratione aut et.: 3.0362945e+18
        type: Odit sapiente.
      type: Expedita qui eum.
    properties:
      features:
        $ref: '#/definitions/GeoJSONFeatureCollection'
      type:
        example: Expedita qui eum.
        type: string
    required:
    - type
    - features
    title: 'Mediatype identifier: application/vnd.app.geojson+json; view=default'
    type: object
  GeoJSONFeature:
    description: GeoJSONFeature media type (default view)
    example:
      geometry:
        coordinates:
        - 0.860823
        - 0.860823
        type: Sit velit quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    properties:
      geometry:
        $ref: '#/definitions/GeoJSONGeometry'
      properties:
        additionalProperties: true
        example:
          Sit ratione aut et.: 3.0362945e+18
        type: object
      type:
        example: Odit sapiente.
        type: string
    required:
    - type
    - geometry
    - properties
    title: 'Mediatype identifier: application/vnd.app.geojson-feature+json; view=default'
    type: object
  GeoJSONFeatureCollection:
    description: GeoJSONFeatureCollection is the media type for an array of GeoJSONFeature
      (default view)
    example:
    - geometry:
        coordinates:
        - 0.860823
        - 0.860823
        type: Sit velit quo eveniet in.
      properties:
        Sit ratione aut et.: 3.0362945e+18
      type: Odit sapiente.
    items:
      $ref: '#/definitions/GeoJSONFeature'
    title: 'Mediatype identifier: application/vnd.app.geojson-feature+json; type=collection;
      view=default'
    type: array
  GeoJSONGeometry:
    description: GeoJSONGeometry media type (default view)
    example:
      coordinates:
      - 0.860823
      - 0.860823
      type: Sit velit quo eveniet in.
    properties:
      coordinates:
        example:
        - 0.860823
        - 0.860823
        items:
          example: 0.860823
          format: double
          type: number
        type: array
      type:
        example: Sit velit quo eveniet in.
        type: string
    required:
    - type
    - coordinates
    title: 'Mediatype identifier: application/vnd.app.geojson-geometry+json; view=default'
    type: object
  Input:
    description: Input media type (default view)
    example:
      active: false
      expedition_id: 5.1553956e+18
      id: 3.8114873e+18
      name: Dolore laboriosam soluta quia molestias.
      team_id: 3.7761713e+18
      user_id: 4.7540266e+18
    properties:
      active:
        example: false
        type: boolean
      expedition_id:
        example: 5.1553956e+18
        format: int64
        type: integer
      id:
        example: 3.8114873e+18
        format: int64
        type: integer
      name:
        example: Dolore laboriosam soluta quia molestias.
        type: string
      team_id:
        example: 3.7761713e+18
        format: int64
        type: integer
      user_id:
        example: 4.7540266e+18
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - name
    title: 'Mediatype identifier: application/vnd.app.input+json; view=default'
    type: object
  InputToken:
    description: InputToken media type (default view)
    example:
      expedition_id: 4.977542e+18
      id: 7.839764e+18
      token: Reprehenderit totam dolorem impedit hic.
    properties:
      expedition_id:
        example: 4.977542e+18
        format: int64
        type: integer
      id:
        example: 7.839764e+18
        format: int64
        type: integer
      token:
        example: Reprehenderit totam dolorem impedit hic.
        type: string
    required:
    - id
    - token
    - expedition_id
    title: 'Mediatype identifier: application/vnd.app.input_token+json; view=default'
    type: object
  InputTokenCollection:
    description: InputTokenCollection is the media type for an array of InputToken
      (default view)
    example:
    - expedition_id: 4.977542e+18
      id: 7.839764e+18
      token: Reprehenderit totam dolorem impedit hic.
    - expedition_id: 4.977542e+18
      id: 7.839764e+18
      token: Reprehenderit totam dolorem impedit hic.
    items:
      $ref: '#/definitions/InputToken'
    title: 'Mediatype identifier: application/vnd.app.input_token+json; type=collection;
      view=default'
    type: array
  InputTokens:
    description: InputTokens media type (default view)
    example:
      input_tokens:
      - expedition_id: 4.977542e+18
        id: 7.839764e+18
        token: Reprehenderit totam dolorem impedit hic.
    properties:
      input_tokens:
        $ref: '#/definitions/InputTokenCollection'
    required:
    - input_tokens
    title: 'Mediatype identifier: application/vnd.app.input_tokens+json; view=default'
    type: object
  Inputs:
    description: Inputs media type (default view)
    example:
      device_inputs:
      - active: false
        expedition_id: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Facilis quis blanditiis recusandae est.
        team_id: 4.0004988e+18
        token: Vel est.
        user_id: 7.8603976e+18
      - active: false
        expedition_id: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Facilis quis blanditiis recusandae est.
        team_id: 4.0004988e+18
        token: Vel est.
        user_id: 7.8603976e+18
      - active: false
        expedition_id: 5.794513e+18
        id: 8.930515e+18
        key: Quaerat in qui.
        name: Facilis quis blanditiis recusandae est.
        team_id: 4.0004988e+18
        token: Vel est.
        user_id: 7.8603976e+18
      twitter_account_inputs:
      - expedition_id: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screen_name: Placeat amet illo reprehenderit quod provident dolorum.
        team_id: 6.943343e+18
        twitter_account_id: 1.3138473e+18
        user_id: 6.7501333e+18
    properties:
      device_inputs:
        $ref: '#/definitions/DeviceInputCollection'
      twitter_account_inputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    title: 'Mediatype identifier: application/vnd.app.inputs+json; view=default'
    type: object
  Location:
    description: Location media type (default view)
    example:
      location: http://lebsacksanford.biz/samanta.cummerata
    properties:
      location:
        example: http://lebsacksanford.biz/samanta.cummerata
        format: uri
        type: string
    required:
    - location
    title: 'Mediatype identifier: application/vnd.app.location+json; view=default'
    type: object
  LoginPayload:
    example:
      password: s4wt5o8fcm
      username: dpz83ljd52
    properties:
      password:
        example: s4wt5o8fcm
        minLength: 10
        type: string
      username:
        description: Username
        example: dpz83ljd52
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - username
    - password
    title: LoginPayload
    type: object
  PagedGeoJSON:
    description: PagedGeoJSON media type (default view)
    example:
      geo:
        features:
        - geometry:
            coordinates:
            - 0.860823
            - 0.860823
            type: Sit velit quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        - geometry:
            coordinates:
            - 0.860823
            - 0.860823
            type: Sit velit quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        - geometry:
            coordinates:
            - 0.860823
            - 0.860823
            type: Sit velit quo eveniet in.
          properties:
            Sit ratione aut et.: 3.0362945e+18
          type: Odit sapiente.
        type: Expedita qui eum.
      hasMore: true
      nextUrl: Dignissimos voluptatem consequatur nihil.
      previousUrl: Corrupti voluptates beatae.
    properties:
      geo:
        $ref: '#/definitions/GeoJSON'
      hasMore:
        example: true
        type: boolean
      nextUrl:
        example: Dignissimos voluptatem consequatur nihil.
        type: string
      previousUrl:
        example: Corrupti voluptates beatae.
        type: string
    required:
    - nextUrl
    - geo
    - hasMore
    title: 'Mediatype identifier: application/vnd.app.paged-geojson+json; view=default'
    type: object
  Project:
    description: Project media type (default view)
    example:
      description: Ipsa soluta minus consequatur ullam sed magni.
      id: 3.675992e+18
      name: Blanditiis debitis eos iure ea.
      slug: jv73wy8mr3
    properties:
      description:
        example: Ipsa soluta minus consequatur ullam sed magni.
        type: string
      id:
        example: 3.675992e+18
        format: int64
        type: integer
      name:
        example: Blanditiis debitis eos iure ea.
        type: string
      slug:
        example: jv73wy8mr3
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.project+json; view=default'
    type: object
  ProjectAdministrator:
    description: ProjectAdministrator media type (default view)
    example:
      project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    properties:
      project_id:
        example: 1.2833427e+18
        format: int64
        type: integer
      user_id:
        example: 6.2970576e+18
        format: int64
        type: integer
    required:
    - project_id
    - user_id
    title: 'Mediatype identifier: application/vnd.app.administrator+json; view=default'
    type: object
  ProjectAdministratorCollection:
    description: ProjectAdministratorCollection is the media type for an array of
      ProjectAdministrator (default view)
    example:
    - project_id: 1.2833427e+18
      user_id: 6.2970576e+18
    items:
      $ref: '#/definitions/ProjectAdministrator'
    title: 'Mediatype identifier: application/vnd.app.administrator+json; type=collection;
      view=default'
    type: array
  ProjectAdministrators:
    description: ProjectAdministrators media type (default view)
    example:
      administrators:
      - project_id: 1.2833427e+18
        user_id: 6.2970576e+18
      - project_id: 1.2833427e+18
        user_id: 6.2970576e+18
    properties:
      administrators:
        $ref: '#/definitions/ProjectAdministratorCollection'
    required:
    - administrators
    title: 'Mediatype identifier: application/vnd.app.administrators+json; view=default'
    type: object
  ProjectCollection:
    description: ProjectCollection is the media type for an array of Project (default
      view)
    example:
    - description: Ipsa soluta minus consequatur ullam sed magni.
      id: 3.675992e+18
      name: Blanditiis debitis eos iure ea.
      slug: jv73wy8mr3
    items:
      $ref: '#/definitions/Project'
    title: 'Mediatype identifier: application/vnd.app.project+json; type=collection;
      view=default'
    type: array
  Projects:
    description: Projects media type (default view)
    example:
      projects:
      - description: Ipsa soluta minus consequatur ullam sed magni.
        id: 3.675992e+18
        name: Blanditiis debitis eos iure ea.
        slug: jv73wy8mr3
      - description: Ipsa soluta minus consequatur ullam sed magni.
        id: 3.675992e+18
        name: Blanditiis debitis eos iure ea.
        slug: jv73wy8mr3
    properties:
      projects:
        $ref: '#/definitions/ProjectCollection'
    required:
    - projects
    title: 'Mediatype identifier: application/vnd.app.projects+json; view=default'
    type: object
  RefreshUserPayload:
    example:
      refresh_token: Non aut rem.
    properties:
      refresh_token:
        example: Non aut rem.
        type: string
    required:
    - refresh_token
    title: RefreshUserPayload
    type: object
  Team:
    description: Team media type (default view)
    example:
      description: Dolores sit qui perspiciatis.
      id: 4.574803e+18
      name: ltfvtq833g
      slug: c87ez0kvi3
    properties:
      description:
        example: Dolores sit qui perspiciatis.
        type: string
      id:
        example: 4.574803e+18
        format: int64
        type: integer
      name:
        example: ltfvtq833g
        maxLength: 256
        pattern: \S
        type: string
      slug:
        example: c87ez0kvi3
        maxLength: 40
        pattern: ^[[:alnum:]]+(-[[:alnum:]]+)*$
        type: string
    required:
    - id
    - name
    - slug
    - description
    title: 'Mediatype identifier: application/vnd.app.team+json; view=default'
    type: object
  TeamCollection:
    description: TeamCollection is the media type for an array of Team (default view)
    example:
    - description: Dolores sit qui perspiciatis.
      id: 4.574803e+18
      name: ltfvtq833g
      slug: c87ez0kvi3
    - description: Dolores sit qui perspiciatis.
      id: 4.574803e+18
      name: ltfvtq833g
      slug: c87ez0kvi3
    items:
      $ref: '#/definitions/Team'
    title: 'Mediatype identifier: application/vnd.app.team+json; type=collection;
      view=default'
    type: array
  TeamMember:
    description: TeamMember media type (default view)
    example:
      role: Voluptas sed dolorum itaque qui sequi.
      team_id: 3.9228076e+18
      user_id: 4.8803786e+18
    properties:
      role:
        example: Voluptas sed dolorum itaque qui sequi.
        type: string
      team_id:
        example: 3.9228076e+18
        format: int64
        type: integer
      user_id:
        example: 4.8803786e+18
        format: int64
        type: integer
    required:
    - team_id
    - user_id
    - role
    title: 'Mediatype identifier: application/vnd.app.member+json; view=default'
    type: object
  TeamMemberCollection:
    description: TeamMemberCollection is the media type for an array of TeamMember
      (default view)
    example:
    - role: Voluptas sed dolorum itaque qui sequi.
      team_id: 3.9228076e+18
      user_id: 4.8803786e+18
    - role: Voluptas sed dolorum itaque qui sequi.
      team_id: 3.9228076e+18
      user_id: 4.8803786e+18
    - role: Voluptas sed dolorum itaque qui sequi.
      team_id: 3.9228076e+18
      user_id: 4.8803786e+18
    items:
      $ref: '#/definitions/TeamMember'
    title: 'Mediatype identifier: application/vnd.app.member+json; type=collection;
      view=default'
    type: array
  TeamMembers:
    description: TeamMembers media type (default view)
    example:
      members:
      - role: Voluptas sed dolorum itaque qui sequi.
        team_id: 3.9228076e+18
        user_id: 4.8803786e+18
      - role: Voluptas sed dolorum itaque qui sequi.
        team_id: 3.9228076e+18
        user_id: 4.8803786e+18
    properties:
      members:
        $ref: '#/definitions/TeamMemberCollection'
    required:
    - members
    title: 'Mediatype identifier: application/vnd.app.members+json; view=default'
    type: object
  Teams:
    description: Teams media type (default view)
    example:
      teams:
      - description: Dolores sit qui perspiciatis.
        id: 4.574803e+18
        name: ltfvtq833g
        slug: c87ez0kvi3
    properties:
      teams:
        $ref: '#/definitions/TeamCollection'
    required:
    - teams
    title: 'Mediatype identifier: application/vnd.app.teams+json; view=default'
    type: object
  TwitterAccountInput:
    description: TwitterAccountInput media type (default view)
    example:
      expedition_id: 2.4099368e+18
      id: 2.8585887e+18
      name: Dignissimos ea nobis in harum doloribus.
      screen_name: Placeat amet illo reprehenderit quod provident dolorum.
      team_id: 6.943343e+18
      twitter_account_id: 1.3138473e+18
      user_id: 6.7501333e+18
    properties:
      expedition_id:
        example: 2.4099368e+18
        format: int64
        type: integer
      id:
        example: 2.8585887e+18
        format: int64
        type: integer
      name:
        example: Dignissimos ea nobis in harum doloribus.
        type: string
      screen_name:
        example: Placeat amet illo reprehenderit quod provident dolorum.
        type: string
      team_id:
        example: 6.943343e+18
        format: int64
        type: integer
      twitter_account_id:
        example: 1.3138473e+18
        format: int64
        type: integer
      user_id:
        example: 6.7501333e+18
        format: int64
        type: integer
    required:
    - id
    - expedition_id
    - name
    - twitter_account_id
    - screen_name
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      view=default'
    type: object
  TwitterAccountInputCollection:
    description: TwitterAccountInputCollection is the media type for an array of TwitterAccountInput
      (default view)
    example:
    - expedition_id: 2.4099368e+18
      id: 2.8585887e+18
      name: Dignissimos ea nobis in harum doloribus.
      screen_name: Placeat amet illo reprehenderit quod provident dolorum.
      team_id: 6.943343e+18
      twitter_account_id: 1.3138473e+18
      user_id: 6.7501333e+18
    - expedition_id: 2.4099368e+18
      id: 2.8585887e+18
      name: Dignissimos ea nobis in harum doloribus.
      screen_name: Placeat amet illo reprehenderit quod provident dolorum.
      team_id: 6.943343e+18
      twitter_account_id: 1.3138473e+18
      user_id: 6.7501333e+18
    items:
      $ref: '#/definitions/TwitterAccountInput'
    title: 'Mediatype identifier: application/vnd.app.twitter_account_input+json;
      type=collection; view=default'
    type: array
  TwitterAccountInputs:
    description: TwitterAccountInputs media type (default view)
    example:
      twitter_account_inputs:
      - expedition_id: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screen_name: Placeat amet illo reprehenderit quod provident dolorum.
        team_id: 6.943343e+18
        twitter_account_id: 1.3138473e+18
        user_id: 6.7501333e+18
      - expedition_id: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screen_name: Placeat amet illo reprehenderit quod provident dolorum.
        team_id: 6.943343e+18
        twitter_account_id: 1.3138473e+18
        user_id: 6.7501333e+18
      - expedition_id: 2.4099368e+18
        id: 2.8585887e+18
        name: Dignissimos ea nobis in harum doloribus.
        screen_name: Placeat amet illo reprehenderit quod provident dolorum.
        team_id: 6.943343e+18
        twitter_account_id: 1.3138473e+18
        user_id: 6.7501333e+18
    properties:
      twitter_account_inputs:
        $ref: '#/definitions/TwitterAccountInputCollection'
    required:
    - twitter_account_inputs
    title: 'Mediatype identifier: application/vnd.app.twitter_account_intputs+json;
      view=default'
    type: object
  UpdateDeviceInputPayload:
    example:
      key: Quidem sed tempora vel expedita impedit.
      name: Incidunt illo voluptatem.
    properties:
      key:
        example: Quidem sed tempora vel expedita impedit.
        type: string
      name:
        example: Incidunt illo voluptatem.
        type: string
    required:
    - name
    - key
    title: UpdateDeviceInputPayload
    type: object
  UpdateDeviceInputSchemaPayload:
    example:
      active: true
      json_schema: Aliquid animi sit sint.
      key: Repellendus eum qui.
    properties:
      active:
        example: true
        type: boolean
      json_schema:
        example: Aliquid animi sit sint.
        type: string
      key:
        example: Repellendus eum qui.
        type: string
    required:
    - key
    - active
    - json_schema
    title: UpdateDeviceInputSchemaPayload
    type: object
  UpdateInputPayload:
    example:
      active: false
      name: Illo qui odit sed id vitae.
      team_id: 7.1827755e+17
      user_id: 8.9069606e+18
    properties:
      active:
        example: false
        type: boolean
      name:
        example: Illo qui odit sed id vitae.
        type: string
      team_id:
        example: 7.1827755e+17
        format: int64
        type: integer
      user_id:
        example: 8.9069606e+18
        format: int64
        type: integer
    required:
    - name
    title: UpdateInputPayload
    type: object
  UpdateMemberPayload:
    example:
      role: Sit ut.
    properties:
      role:
        example: Sit ut.
        type: string
    required:
    - role
    title: UpdateMemberPayload
    type: object
  UpdateUserPayload:
    example:
      bio: Repellat iste illo nobis eos.
      email: maryjane@gibson.name
      name: mno95gdvcb
      username: mrted8hycr
    properties:
      bio:
        example: Repellat iste illo nobis eos.
        type: string
      email:
        example: maryjane@gibson.name
        format: email
        type: string
      name:
        example: mno95gdvcb
        maxLength: 256
        pattern: \S
        type: string
      username:
        description: Username
        example: mrted8hycr
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - name
    - email
    - username
    - bio
    title: UpdateUserPayload
    type: object
  User:
    description: User media type (default view)
    example:
      bio: Rem sint velit ad laboriosam voluptatem explicabo.
      email: ulices@schillerauer.name
      id: 3.2672563e+18
      name: x3fovu72r0
      username: h0spvjjveb
    properties:
      bio:
        example: Rem sint velit ad laboriosam voluptatem explicabo.
        type: string
      email:
        example: ulices@schillerauer.name
        format: email
        type: string
      id:
        example: 3.2672563e+18
        format: int64
        type: integer
      name:
        example: x3fovu72r0
        maxLength: 256
        pattern: \S
        type: string
      username:
        description: Username
        example: h0spvjjveb
        maxLength: 40
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        type: string
    required:
    - id
    - name
    - username
    - email
    - bio
    title: 'Mediatype identifier: application/vnd.app.user+json; view=default'
    type: object
  UserCollection:
    description: UserCollection is the media type for an array of User (default view)
    example:
    - bio: Rem sint velit ad laboriosam voluptatem explicabo.
      email: ulices@schillerauer.name
      id: 3.2672563e+18
      name: x3fovu72r0
      username: h0spvjjveb
    items:
      $ref: '#/definitions/User'
    title: 'Mediatype identifier: application/vnd.app.user+json; type=collection;
      view=default'
    type: array
  Users:
    description: Users media type (default view)
    example:
      users:
      - bio: Rem sint velit ad laboriosam voluptatem explicabo.
        email: ulices@schillerauer.name
        id: 3.2672563e+18
        name: x3fovu72r0
        username: h0spvjjveb
      - bio: Rem sint velit ad laboriosam voluptatem explicabo.
        email: ulices@schillerauer.name
        id: 3.2672563e+18
        name: x3fovu72r0
        username: h0spvjjveb
    properties:
      users:
        $ref: '#/definitions/UserCollection'
    required:
    - users
    title: 'Mediatype identifier: application/vnd.app.users+json; view=default'
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: api.fieldkit.org:8080
info:
  description: A one-click open platform for field researchers and explorers.
  title: Fieldkit API
  version: ""
paths:
  /expeditions/{expedition_id}:
    get:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#get id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id expedition
      tags:
      - expedition
    patch:
      description: |-
        Update an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#update
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update expedition
      tags:
      - expedition
  /expeditions/{expedition_id}/input-tokens:
    get:
      description: |-
        Update an expedition's input tokens

        Required security scopes:
          * `api:access`
      operationId: input_token#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.input_tokens+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputTokens'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id input_token
      tags:
      - input_token
    post:
      description: |-
        Add an input token

        Required security scopes:
          * `api:access`
      operationId: input_token#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.input_token+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputToken'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add input_token
      tags:
      - input_token
  /expeditions/{expedition_id}/inputs:
    get:
      description: |-
        List a project's inputs

        Required security scopes:
          * `api:access`
      operationId: input#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id input
      tags:
      - input
  /expeditions/{expedition_id}/inputs/devices:
    post:
      description: |-
        Add a Device input

        Required security scopes:
          * `api:access`
      operationId: device#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddDeviceInputPayload'
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add device
      tags:
      - device
  /expeditions/{expedition_id}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id twitter
      tags:
      - twitter
    post:
      description: |-
        Add a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTwitterAccountInputPayload'
      produces:
      - application/vnd.app.location+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Location'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add twitter
      tags:
      - twitter
  /expeditions/{expedition_id}/picture:
    get:
      description: Get a expedition's picture
      operationId: picture#expedition get id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: expedition get id picture
      tags:
      - picture
  /expeditions/{expedition_id}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list id
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id team
      tags:
      - team
    post:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#add
      parameters:
      - in: path
        name: expedition_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add team
      tags:
      - team
  /input-tokens/{input_token_id}:
    delete:
      description: |-
        Delete an input token

        Required security scopes:
          * `api:access`
      operationId: input_token#delete
      parameters:
      - in: path
        name: input_token_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete input_token
      tags:
      - input_token
  /inputs/{input_id}:
    patch:
      description: |-
        Update an input

        Required security scopes:
          * `api:access`
      operationId: input#update
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateInputPayload'
      produces:
      - application/vnd.app.input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Input'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update input
      tags:
      - input
  /inputs/devices/{id}:
    get:
      description: |-
        Get a Device input

        Required security scopes:
          * `api:access`
      operationId: device#get id
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id device
      tags:
      - device
    patch:
      description: |-
        Update an Device input

        Required security scopes:
          * `api:access`
      operationId: device#update
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceInputPayload'
      produces:
      - application/vnd.app.device_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update device
      tags:
      - device
  /inputs/devices/{id}/schemas:
    patch:
      description: |-
        Update an Device input schema

        Required security scopes:
          * `api:access`
      operationId: device#update schema
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceInputSchemaPayload'
      produces:
      - application/vnd.app.device_schemas+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceSchemas'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update schema device
      tags:
      - device
  /inputs/twitter-accounts/{input_id}:
    get:
      description: |-
        Get a Twitter account input

        Required security scopes:
          * `api:access`
      operationId: twitter#get id
      parameters:
      - in: path
        name: input_id
        required: true
        type: integer
      produces:
      - application/vnd.app.twitter_account_input+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInput'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id twitter
      tags:
      - twitter
  /login:
    post:
      description: Creates a valid JWT given login credentials.
      operationId: user#login
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: login user
      tags:
      - user
  /logout:
    post:
      description: |-
        Creates a valid JWT given login credentials.

        Required security scopes:
          * `api:access`
      operationId: user#logout
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: logout user
      tags:
      - user
  /projects:
    get:
      description: |-
        List projects

        Required security scopes:
          * `api:access`
      operationId: project#list
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list project
      tags:
      - project
    post:
      description: |-
        Add a project

        Required security scopes:
          * `api:access`
      operationId: project#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add project
      tags:
      - project
  /projects/@/{project}:
    get:
      description: Get a project
      operationId: project#get
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get project
      tags:
      - project
  /projects/@/{project}/administrators:
    get:
      description: |-
        List an project's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list administrator
      tags:
      - administrator
  /projects/@/{project}/administrators/@/{username}:
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Username
        in: path
        maxLength: 40
        name: username
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get administrator
      tags:
      - administrator
  /projects/@/{project}/expeditions:
    get:
      description: List a project's expeditions
      operationId: expedition#list
      parameters:
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}:
    get:
      description: Add an expedition
      operationId: expedition#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: get expedition
      tags:
      - expedition
  /projects/@/{project}/expeditions/@/{expedition}/geojson:
    get:
      description: List a expedition's features in a GeoJSON.
      operationId: GeoJSON#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.paged-geojson+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PagedGeoJSON'
        "400":
          description: Bad Request
      schemes:
      - https
      summary: list GeoJSON
      tags:
      - GeoJSON
  /projects/@/{project}/expeditions/@/{expedition}/input-tokens:
    get:
      description: |-
        List an expedition's input tokens

        Required security scopes:
          * `api:access`
      operationId: input_token#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.input_tokens+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InputTokens'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list input_token
      tags:
      - input_token
  /projects/@/{project}/expeditions/@/{expedition}/inputs:
    get:
      description: |-
        List a project's inputs

        Required security scopes:
          * `api:access`
      operationId: input#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Inputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list input
      tags:
      - input
  /projects/@/{project}/expeditions/@/{expedition}/inputs/devices:
    get:
      description: |-
        List an expedition's Device inputs

        Required security scopes:
          * `api:access`
      operationId: device#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.device_inputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list device
      tags:
      - device
  /projects/@/{project}/expeditions/@/{expedition}/inputs/twitter-accounts:
    get:
      description: |-
        List an expedition's Twitter account inputs

        Required security scopes:
          * `api:access`
      operationId: twitter#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.twitter_account_intputs+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TwitterAccountInputs'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list twitter
      tags:
      - twitter
  /projects/@/{project}/expeditions/@/{expedition}/teams:
    get:
      description: |-
        List an expedition's teams

        Required security scopes:
          * `api:access`
      operationId: team#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.teams+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Teams'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}:
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get team
      tags:
      - team
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members:
    get:
      description: |-
        List an team's members

        Required security scopes:
          * `api:access`
      operationId: member#list
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list member
      tags:
      - member
  /projects/@/{project}/expeditions/@/{expedition}/teams/@/{team}/members/@/{username}:
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get
      parameters:
      - description: Expedition slug
        in: path
        maxLength: 40
        name: expedition
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Project slug
        in: path
        maxLength: 40
        name: project
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Team slug
        in: path
        maxLength: 40
        name: team
        pattern: ^[\da-z]+(?:-[\da-z]+)*$
        required: true
        type: string
      - description: Username
        in: path
        maxLength: 40
        name: username
        pattern: ^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$
        required: true
        type: string
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get member
      tags:
      - member
  /projects/{project_id}:
    get:
      description: |-
        Get a project

        Required security scopes:
          * `api:access`
      operationId: project#get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id project
      tags:
      - project
    patch:
      description: |-
        Update a project

        Required security scopes:
          * `api:access`
      operationId: project#update
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddProjectPayload'
      produces:
      - application/vnd.app.project+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Project'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update project
      tags:
      - project
  /projects/{project_id}/administrators:
    get:
      description: |-
        List an projects's administrators

        Required security scopes:
          * `api:access`
      operationId: administrator#list id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrators+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrators'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id administrator
      tags:
      - administrator
    post:
      description: |-
        Add an administrator to a project

        Required security scopes:
          * `api:access`
      operationId: administrator#add
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddAdministratorPayload'
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add administrator
      tags:
      - administrator
  /projects/{project_id}/administrators/{user_id}:
    delete:
      description: |-
        Remove an administrator from a project

        Required security scopes:
          * `api:access`
      operationId: administrator#delete
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete administrator
      tags:
      - administrator
    get:
      description: |-
        Get an administrator

        Required security scopes:
          * `api:access`
      operationId: administrator#get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.administrator+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectAdministrator'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id administrator
      tags:
      - administrator
  /projects/{project_id}/expeditions:
    get:
      description: |-
        List a project's expeditions

        Required security scopes:
          * `api:access`
      operationId: expedition#list id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/vnd.app.expeditions+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expeditions'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id expedition
      tags:
      - expedition
    post:
      description: |-
        Add an expedition

        Required security scopes:
          * `api:access`
      operationId: expedition#add
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddExpeditionPayload'
      produces:
      - application/vnd.app.expedition+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Expedition'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add expedition
      tags:
      - expedition
  /projects/{project_id}/picture:
    get:
      description: Get a project's picture
      operationId: picture#project get id
      parameters:
      - in: path
        name: project_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: project get id picture
      tags:
      - picture
  /refresh:
    post:
      description: Creates a valid JWT given a refresh token.
      operationId: user#refresh
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/RefreshUserPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: refresh user
      tags:
      - user
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.json
  /swagger.yaml:
    get:
      operationId: swagger#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
      summary: Download api/public/swagger/swagger.yaml
  /teams/{team_id}:
    delete:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#delete
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete team
      tags:
      - team
    get:
      description: |-
        Add a team

        Required security scopes:
          * `api:access`
      operationId: team#get id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id team
      tags:
      - team
    patch:
      description: |-
        Update a team

        Required security scopes:
          * `api:access`
      operationId: team#update
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddTeamPayload'
      produces:
      - application/vnd.app.team+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Team'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update team
      tags:
      - team
  /teams/{team_id}/members:
    get:
      description: |-
        List an teams's members

        Required security scopes:
          * `api:access`
      operationId: member#list id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/vnd.app.members+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMembers'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list id member
      tags:
      - member
    post:
      description: |-
        Add a member to a team

        Required security scopes:
          * `api:access`
      operationId: member#add
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: add member
      tags:
      - member
  /teams/{team_id}/members/{user_id}:
    delete:
      description: |-
        Remove a member from a team

        Required security scopes:
          * `api:access`
      operationId: member#delete
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete member
      tags:
      - member
    get:
      description: |-
        Get a member

        Required security scopes:
          * `api:access`
      operationId: member#get id
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id member
      tags:
      - member
    patch:
      description: |-
        Update a member

        Required security scopes:
          * `api:access`
      operationId: member#update
      parameters:
      - in: path
        name: team_id
        required: true
        type: integer
      - in: path
        name: user_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateMemberPayload'
      produces:
      - application/vnd.app.member+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TeamMember'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update member
      tags:
      - member
  /twitter/callback:
    get:
      description: OAuth callback endpoint for Twitter
      operationId: twitter#callback
      parameters:
      - in: query
        name: oauth_token
        required: true
        type: string
      - in: query
        name: oauth_verifier
        required: true
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "400":
          description: Bad Request
      schemes:
      - https
      summary: callback twitter
      tags:
      - twitter
  /user:
    get:
      description: |-
        Get the authenticated user

        Required security scopes:
          * `api:access`
      operationId: user#get current
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get current user
      tags:
      - user
  /user/projects:
    get:
      description: |-
        List the authenticated user's projects

        Required security scopes:
          * `api:access`
      operationId: project#list current
      produces:
      - application/vnd.app.projects+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Projects'
        "400":
          description: Bad Request
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list current project
      tags:
      - project
  /users:
    get:
      description: |-
        List users

        Required security scopes:
          * `api:access`
      operationId: user#list
      produces:
      - application/vnd.app.users+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list user
      tags:
      - user
    post:
      description: Add a user
      operationId: user#add
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AddUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: add user
      tags:
      - user
  /users/@/{username}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get
      parameters:
      - in: path
        name: username
        required: true
        type: string
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get user
      tags:
      - user
  /users/{user_id}:
    get:
      description: |-
        Get a user

        Required security scopes:
          * `api:access`
      operationId: user#get id
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: get id user
      tags:
      - user
    patch:
      description: |-
        Update a user

        Required security scopes:
          * `api:access`
      operationId: user#update
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/vnd.app.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update user
      tags:
      - user
  /users/{user_id}/picture:
    get:
      description: Get a user's picture
      operationId: picture#user get id
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      schemes:
      - https
      summary: user get id picture
      tags:
      - picture
  /validate:
    get:
      description: Validate a user's email address.
      operationId: user#validate
      parameters:
      - in: query
        name: token
        required: true
        type: string
      responses:
        "302":
          description: Found
          headers:
            Location:
              type: string
        "401":
          description: Unauthorized
      schemes:
      - https
      summary: validate user
      tags:
      - user
produces:
- application/json
responses:
  BadRequest:
    description: Bad Request
  NoContent:
    description: No Content
  Unauthorized:
    description: Unauthorized
schemes:
- https
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
