// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AddFirmwareContext provides the Firmware add action context.
type AddFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddFirmwarePayload
}

// NewAddFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller add action.
func NewAddFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddFirmwareContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteFirmwareContext provides the Firmware delete action context.
type DeleteFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FirmwareID int
}

// NewDeleteFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller delete action.
func NewDeleteFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFirmwareID := req.Params["firmwareId"]
	if len(paramFirmwareID) > 0 {
		rawFirmwareID := paramFirmwareID[0]
		if firmwareID, err2 := strconv.Atoi(rawFirmwareID); err2 == nil {
			rctx.FirmwareID = firmwareID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firmwareId", rawFirmwareID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DownloadFirmwareContext provides the Firmware download action context.
type DownloadFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FirmwareID int
}

// NewDownloadFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller download action.
func NewDownloadFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*DownloadFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DownloadFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFirmwareID := req.Params["firmwareId"]
	if len(paramFirmwareID) > 0 {
		rawFirmwareID := paramFirmwareID[0]
		if firmwareID, err2 := strconv.Atoi(rawFirmwareID); err2 == nil {
			rctx.FirmwareID = firmwareID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firmwareId", rawFirmwareID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DownloadFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DownloadFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListFirmwareContext provides the Firmware list action context.
type ListFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Module   *string
	Page     *int
	PageSize *int
	Profile  *string
}

// NewListFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller list action.
func NewListFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramModule := req.Params["module"]
	if len(paramModule) > 0 {
		rawModule := paramModule[0]
		rctx.Module = &rawModule
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp4 := page
			tmp3 := &tmp4
			rctx.Page = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp6 := pageSize
			tmp5 := &tmp6
			rctx.PageSize = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	paramProfile := req.Params["profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFirmwareContext) OK(r *Firmwares) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.firmwares+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// DeleteDataContext provides the data delete action context.
type DeleteDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IngestionID int
}

// NewDeleteDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller delete action.
func NewDeleteDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIngestionID := req.Params["ingestionId"]
	if len(paramIngestionID) > 0 {
		rawIngestionID := paramIngestionID[0]
		if ingestionID, err2 := strconv.Atoi(rawIngestionID); err2 == nil {
			rctx.IngestionID = ingestionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ingestionId", rawIngestionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteDataContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeviceDataDataContext provides the data device data action context.
type DeviceDataDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID   string
	FirstBlock *int
	LastBlock  *int
	Page       *int
	PageSize   *int
}

// NewDeviceDataDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller device data action.
func NewDeviceDataDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceDataDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceDataDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramFirstBlock := req.Params["firstBlock"]
	if len(paramFirstBlock) > 0 {
		rawFirstBlock := paramFirstBlock[0]
		if firstBlock, err2 := strconv.Atoi(rawFirstBlock); err2 == nil {
			tmp9 := firstBlock
			tmp8 := &tmp9
			rctx.FirstBlock = tmp8
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firstBlock", rawFirstBlock, "integer"))
		}
	}
	paramLastBlock := req.Params["lastBlock"]
	if len(paramLastBlock) > 0 {
		rawLastBlock := paramLastBlock[0]
		if lastBlock, err2 := strconv.Atoi(rawLastBlock); err2 == nil {
			tmp11 := lastBlock
			tmp10 := &tmp11
			rctx.LastBlock = tmp10
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lastBlock", rawLastBlock, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp13 := page
			tmp12 := &tmp13
			rctx.Page = tmp12
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp15 := pageSize
			tmp14 := &tmp15
			rctx.PageSize = tmp14
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceDataDataContext) OK(r *DeviceDataRecordsResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.data+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeviceDataDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeviceSummaryDataContext provides the data device summary action context.
type DeviceSummaryDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewDeviceSummaryDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller device summary action.
func NewDeviceSummaryDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceSummaryDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceSummaryDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceSummaryDataContext) OK(r *DeviceDataSummaryResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeviceSummaryDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ProcessDataContext provides the data process action context.
type ProcessDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewProcessDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller process action.
func NewProcessDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProcessDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProcessDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProcessDataContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Busy sends a HTTP response with status code 503.
func (ctx *ProcessDataContext) Busy() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ProcessIngestionDataContext provides the data process ingestion action context.
type ProcessIngestionDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IngestionID int
}

// NewProcessIngestionDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller process ingestion action.
func NewProcessIngestionDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProcessIngestionDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProcessIngestionDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIngestionID := req.Params["ingestionId"]
	if len(paramIngestionID) > 0 {
		rawIngestionID := paramIngestionID[0]
		if ingestionID, err2 := strconv.Atoi(rawIngestionID); err2 == nil {
			rctx.IngestionID = ingestionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ingestionId", rawIngestionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProcessIngestionDataContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ProcessIngestionDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ProcessStationDataContext provides the data process station action context.
type ProcessStationDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
}

// NewProcessStationDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller process station action.
func NewProcessStationDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProcessStationDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProcessStationDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProcessStationDataContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ProcessStationDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddFieldNoteContext provides the field_note add action context.
type AddFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
	Payload   *AddFieldNotePayload
}

// NewAddFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller add action.
func NewAddFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddFieldNoteContext) OK(r *FieldNoteQueryResult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.field_note_result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddFieldNoteContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteFieldNoteContext provides the field_note delete action context.
type DeleteFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FieldNoteID int
	StationID   int
}

// NewDeleteFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller delete action.
func NewDeleteFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFieldNoteID := req.Params["fieldNoteId"]
	if len(paramFieldNoteID) > 0 {
		rawFieldNoteID := paramFieldNoteID[0]
		if fieldNoteID, err2 := strconv.Atoi(rawFieldNoteID); err2 == nil {
			rctx.FieldNoteID = fieldNoteID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fieldNoteId", rawFieldNoteID, "integer"))
		}
	}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *DeleteFieldNoteContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteFieldNoteContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetFieldNoteContext provides the field_note get action context.
type GetFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
}

// NewGetFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller get action.
func NewGetFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetFieldNoteContext) OK(r *FieldNotes) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.field_notes+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetFieldNoteContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetMediaFieldNoteContext provides the field_note get media action context.
type GetMediaFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MediaID   int
	StationID int
}

// NewGetMediaFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller get media action.
func NewGetMediaFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMediaFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMediaFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMediaID := req.Params["mediaId"]
	if len(paramMediaID) > 0 {
		rawMediaID := paramMediaID[0]
		if mediaID, err2 := strconv.Atoi(rawMediaID); err2 == nil {
			rctx.MediaID = mediaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("mediaId", rawMediaID, "integer"))
		}
	}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMediaFieldNoteContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// SaveMediaFieldNoteContext provides the field_note save media action context.
type SaveMediaFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
}

// NewSaveMediaFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller save media action.
func NewSaveMediaFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveMediaFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveMediaFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SaveMediaFieldNoteContext) OK(r *FieldNoteMedia) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.field_note_media+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveMediaFieldNoteContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateFieldNoteContext provides the field_note update action context.
type UpdateFieldNoteContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FieldNoteID int
	StationID   int
	Payload     *AddFieldNotePayload
}

// NewUpdateFieldNoteContext parses the incoming request URL and body, performs validations and creates the
// context used by the field_note controller update action.
func NewUpdateFieldNoteContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateFieldNoteContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateFieldNoteContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFieldNoteID := req.Params["fieldNoteId"]
	if len(paramFieldNoteID) > 0 {
		rawFieldNoteID := paramFieldNoteID[0]
		if fieldNoteID, err2 := strconv.Atoi(rawFieldNoteID); err2 == nil {
			rctx.FieldNoteID = fieldNoteID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fieldNoteId", rawFieldNoteID, "integer"))
		}
	}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateFieldNoteContext) OK(r *FieldNoteQueryResult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.field_note_result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateFieldNoteContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetJSONDataContext provides the jsonData get action context.
type GetJSONDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
	End      *int
	Internal *bool
	Page     *int
	PageSize *int
	Start    *int
}

// NewGetJSONDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the jsonData controller get action.
func NewGetJSONDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetJSONDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetJSONDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramEnd := req.Params["end"]
	if len(paramEnd) > 0 {
		rawEnd := paramEnd[0]
		if end, err2 := strconv.Atoi(rawEnd); err2 == nil {
			tmp28 := end
			tmp27 := &tmp28
			rctx.End = tmp27
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("end", rawEnd, "integer"))
		}
	}
	paramInternal := req.Params["internal"]
	if len(paramInternal) > 0 {
		rawInternal := paramInternal[0]
		if internal, err2 := strconv.ParseBool(rawInternal); err2 == nil {
			tmp29 := &internal
			rctx.Internal = tmp29
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("internal", rawInternal, "boolean"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp31 := page
			tmp30 := &tmp31
			rctx.Page = tmp30
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp33 := pageSize
			tmp32 := &tmp33
			rctx.PageSize = tmp32
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	paramStart := req.Params["start"]
	if len(paramStart) > 0 {
		rawStart := paramStart[0]
		if start, err2 := strconv.Atoi(rawStart); err2 == nil {
			tmp35 := start
			tmp34 := &tmp35
			rctx.Start = tmp34
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start", rawStart, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetJSONDataContext) OK(r *JSONDataResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.json.data+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetJSONDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SummaryJSONDataContext provides the jsonData summary action context.
type SummaryJSONDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID   string
	End        *int
	Internal   *bool
	Interval   *int
	Page       *int
	PageSize   *int
	Resolution *int
	Start      *int
}

// NewSummaryJSONDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the jsonData controller summary action.
func NewSummaryJSONDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*SummaryJSONDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SummaryJSONDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramEnd := req.Params["end"]
	if len(paramEnd) > 0 {
		rawEnd := paramEnd[0]
		if end, err2 := strconv.Atoi(rawEnd); err2 == nil {
			tmp37 := end
			tmp36 := &tmp37
			rctx.End = tmp36
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("end", rawEnd, "integer"))
		}
	}
	paramInternal := req.Params["internal"]
	if len(paramInternal) > 0 {
		rawInternal := paramInternal[0]
		if internal, err2 := strconv.ParseBool(rawInternal); err2 == nil {
			tmp38 := &internal
			rctx.Internal = tmp38
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("internal", rawInternal, "boolean"))
		}
	}
	paramInterval := req.Params["interval"]
	if len(paramInterval) > 0 {
		rawInterval := paramInterval[0]
		if interval, err2 := strconv.Atoi(rawInterval); err2 == nil {
			tmp40 := interval
			tmp39 := &tmp40
			rctx.Interval = tmp39
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("interval", rawInterval, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp42 := page
			tmp41 := &tmp42
			rctx.Page = tmp41
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp44 := pageSize
			tmp43 := &tmp44
			rctx.PageSize = tmp43
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	paramResolution := req.Params["resolution"]
	if len(paramResolution) > 0 {
		rawResolution := paramResolution[0]
		if resolution, err2 := strconv.Atoi(rawResolution); err2 == nil {
			tmp46 := resolution
			tmp45 := &tmp46
			rctx.Resolution = tmp45
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("resolution", rawResolution, "integer"))
		}
	}
	paramStart := req.Params["start"]
	if len(paramStart) > 0 {
		rawStart := paramStart[0]
		if start, err2 := strconv.Atoi(rawStart); err2 == nil {
			tmp48 := start
			tmp47 := &tmp48
			rctx.Start = tmp47
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start", rawStart, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SummaryJSONDataContext) OK(r *JSONDataSummaryResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.json.data.summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SummaryJSONDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ProjectGetIDPictureContext provides the picture project get id action context.
type ProjectGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewProjectGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller project get id action.
func NewProjectGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProjectGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProjectGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProjectGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProjectGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserGetIDPictureContext provides the picture user get id action context.
type UserGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user get id action.
func NewUserGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserSaveIDPictureContext provides the picture user save id action context.
type UserSaveIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserSaveIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user save id action.
func NewUserSaveIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserSaveIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserSaveIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserSaveIDPictureContext) OK(r *MediaReferenceResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.media+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserSaveIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddProjectContext provides the project add action context.
type AddProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddProjectPayload
}

// NewAddProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller add action.
func NewAddProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddStationProjectContext provides the project add station action context.
type AddStationProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	StationID int
}

// NewAddStationProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller add station action.
func NewAddStationProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddStationProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddStationProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *AddStationProjectContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddStationProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteProjectContext provides the project delete action context.
type DeleteProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewDeleteProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller delete action.
func NewDeleteProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *DeleteProjectContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetProjectContext provides the project get action context.
type GetProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewGetProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get action.
func NewGetProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetImageProjectContext provides the project get image action context.
type GetImageProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewGetImageProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get image action.
func NewGetImageProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetImageProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetImageProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetImageProjectContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InviteUserProjectContext provides the project invite user action context.
type InviteUserProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *InviteUserPayload
}

// NewInviteUserProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller invite user action.
func NewInviteUserProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*InviteUserProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := InviteUserProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *InviteUserProjectContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *InviteUserProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListProjectContext provides the project list action context.
type ListProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list action.
func NewListProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OK(r *Projects) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListCurrentProjectContext provides the project list current action context.
type ListCurrentProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCurrentProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list current action.
func NewListCurrentProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCurrentProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCurrentProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCurrentProjectContext) OK(r *Projects) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCurrentProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListStationProjectContext provides the project list station action context.
type ListStationProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
}

// NewListStationProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list station action.
func NewListStationProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListStationProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListStationProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListStationProjectContext) OK(r *Projects) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListStationProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RemoveStationProjectContext provides the project remove station action context.
type RemoveStationProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	StationID int
}

// NewRemoveStationProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller remove station action.
func NewRemoveStationProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveStationProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveStationProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *RemoveStationProjectContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RemoveStationProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RemoveUserProjectContext provides the project remove user action context.
type RemoveUserProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *RemoveUserPayload
}

// NewRemoveUserProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller remove user action.
func NewRemoveUserProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveUserProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveUserProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *RemoveUserProjectContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RemoveUserProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// SaveImageProjectContext provides the project save image action context.
type SaveImageProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewSaveImageProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller save image action.
func NewSaveImageProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveImageProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveImageProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SaveImageProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveImageProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateProjectContext provides the project update action context.
type UpdateProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddProjectPayload
}

// NewUpdateProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller update action.
func NewUpdateProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DataRecordsContext provides the records data action context.
type DataRecordsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RecordID int
}

// NewDataRecordsContext parses the incoming request URL and body, performs validations and creates the
// context used by the records controller data action.
func NewDataRecordsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DataRecordsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DataRecordsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRecordID := req.Params["recordId"]
	if len(paramRecordID) > 0 {
		rawRecordID := paramRecordID[0]
		if recordID, err2 := strconv.Atoi(rawRecordID); err2 == nil {
			rctx.RecordID = recordID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("recordId", rawRecordID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DataRecordsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DataRecordsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// FilteredRecordsContext provides the records filtered action context.
type FilteredRecordsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RecordID int
}

// NewFilteredRecordsContext parses the incoming request URL and body, performs validations and creates the
// context used by the records controller filtered action.
func NewFilteredRecordsContext(ctx context.Context, r *http.Request, service *goa.Service) (*FilteredRecordsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FilteredRecordsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRecordID := req.Params["recordId"]
	if len(paramRecordID) > 0 {
		rawRecordID := paramRecordID[0]
		if recordID, err2 := strconv.Atoi(rawRecordID); err2 == nil {
			rctx.RecordID = recordID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("recordId", rawRecordID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FilteredRecordsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *FilteredRecordsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// MetaRecordsContext provides the records meta action context.
type MetaRecordsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RecordID int
}

// NewMetaRecordsContext parses the incoming request URL and body, performs validations and creates the
// context used by the records controller meta action.
func NewMetaRecordsContext(ctx context.Context, r *http.Request, service *goa.Service) (*MetaRecordsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MetaRecordsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRecordID := req.Params["recordId"]
	if len(paramRecordID) > 0 {
		rawRecordID := paramRecordID[0]
		if recordID, err2 := strconv.Atoi(rawRecordID); err2 == nil {
			rctx.RecordID = recordID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("recordId", rawRecordID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MetaRecordsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *MetaRecordsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ResolvedRecordsContext provides the records resolved action context.
type ResolvedRecordsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RecordID int
}

// NewResolvedRecordsContext parses the incoming request URL and body, performs validations and creates the
// context used by the records controller resolved action.
func NewResolvedRecordsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ResolvedRecordsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ResolvedRecordsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRecordID := req.Params["recordId"]
	if len(paramRecordID) > 0 {
		rawRecordID := paramRecordID[0]
		if recordID, err2 := strconv.Atoi(rawRecordID); err2 == nil {
			rctx.RecordID = recordID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("recordId", rawRecordID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ResolvedRecordsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ResolvedRecordsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddUserContext provides the user add action context.
type AddUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUserPayload
}

// NewAddUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller add action.
func NewAddUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ChangePasswordUserContext provides the user change password action context.
type ChangePasswordUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPasswordPayload
}

// NewChangePasswordUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller change password action.
func NewChangePasswordUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ChangePasswordUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ChangePasswordUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ChangePasswordUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetCurrentUserContext provides the user get current action context.
type GetCurrentUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get current action.
func NewGetCurrentUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetCurrentUserImageUserContext provides the user get current user image action context.
type GetCurrentUserImageUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserImageUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get current user image action.
func NewGetCurrentUserImageUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserImageUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserImageUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserImageUserContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetCurrentUserImageUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDUserContext provides the user get id action context.
type GetIDUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetIDUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get id action.
func NewGetIDUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetUserImageUserContext provides the user get user image action context.
type GetUserImageUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserImageUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get user image action.
func NewGetUserImageUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserImageUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserImageUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserImageUserContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ListByProjectUserContext provides the user list by project action context.
type ListByProjectUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID string
}

// NewListByProjectUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list by project action.
func NewListByProjectUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListByProjectUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListByProjectUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		rctx.ProjectID = rawProjectID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListByProjectUserContext) OK(r *ProjectUsers) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.users+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginPayload
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LoginUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// LogoutUserContext provides the user logout action context.
type LogoutUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller logout action.
func NewLogoutUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LogoutUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ProjectRolesUserContext provides the user project roles action context.
type ProjectRolesUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewProjectRolesUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller project roles action.
func NewProjectRolesUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProjectRolesUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProjectRolesUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProjectRolesUserContext) OK(r ProjectRoleCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project.role+json; type=collection")
	}
	if r == nil {
		r = ProjectRoleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// RecoveryUserContext provides the user recovery action context.
type RecoveryUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RecoveryPayload
}

// NewRecoveryUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller recovery action.
func NewRecoveryUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RecoveryUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RecoveryUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RecoveryUserContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RecoveryUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// RecoveryLookupUserContext provides the user recovery lookup action context.
type RecoveryLookupUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RecoveryLookupPayload
}

// NewRecoveryLookupUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller recovery lookup action.
func NewRecoveryLookupUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RecoveryLookupUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RecoveryLookupUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RecoveryLookupUserContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RecoveryLookupUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// RefreshUserContext provides the user refresh action context.
type RefreshUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RefreshUserPayload
}

// NewRefreshUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller refresh action.
func NewRefreshUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// refreshUserPayload is the user refresh action payload.
type refreshUserPayload struct {
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" yaml:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *refreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// Publicize creates RefreshUserPayload from refreshUserPayload
func (payload *refreshUserPayload) Publicize() *RefreshUserPayload {
	var pub RefreshUserPayload
	if payload.RefreshToken != nil {
		pub.RefreshToken = *payload.RefreshToken
	}
	return &pub
}

// RefreshUserPayload is the user refresh action payload.
type RefreshUserPayload struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token" yaml:"refresh_token" xml:"refresh_token"`
}

// Validate runs the validation rules defined in the design.
func (payload *RefreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RefreshUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RefreshUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// SaveCurrentUserImageUserContext provides the user save current user image action context.
type SaveCurrentUserImageUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSaveCurrentUserImageUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller save current user image action.
func NewSaveCurrentUserImageUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveCurrentUserImageUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveCurrentUserImageUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SaveCurrentUserImageUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveCurrentUserImageUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// SendValidationUserContext provides the user send validation action context.
type SendValidationUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewSendValidationUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller send validation action.
func NewSendValidationUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*SendValidationUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SendValidationUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SendValidationUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SendValidationUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// TransmissionTokenUserContext provides the user transmission token action context.
type TransmissionTokenUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewTransmissionTokenUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller transmission token action.
func NewTransmissionTokenUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*TransmissionTokenUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TransmissionTokenUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TransmissionTokenUserContext) OK(r *TransmissionToken) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user.transmission.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ValidateUserContext provides the user validate action context.
type ValidateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token string
}

// NewValidateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller validate action.
func NewValidateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *ValidateUserContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ValidateUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}
