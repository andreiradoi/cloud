// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// AddAdministratorContext provides the administrator add action context.
type AddAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddAdministratorPayload
}

// NewAddAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller add action.
func NewAddAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddAdministratorContext) OK(r *ProjectAdministrator) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteAdministratorContext provides the administrator delete action context.
type DeleteAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	UserID    int
}

// NewDeleteAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller delete action.
func NewDeleteAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAdministratorContext) OK(r *ProjectAdministrator) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetAdministratorContext provides the administrator get action context.
type GetAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project  string
	Username string
}

// NewGetAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller get action.
func NewGetAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Username) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`username`, rctx.Username, utf8.RuneCountInString(rctx.Username), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAdministratorContext) OK(r *ProjectAdministrator) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDAdministratorContext provides the administrator get id action context.
type GetIDAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	UserID    int
}

// NewGetIDAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller get id action.
func NewGetIDAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDAdministratorContext) OK(r *ProjectAdministrator) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListAdministratorContext provides the administrator list action context.
type ListAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller list action.
func NewListAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAdministratorContext) OK(r *ProjectAdministrators) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrators+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDAdministratorContext provides the administrator list id action context.
type ListIDAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewListIDAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller list id action.
func NewListIDAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDAdministratorContext) OK(r *ProjectAdministrators) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrators+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddDeviceContext provides the device add action context.
type AddDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddDeviceInputPayload
}

// NewAddDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller add action.
func NewAddDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddDeviceContext) OK(r *Location) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.location+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDDeviceContext provides the device get id action context.
type GetIDDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	InputID int
}

// NewGetIDDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller get id action.
func NewGetIDDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramInputID := req.Params["input_id"]
	if len(paramInputID) > 0 {
		rawInputID := paramInputID[0]
		if inputID, err2 := strconv.Atoi(rawInputID); err2 == nil {
			rctx.InputID = inputID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("input_id", rawInputID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDDeviceContext) OK(r *DeviceInput) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_input+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListDeviceContext provides the device list action context.
type ListDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller list action.
func NewListDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDeviceContext) OK(r *DeviceInputs) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_inputs+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateDeviceContext provides the device update action context.
type UpdateDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	InputID int
	Payload *UpdateDeviceInputPayload
}

// NewUpdateDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller update action.
func NewUpdateDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramInputID := req.Params["input_id"]
	if len(paramInputID) > 0 {
		rawInputID := paramInputID[0]
		if inputID, err2 := strconv.Atoi(rawInputID); err2 == nil {
			rctx.InputID = inputID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("input_id", rawInputID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateDeviceContext) OK(r *DeviceInput) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_input+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListDocumentContext provides the document list action context.
type ListDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller list action.
func NewListDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDocumentContext) OK(r *Documents) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.documents+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListDocumentContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDDocumentContext provides the document list id action context.
type ListIDDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller list id action.
func NewListIDDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDDocumentContext) OK(r *Documents) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.documents+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDDocumentContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddExpeditionContext provides the expedition add action context.
type AddExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddExpeditionPayload
}

// NewAddExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller add action.
func NewAddExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetExpeditionContext provides the expedition get action context.
type GetExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewGetExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller get action.
func NewGetExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDExpeditionContext provides the expedition get id action context.
type GetIDExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewGetIDExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller get id action.
func NewGetIDExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListExpeditionContext provides the expedition list action context.
type ListExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller list action.
func NewListExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListExpeditionContext) OK(r *Expeditions) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expeditions+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDExpeditionContext provides the expedition list id action context.
type ListIDExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewListIDExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller list id action.
func NewListIDExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDExpeditionContext) OK(r *Expeditions) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expeditions+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateExpeditionContext provides the expedition update action context.
type UpdateExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddExpeditionPayload
}

// NewUpdateExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller update action.
func NewUpdateExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListInputContext provides the input list action context.
type ListInputContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListInputContext parses the incoming request URL and body, performs validations and creates the
// context used by the input controller list action.
func NewListInputContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListInputContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListInputContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListInputContext) OK(r *Inputs) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.inputs+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListInputContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDInputContext provides the input list id action context.
type ListIDInputContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDInputContext parses the incoming request URL and body, performs validations and creates the
// context used by the input controller list id action.
func NewListIDInputContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDInputContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDInputContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDInputContext) OK(r *Inputs) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.inputs+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDInputContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateInputContext provides the input update action context.
type UpdateInputContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	InputID int
	Payload *UpdateInputPayload
}

// NewUpdateInputContext parses the incoming request URL and body, performs validations and creates the
// context used by the input controller update action.
func NewUpdateInputContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateInputContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateInputContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramInputID := req.Params["input_id"]
	if len(paramInputID) > 0 {
		rawInputID := paramInputID[0]
		if inputID, err2 := strconv.Atoi(rawInputID); err2 == nil {
			rctx.InputID = inputID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("input_id", rawInputID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateInputContext) OK(r *Input) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.input+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateInputContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddInputTokenContext provides the input_token add action context.
type AddInputTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewAddInputTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the input_token controller add action.
func NewAddInputTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddInputTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddInputTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddInputTokenContext) OK(r *InputToken) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.input_token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddInputTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteInputTokenContext provides the input_token delete action context.
type DeleteInputTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	InputTokenID int
}

// NewDeleteInputTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the input_token controller delete action.
func NewDeleteInputTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteInputTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteInputTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramInputTokenID := req.Params["input_token_id"]
	if len(paramInputTokenID) > 0 {
		rawInputTokenID := paramInputTokenID[0]
		if inputTokenID, err2 := strconv.Atoi(rawInputTokenID); err2 == nil {
			rctx.InputTokenID = inputTokenID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("input_token_id", rawInputTokenID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteInputTokenContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteInputTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListInputTokenContext provides the input_token list action context.
type ListInputTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListInputTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the input_token controller list action.
func NewListInputTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListInputTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListInputTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListInputTokenContext) OK(r *InputTokens) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.input_tokens+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListInputTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDInputTokenContext provides the input_token list id action context.
type ListIDInputTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDInputTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the input_token controller list id action.
func NewListIDInputTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDInputTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDInputTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDInputTokenContext) OK(r *InputTokens) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.input_tokens+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDInputTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddMemberContext provides the member add action context.
type AddMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	Payload *AddMemberPayload
}

// NewAddMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller add action.
func NewAddMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddMemberContext) OK(r *TeamMember) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteMemberContext provides the member delete action context.
type DeleteMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
	UserID int
}

// NewDeleteMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller delete action.
func NewDeleteMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteMemberContext) OK(r *TeamMember) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetMemberContext provides the member get action context.
type GetMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
	Username   string
}

// NewGetMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller get action.
func NewGetMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Username) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`username`, rctx.Username, utf8.RuneCountInString(rctx.Username), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMemberContext) OK(r *TeamMember) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDMemberContext provides the member get id action context.
type GetIDMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
	UserID int
}

// NewGetIDMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller get id action.
func NewGetIDMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDMemberContext) OK(r *TeamMember) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListMemberContext provides the member list action context.
type ListMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
}

// NewListMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller list action.
func NewListMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMemberContext) OK(r *TeamMembers) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.members+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDMemberContext provides the member list id action context.
type ListIDMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewListIDMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller list id action.
func NewListIDMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDMemberContext) OK(r *TeamMembers) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.members+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateMemberContext provides the member update action context.
type UpdateMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	UserID  int
	Payload *UpdateMemberPayload
}

// NewUpdateMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller update action.
func NewUpdateMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateMemberContext) OK(r *TeamMember) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ExpeditionGetIDPictureContext provides the picture expedition get id action context.
type ExpeditionGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewExpeditionGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller expedition get id action.
func NewExpeditionGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExpeditionGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExpeditionGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ExpeditionGetIDPictureContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "image/png")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ExpeditionGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ProjectGetIDPictureContext provides the picture project get id action context.
type ProjectGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewProjectGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller project get id action.
func NewProjectGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProjectGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProjectGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProjectGetIDPictureContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "image/png")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProjectGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserGetIDPictureContext provides the picture user get id action context.
type UserGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user get id action.
func NewUserGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserGetIDPictureContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "image/png")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddProjectContext provides the project add action context.
type AddProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddProjectPayload
}

// NewAddProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller add action.
func NewAddProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetProjectContext provides the project get action context.
type GetProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewGetProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get action.
func NewGetProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDProjectContext provides the project get id action context.
type GetIDProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewGetIDProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get id action.
func NewGetIDProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListProjectContext provides the project list action context.
type ListProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list action.
func NewListProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OK(r *Projects) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListCurrentProjectContext provides the project list current action context.
type ListCurrentProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCurrentProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list current action.
func NewListCurrentProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCurrentProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCurrentProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCurrentProjectContext) OK(r *Projects) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCurrentProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateProjectContext provides the project update action context.
type UpdateProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddProjectPayload
}

// NewUpdateProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller update action.
func NewUpdateProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["project_id"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("project_id", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddTeamContext provides the team add action context.
type AddTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddTeamPayload
}

// NewAddTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller add action.
func NewAddTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteTeamContext provides the team delete action context.
type DeleteTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewDeleteTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller delete action.
func NewDeleteTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetTeamContext provides the team get action context.
type GetTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
}

// NewGetTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller get action.
func NewGetTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDTeamContext provides the team get id action context.
type GetIDTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewGetIDTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller get id action.
func NewGetIDTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTeamContext provides the team list action context.
type ListTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller list action.
func NewListTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTeamContext) OK(r *Teams) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.teams+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDTeamContext provides the team list id action context.
type ListIDTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller list id action.
func NewListIDTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDTeamContext) OK(r *Teams) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.teams+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateTeamContext provides the team update action context.
type UpdateTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	Payload *AddTeamPayload
}

// NewUpdateTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller update action.
func NewUpdateTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["team_id"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("team_id", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddTwitterContext provides the twitter add action context.
type AddTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddTwitterAccountInputPayload
}

// NewAddTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller add action.
func NewAddTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTwitterContext) OK(r *Location) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.location+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CallbackTwitterContext provides the twitter callback action context.
type CallbackTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OauthToken    string
	OauthVerifier string
}

// NewCallbackTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller callback action.
func NewCallbackTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*CallbackTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CallbackTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOauthToken := req.Params["oauth_token"]
	if len(paramOauthToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("oauth_token"))
	} else {
		rawOauthToken := paramOauthToken[0]
		rctx.OauthToken = rawOauthToken
	}
	paramOauthVerifier := req.Params["oauth_verifier"]
	if len(paramOauthVerifier) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("oauth_verifier"))
	} else {
		rawOauthVerifier := paramOauthVerifier[0]
		rctx.OauthVerifier = rawOauthVerifier
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *CallbackTwitterContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CallbackTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDTwitterContext provides the twitter get id action context.
type GetIDTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	InputID int
}

// NewGetIDTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller get id action.
func NewGetIDTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramInputID := req.Params["input_id"]
	if len(paramInputID) > 0 {
		rawInputID := paramInputID[0]
		if inputID, err2 := strconv.Atoi(rawInputID); err2 == nil {
			rctx.InputID = inputID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("input_id", rawInputID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDTwitterContext) OK(r *TwitterAccountInput) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_input+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTwitterContext provides the twitter list action context.
type ListTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller list action.
func NewListTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTwitterContext) OK(r *TwitterAccountInputs) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_intputs+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDTwitterContext provides the twitter list id action context.
type ListIDTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller list id action.
func NewListIDTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expedition_id"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expedition_id", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDTwitterContext) OK(r *TwitterAccountInputs) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_intputs+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddUserContext provides the user add action context.
type AddUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUserPayload
}

// NewAddUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller add action.
func NewAddUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetCurrentUserContext provides the user get current action context.
type GetCurrentUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get current action.
func NewGetCurrentUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDUserContext provides the user get id action context.
type GetIDUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetIDUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get id action.
func NewGetIDUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.users+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginPayload
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LoginUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// LogoutUserContext provides the user logout action context.
type LogoutUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller logout action.
func NewLogoutUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LogoutUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RefreshUserContext provides the user refresh action context.
type RefreshUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RefreshUserPayload
}

// NewRefreshUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller refresh action.
func NewRefreshUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// refreshUserPayload is the user refresh action payload.
type refreshUserPayload struct {
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *refreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// Publicize creates RefreshUserPayload from refreshUserPayload
func (payload *refreshUserPayload) Publicize() *RefreshUserPayload {
	var pub RefreshUserPayload
	if payload.RefreshToken != nil {
		pub.RefreshToken = *payload.RefreshToken
	}
	return &pub
}

// RefreshUserPayload is the user refresh action payload.
type RefreshUserPayload struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// Validate runs the validation rules defined in the design.
func (payload *RefreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RefreshUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RefreshUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ValidateUserContext provides the user validate action context.
type ValidateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token string
}

// NewValidateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller validate action.
func NewValidateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *ValidateUserContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ValidateUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}
