// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "fieldkit": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// AddExpeditionContext provides the expedition add action context.
type AddExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
	Payload *AddExpeditionPayload
}

// NewAddExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller add action.
func NewAddExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetExpeditionContext provides the expedition get action context.
type GetExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewGetExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller get action.
func NewGetExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetExpeditionContext) OK(r *Expedition) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListExpeditionContext provides the expedition list action context.
type ListExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller list action.
func NewListExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListExpeditionContext) OK(r *Expeditions) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expeditions+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddProjectContext provides the project add action context.
type AddProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddProjectPayload
}

// NewAddProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller add action.
func NewAddProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetProjectContext provides the project get action context.
type GetProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewGetProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get action.
func NewGetProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OK(r *Project) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListProjectContext provides the project list action context.
type ListProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list action.
func NewListProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OK(r *Projects) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListCurrentProjectContext provides the project list current action context.
type ListCurrentProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCurrentProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list current action.
func NewListCurrentProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCurrentProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCurrentProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCurrentProjectContext) OK(r *Projects) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCurrentProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddTeamContext provides the team add action context.
type AddTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Payload    *AddTeamPayload
}

// NewAddTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller add action.
func NewAddTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetTeamContext provides the team get action context.
type GetTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
}

// NewGetTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller get action.
func NewGetTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTeamContext) OK(r *Team) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTeamContext provides the team list action context.
type ListTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller list action.
func NewListTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTeamContext) OK(r *Teams) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.teams+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddUserContext provides the user add action context.
type AddUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUserPayload
}

// NewAddUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller add action.
func NewAddUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetCurrentUserContext provides the user get current action context.
type GetCurrentUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get current action.
func NewGetCurrentUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.users+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUserPayload
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LoginUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// LogoutUserContext provides the user logout action context.
type LogoutUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller logout action.
func NewLogoutUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LogoutUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RefreshUserContext provides the user refresh action context.
type RefreshUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RefreshUserPayload
}

// NewRefreshUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller refresh action.
func NewRefreshUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// refreshUserPayload is the user refresh action payload.
type refreshUserPayload struct {
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *refreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// Publicize creates RefreshUserPayload from refreshUserPayload
func (payload *refreshUserPayload) Publicize() *RefreshUserPayload {
	var pub RefreshUserPayload
	if payload.RefreshToken != nil {
		pub.RefreshToken = *payload.RefreshToken
	}
	return &pub
}

// RefreshUserPayload is the user refresh action payload.
type RefreshUserPayload struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// Validate runs the validation rules defined in the design.
func (payload *RefreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RefreshUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RefreshUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}
