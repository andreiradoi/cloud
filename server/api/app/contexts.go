// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AddFirmwareContext provides the Firmware add action context.
type AddFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddFirmwarePayload
}

// NewAddFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller add action.
func NewAddFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddFirmwareContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteFirmwareContext provides the Firmware delete action context.
type DeleteFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FirmwareID int
}

// NewDeleteFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller delete action.
func NewDeleteFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFirmwareID := req.Params["firmwareId"]
	if len(paramFirmwareID) > 0 {
		rawFirmwareID := paramFirmwareID[0]
		if firmwareID, err2 := strconv.Atoi(rawFirmwareID); err2 == nil {
			rctx.FirmwareID = firmwareID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firmwareId", rawFirmwareID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DownloadFirmwareContext provides the Firmware download action context.
type DownloadFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FirmwareID int
}

// NewDownloadFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller download action.
func NewDownloadFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*DownloadFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DownloadFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFirmwareID := req.Params["firmwareId"]
	if len(paramFirmwareID) > 0 {
		rawFirmwareID := paramFirmwareID[0]
		if firmwareID, err2 := strconv.Atoi(rawFirmwareID); err2 == nil {
			rctx.FirmwareID = firmwareID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firmwareId", rawFirmwareID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DownloadFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DownloadFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListFirmwareContext provides the Firmware list action context.
type ListFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Module   *string
	Page     *int
	PageSize *int
	Profile  *string
}

// NewListFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller list action.
func NewListFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramModule := req.Params["module"]
	if len(paramModule) > 0 {
		rawModule := paramModule[0]
		rctx.Module = &rawModule
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp4 := page
			tmp3 := &tmp4
			rctx.Page = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp6 := pageSize
			tmp5 := &tmp6
			rctx.PageSize = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	paramProfile := req.Params["profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFirmwareContext) OK(r *Firmwares) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.firmwares+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// DeviceDataDataContext provides the data device data action context.
type DeviceDataDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID   string
	FirstBlock *int
	LastBlock  *int
	Page       *int
	PageSize   *int
}

// NewDeviceDataDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller device data action.
func NewDeviceDataDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceDataDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceDataDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramFirstBlock := req.Params["firstBlock"]
	if len(paramFirstBlock) > 0 {
		rawFirstBlock := paramFirstBlock[0]
		if firstBlock, err2 := strconv.Atoi(rawFirstBlock); err2 == nil {
			tmp8 := firstBlock
			tmp7 := &tmp8
			rctx.FirstBlock = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("firstBlock", rawFirstBlock, "integer"))
		}
	}
	paramLastBlock := req.Params["lastBlock"]
	if len(paramLastBlock) > 0 {
		rawLastBlock := paramLastBlock[0]
		if lastBlock, err2 := strconv.Atoi(rawLastBlock); err2 == nil {
			tmp10 := lastBlock
			tmp9 := &tmp10
			rctx.LastBlock = tmp9
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lastBlock", rawLastBlock, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp12 := page
			tmp11 := &tmp12
			rctx.Page = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramPageSize := req.Params["pageSize"]
	if len(paramPageSize) > 0 {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			tmp14 := pageSize
			tmp13 := &tmp14
			rctx.PageSize = tmp13
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pageSize", rawPageSize, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceDataDataContext) OK(r *DeviceDataRecordsResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.data+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeviceDataDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeviceSummaryDataContext provides the data device summary action context.
type DeviceSummaryDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewDeviceSummaryDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the data controller device summary action.
func NewDeviceSummaryDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceSummaryDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceSummaryDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceSummaryDataContext) OK(r *DeviceDataSummaryResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeviceSummaryDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ProjectGetIDPictureContext provides the picture project get id action context.
type ProjectGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewProjectGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller project get id action.
func NewProjectGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProjectGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProjectGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProjectGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProjectGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserGetIDPictureContext provides the picture user get id action context.
type UserGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user get id action.
func NewUserGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserSaveIDPictureContext provides the picture user save id action context.
type UserSaveIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserSaveIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user save id action.
func NewUserSaveIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserSaveIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserSaveIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserSaveIDPictureContext) OK(r *MediaReferenceResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.media+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserSaveIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}
