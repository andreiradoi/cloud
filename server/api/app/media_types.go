// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": Application Media Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// ProjectAdministrator media type (default view)
//
// Identifier: application/vnd.app.administrator+json; view=default
type ProjectAdministrator struct {
	ProjectID int `form:"projectId" json:"projectId" xml:"projectId"`
	UserID    int `form:"userId" json:"userId" xml:"userId"`
}

// Validate validates the ProjectAdministrator media type instance.
func (mt *ProjectAdministrator) Validate() (err error) {

	return
}

// ProjectAdministratorCollection is the media type for an array of ProjectAdministrator (default view)
//
// Identifier: application/vnd.app.administrator+json; type=collection; view=default
type ProjectAdministratorCollection []*ProjectAdministrator

// Validate validates the ProjectAdministratorCollection media type instance.
func (mt ProjectAdministratorCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ProjectAdministrators media type (default view)
//
// Identifier: application/vnd.app.administrators+json; view=default
type ProjectAdministrators struct {
	Administrators ProjectAdministratorCollection `form:"administrators" json:"administrators" xml:"administrators"`
}

// Validate validates the ProjectAdministrators media type instance.
func (mt *ProjectAdministrators) Validate() (err error) {
	if mt.Administrators == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "administrators"))
	}
	return
}

// DeviceInput media type (default view)
//
// Identifier: application/vnd.app.device_input+json; view=default
type DeviceInput struct {
	Active       bool   `form:"active" json:"active" xml:"active"`
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" xml:"id"`
	Key          string `form:"key" json:"key" xml:"key"`
	Name         string `form:"name" json:"name" xml:"name"`
	TeamID       *int   `form:"teamId,omitempty" json:"teamId,omitempty" xml:"teamId,omitempty"`
	Token        string `form:"token" json:"token" xml:"token"`
	UserID       *int   `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the DeviceInput media type instance.
func (mt *DeviceInput) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	return
}

// DeviceInput media type (public view)
//
// Identifier: application/vnd.app.device_input+json; view=public
type DeviceInputPublic struct {
	Active           bool       `form:"active" json:"active" xml:"active"`
	EndTime          *time.Time `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	ExpeditionID     int        `form:"expeditionId" json:"expeditionId" xml:"expeditionId"`
	ID               int        `form:"id" json:"id" xml:"id"`
	LastFeatureID    *int       `form:"lastFeatureId,omitempty" json:"lastFeatureId,omitempty" xml:"lastFeatureId,omitempty"`
	Name             string     `form:"name" json:"name" xml:"name"`
	NumberOfFeatures *int       `form:"numberOfFeatures,omitempty" json:"numberOfFeatures,omitempty" xml:"numberOfFeatures,omitempty"`
	StartTime        *time.Time `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	TeamID           *int       `form:"teamId,omitempty" json:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID           *int       `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the DeviceInputPublic media type instance.
func (mt *DeviceInputPublic) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DeviceInputCollection is the media type for an array of DeviceInput (default view)
//
// Identifier: application/vnd.app.device_input+json; type=collection; view=default
type DeviceInputCollection []*DeviceInput

// Validate validates the DeviceInputCollection media type instance.
func (mt DeviceInputCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceInputCollection is the media type for an array of DeviceInput (public view)
//
// Identifier: application/vnd.app.device_input+json; type=collection; view=public
type DeviceInputPublicCollection []*DeviceInputPublic

// Validate validates the DeviceInputPublicCollection media type instance.
func (mt DeviceInputPublicCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceInputs media type (default view)
//
// Identifier: application/vnd.app.device_inputs+json; view=default
type DeviceInputs struct {
	DeviceInputs DeviceInputCollection `form:"deviceInputs" json:"deviceInputs" xml:"deviceInputs"`
}

// Validate validates the DeviceInputs media type instance.
func (mt *DeviceInputs) Validate() (err error) {
	if mt.DeviceInputs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "deviceInputs"))
	}
	if err2 := mt.DeviceInputs.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DeviceSchema media type (default view)
//
// Identifier: application/vnd.app.device_schema+json; view=default
type DeviceSchema struct {
	Active     bool   `form:"active" json:"active" xml:"active"`
	DeviceID   int    `form:"deviceId" json:"deviceId" xml:"deviceId"`
	JSONSchema string `form:"jsonSchema" json:"jsonSchema" xml:"jsonSchema"`
	Key        string `form:"key" json:"key" xml:"key"`
	ProjectID  int    `form:"projectId" json:"projectId" xml:"projectId"`
	SchemaID   int    `form:"schemaId" json:"schemaId" xml:"schemaId"`
}

// Validate validates the DeviceSchema media type instance.
func (mt *DeviceSchema) Validate() (err error) {

	if mt.JSONSchema == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "jsonSchema"))
	}
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	return
}

// DeviceSchemaCollection is the media type for an array of DeviceSchema (default view)
//
// Identifier: application/vnd.app.device_schema+json; type=collection; view=default
type DeviceSchemaCollection []*DeviceSchema

// Validate validates the DeviceSchemaCollection media type instance.
func (mt DeviceSchemaCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceSchemas media type (default view)
//
// Identifier: application/vnd.app.device_schemas+json; view=default
type DeviceSchemas struct {
	Schemas DeviceSchemaCollection `form:"schemas" json:"schemas" xml:"schemas"`
}

// Validate validates the DeviceSchemas media type instance.
func (mt *DeviceSchemas) Validate() (err error) {
	if mt.Schemas == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "schemas"))
	}
	if err2 := mt.Schemas.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Expedition media type (default view)
//
// Identifier: application/vnd.app.expedition+json; view=default
type Expedition struct {
	Description string `form:"description" json:"description" xml:"description"`
	ID          int    `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" xml:"slug"`
}

// Validate validates the Expedition media type instance.
func (mt *Expedition) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// Expedition media type (detailed view)
//
// Identifier: application/vnd.app.expedition+json; view=detailed
type ExpeditionDetailed struct {
	Description      string     `form:"description" json:"description" xml:"description"`
	EndTime          *time.Time `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	ID               int        `form:"id" json:"id" xml:"id"`
	LastFeatureID    *int       `form:"lastFeatureId,omitempty" json:"lastFeatureId,omitempty" xml:"lastFeatureId,omitempty"`
	Name             string     `form:"name" json:"name" xml:"name"`
	NumberOfFeatures *int       `form:"numberOfFeatures,omitempty" json:"numberOfFeatures,omitempty" xml:"numberOfFeatures,omitempty"`
	Slug             string     `form:"slug" json:"slug" xml:"slug"`
	StartTime        *time.Time `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
}

// Validate validates the ExpeditionDetailed media type instance.
func (mt *ExpeditionDetailed) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// ExpeditionCollection is the media type for an array of Expedition (default view)
//
// Identifier: application/vnd.app.expedition+json; type=collection; view=default
type ExpeditionCollection []*Expedition

// Validate validates the ExpeditionCollection media type instance.
func (mt ExpeditionCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ExpeditionCollection is the media type for an array of Expedition (detailed view)
//
// Identifier: application/vnd.app.expedition+json; type=collection; view=detailed
type ExpeditionDetailedCollection []*ExpeditionDetailed

// Validate validates the ExpeditionDetailedCollection media type instance.
func (mt ExpeditionDetailedCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Expeditions media type (default view)
//
// Identifier: application/vnd.app.expeditions+json; view=default
type Expeditions struct {
	Expeditions ExpeditionCollection `form:"expeditions" json:"expeditions" xml:"expeditions"`
}

// Validate validates the Expeditions media type instance.
func (mt *Expeditions) Validate() (err error) {
	if mt.Expeditions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "expeditions"))
	}
	if err2 := mt.Expeditions.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// GeoJSON media type (default view)
//
// Identifier: application/vnd.app.geojson+json; view=default
type GeoJSON struct {
	Features GeoJSONFeatureCollection `form:"features" json:"features" xml:"features"`
	Type     string                   `form:"type" json:"type" xml:"type"`
}

// Validate validates the GeoJSON media type instance.
func (mt *GeoJSON) Validate() (err error) {
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	if mt.Features == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "features"))
	}
	if err2 := mt.Features.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// GeoJSONFeature media type (default view)
//
// Identifier: application/vnd.app.geojson-feature+json; view=default
type GeoJSONFeature struct {
	Geometry   *GeoJSONGeometry       `form:"geometry" json:"geometry" xml:"geometry"`
	Properties map[string]interface{} `form:"properties" json:"properties" xml:"properties"`
	Type       string                 `form:"type" json:"type" xml:"type"`
}

// Validate validates the GeoJSONFeature media type instance.
func (mt *GeoJSONFeature) Validate() (err error) {
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	if mt.Geometry == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "geometry"))
	}
	if mt.Properties == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "properties"))
	}
	if mt.Geometry != nil {
		if err2 := mt.Geometry.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// GeoJSONFeatureCollection is the media type for an array of GeoJSONFeature (default view)
//
// Identifier: application/vnd.app.geojson-feature+json; type=collection; view=default
type GeoJSONFeatureCollection []*GeoJSONFeature

// Validate validates the GeoJSONFeatureCollection media type instance.
func (mt GeoJSONFeatureCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GeoJSONGeometry media type (default view)
//
// Identifier: application/vnd.app.geojson-geometry+json; view=default
type GeoJSONGeometry struct {
	Coordinates []float64 `form:"coordinates" json:"coordinates" xml:"coordinates"`
	Type        string    `form:"type" json:"type" xml:"type"`
}

// Validate validates the GeoJSONGeometry media type instance.
func (mt *GeoJSONGeometry) Validate() (err error) {
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	if mt.Coordinates == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "coordinates"))
	}
	return
}

// Input media type (default view)
//
// Identifier: application/vnd.app.input+json; view=default
type Input struct {
	Active       *bool  `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" xml:"id"`
	Name         string `form:"name" json:"name" xml:"name"`
	TeamID       *int   `form:"teamId,omitempty" json:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID       *int   `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the Input media type instance.
func (mt *Input) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// InputToken media type (default view)
//
// Identifier: application/vnd.app.input_token+json; view=default
type InputToken struct {
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" xml:"id"`
	Token        string `form:"token" json:"token" xml:"token"`
}

// Validate validates the InputToken media type instance.
func (mt *InputToken) Validate() (err error) {

	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}

	return
}

// InputTokenCollection is the media type for an array of InputToken (default view)
//
// Identifier: application/vnd.app.input_token+json; type=collection; view=default
type InputTokenCollection []*InputToken

// Validate validates the InputTokenCollection media type instance.
func (mt InputTokenCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// InputTokens media type (default view)
//
// Identifier: application/vnd.app.input_tokens+json; view=default
type InputTokens struct {
	InputTokens InputTokenCollection `form:"inputTokens" json:"inputTokens" xml:"inputTokens"`
}

// Validate validates the InputTokens media type instance.
func (mt *InputTokens) Validate() (err error) {
	if mt.InputTokens == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "inputTokens"))
	}
	if err2 := mt.InputTokens.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Inputs media type (default view)
//
// Identifier: application/vnd.app.inputs+json; view=default
type Inputs struct {
	DeviceInputs         DeviceInputCollection         `form:"deviceInputs,omitempty" json:"deviceInputs,omitempty" xml:"deviceInputs,omitempty"`
	TwitterAccountInputs TwitterAccountInputCollection `form:"twitterAccountInputs,omitempty" json:"twitterAccountInputs,omitempty" xml:"twitterAccountInputs,omitempty"`
}

// Validate validates the Inputs media type instance.
func (mt *Inputs) Validate() (err error) {
	if err2 := mt.DeviceInputs.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.TwitterAccountInputs.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Location media type (default view)
//
// Identifier: application/vnd.app.location+json; view=default
type Location struct {
	Location string `form:"location" json:"location" xml:"location"`
}

// Validate validates the Location media type instance.
func (mt *Location) Validate() (err error) {
	if mt.Location == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}
	if err2 := goa.ValidateFormat(goa.FormatURI, mt.Location); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.location`, mt.Location, goa.FormatURI, err2))
	}
	return
}

// TeamMember media type (default view)
//
// Identifier: application/vnd.app.member+json; view=default
type TeamMember struct {
	Role   string `form:"role" json:"role" xml:"role"`
	TeamID int    `form:"teamId" json:"teamId" xml:"teamId"`
	UserID int    `form:"userId" json:"userId" xml:"userId"`
}

// Validate validates the TeamMember media type instance.
func (mt *TeamMember) Validate() (err error) {

	if mt.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "role"))
	}
	return
}

// TeamMemberCollection is the media type for an array of TeamMember (default view)
//
// Identifier: application/vnd.app.member+json; type=collection; view=default
type TeamMemberCollection []*TeamMember

// Validate validates the TeamMemberCollection media type instance.
func (mt TeamMemberCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// TeamMembers media type (default view)
//
// Identifier: application/vnd.app.members+json; view=default
type TeamMembers struct {
	Members TeamMemberCollection `form:"members" json:"members" xml:"members"`
}

// Validate validates the TeamMembers media type instance.
func (mt *TeamMembers) Validate() (err error) {
	if mt.Members == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "members"))
	}
	if err2 := mt.Members.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// PagedGeoJSON media type (default view)
//
// Identifier: application/vnd.app.paged-geojson+json; view=default
type PagedGeoJSON struct {
	Geo         *GeoJSON `form:"geo" json:"geo" xml:"geo"`
	HasMore     bool     `form:"hasMore" json:"hasMore" xml:"hasMore"`
	NextURL     string   `form:"nextUrl" json:"nextUrl" xml:"nextUrl"`
	PreviousURL *string  `form:"previousUrl,omitempty" json:"previousUrl,omitempty" xml:"previousUrl,omitempty"`
}

// Validate validates the PagedGeoJSON media type instance.
func (mt *PagedGeoJSON) Validate() (err error) {
	if mt.NextURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "nextUrl"))
	}
	if mt.Geo == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "geo"))
	}

	if mt.Geo != nil {
		if err2 := mt.Geo.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Project media type (default view)
//
// Identifier: application/vnd.app.project+json; view=default
type Project struct {
	Description string `form:"description" json:"description" xml:"description"`
	ID          int    `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" xml:"slug"`
}

// Validate validates the Project media type instance.
func (mt *Project) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// ProjectCollection is the media type for an array of Project (default view)
//
// Identifier: application/vnd.app.project+json; type=collection; view=default
type ProjectCollection []*Project

// Validate validates the ProjectCollection media type instance.
func (mt ProjectCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Projects media type (default view)
//
// Identifier: application/vnd.app.projects+json; view=default
type Projects struct {
	Projects ProjectCollection `form:"projects" json:"projects" xml:"projects"`
}

// Validate validates the Projects media type instance.
func (mt *Projects) Validate() (err error) {
	if mt.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "projects"))
	}
	if err2 := mt.Projects.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Team media type (default view)
//
// Identifier: application/vnd.app.team+json; view=default
type Team struct {
	Description string `form:"description" json:"description" xml:"description"`
	ID          int    `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" xml:"slug"`
}

// Validate validates the Team media type instance.
func (mt *Team) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`\S`, mt.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, mt.Name, `\S`))
	}
	if utf8.RuneCountInString(mt.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 256, false))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// TeamCollection is the media type for an array of Team (default view)
//
// Identifier: application/vnd.app.team+json; type=collection; view=default
type TeamCollection []*Team

// Validate validates the TeamCollection media type instance.
func (mt TeamCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Teams media type (default view)
//
// Identifier: application/vnd.app.teams+json; view=default
type Teams struct {
	Teams TeamCollection `form:"teams" json:"teams" xml:"teams"`
}

// Validate validates the Teams media type instance.
func (mt *Teams) Validate() (err error) {
	if mt.Teams == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "teams"))
	}
	if err2 := mt.Teams.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// TwitterAccountInput media type (default view)
//
// Identifier: application/vnd.app.twitter_account_input+json; view=default
type TwitterAccountInput struct {
	ExpeditionID     int    `form:"expeditionId" json:"expeditionId" xml:"expeditionId"`
	ID               int    `form:"id" json:"id" xml:"id"`
	Name             string `form:"name" json:"name" xml:"name"`
	ScreenName       string `form:"screenName" json:"screenName" xml:"screenName"`
	TeamID           *int   `form:"teamId,omitempty" json:"teamId,omitempty" xml:"teamId,omitempty"`
	TwitterAccountID int    `form:"twitterAccountId" json:"twitterAccountId" xml:"twitterAccountId"`
	UserID           *int   `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the TwitterAccountInput media type instance.
func (mt *TwitterAccountInput) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.ScreenName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "screenName"))
	}
	return
}

// TwitterAccountInputCollection is the media type for an array of TwitterAccountInput (default view)
//
// Identifier: application/vnd.app.twitter_account_input+json; type=collection; view=default
type TwitterAccountInputCollection []*TwitterAccountInput

// Validate validates the TwitterAccountInputCollection media type instance.
func (mt TwitterAccountInputCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// TwitterAccountInputs media type (default view)
//
// Identifier: application/vnd.app.twitter_account_intputs+json; view=default
type TwitterAccountInputs struct {
	TwitterAccountInputs TwitterAccountInputCollection `form:"twitterAccountInputs" json:"twitterAccountInputs" xml:"twitterAccountInputs"`
}

// Validate validates the TwitterAccountInputs media type instance.
func (mt *TwitterAccountInputs) Validate() (err error) {
	if mt.TwitterAccountInputs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "twitterAccountInputs"))
	}
	if err2 := mt.TwitterAccountInputs.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// User media type (default view)
//
// Identifier: application/vnd.app.user+json; view=default
type User struct {
	Bio   string `form:"bio" json:"bio" xml:"bio"`
	Email string `form:"email" json:"email" xml:"email"`
	ID    int    `form:"id" json:"id" xml:"id"`
	Name  string `form:"name" json:"name" xml:"name"`
	// Username
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.Bio == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "bio"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, mt.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, mt.Name, `\S`))
	}
	if utf8.RuneCountInString(mt.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 256, false))
	}
	if ok := goa.ValidatePattern(`^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`, mt.Username); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.username`, mt.Username, `^[\dA-Za-z]+(?:-[\dA-Za-z]+)*$`))
	}
	if utf8.RuneCountInString(mt.Username) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, mt.Username, utf8.RuneCountInString(mt.Username), 40, false))
	}
	return
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.app.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Users media type (default view)
//
// Identifier: application/vnd.app.users+json; view=default
type Users struct {
	Users UserCollection `form:"users" json:"users" xml:"users"`
}

// Validate validates the Users media type instance.
func (mt *Users) Validate() (err error) {
	if mt.Users == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "users"))
	}
	if err2 := mt.Users.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}
