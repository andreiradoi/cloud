// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Media Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// DeviceDataRecordsResponse media type (default view)
//
// Identifier: application/vnd.app.device.data+json; view=default
type DeviceDataRecordsResponse struct {
	Data DeviceDataRecordCollection `form:"data" json:"data" yaml:"data" xml:"data"`
	Meta DeviceMetaRecordCollection `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
}

// Validate validates the DeviceDataRecordsResponse media type instance.
func (mt *DeviceDataRecordsResponse) Validate() (err error) {
	if mt.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "meta"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if err2 := mt.Data.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.Meta.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DeviceDataRecord media type (default view)
//
// Identifier: application/vnd.app.device.data.record+json; view=default
type DeviceDataRecord struct {
	Data     map[string]interface{} `form:"data" json:"data" yaml:"data" xml:"data"`
	ID       int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Location []float64              `form:"location" json:"location" yaml:"location" xml:"location"`
	Meta     int                    `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Record   int                    `form:"record" json:"record" yaml:"record" xml:"record"`
	Time     time.Time              `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the DeviceDataRecord media type instance.
func (mt *DeviceDataRecord) Validate() (err error) {

	if mt.Location == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceDataRecordCollection is the media type for an array of DeviceDataRecord (default view)
//
// Identifier: application/vnd.app.device.data.record+json; type=collection; view=default
type DeviceDataRecordCollection []*DeviceDataRecord

// Validate validates the DeviceDataRecordCollection media type instance.
func (mt DeviceDataRecordCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceDataSummary media type (default view)
//
// Identifier: application/vnd.app.device.data.summary+json; view=default
type DeviceDataSummary struct {
	First int `form:"first" json:"first" yaml:"first" xml:"first"`
	Last  int `form:"last" json:"last" yaml:"last" xml:"last"`
	Size  int `form:"size" json:"size" yaml:"size" xml:"size"`
}

// Validate validates the DeviceDataSummary media type instance.
func (mt *DeviceDataSummary) Validate() (err error) {

	return
}

// DeviceMetaRecord media type (default view)
//
// Identifier: application/vnd.app.device.meta.record+json; view=default
type DeviceMetaRecord struct {
	Data   map[string]interface{} `form:"data" json:"data" yaml:"data" xml:"data"`
	ID     int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Record int                    `form:"record" json:"record" yaml:"record" xml:"record"`
	Time   time.Time              `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the DeviceMetaRecord media type instance.
func (mt *DeviceMetaRecord) Validate() (err error) {

	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceMetaRecordCollection is the media type for an array of DeviceMetaRecord (default view)
//
// Identifier: application/vnd.app.device.meta.record+json; type=collection; view=default
type DeviceMetaRecordCollection []*DeviceMetaRecord

// Validate validates the DeviceMetaRecordCollection media type instance.
func (mt DeviceMetaRecordCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceMetaSummary media type (default view)
//
// Identifier: application/vnd.app.device.meta.summary+json; view=default
type DeviceMetaSummary struct {
	First int `form:"first" json:"first" yaml:"first" xml:"first"`
	Last  int `form:"last" json:"last" yaml:"last" xml:"last"`
	Size  int `form:"size" json:"size" yaml:"size" xml:"size"`
}

// Validate validates the DeviceMetaSummary media type instance.
func (mt *DeviceMetaSummary) Validate() (err error) {

	return
}

// DeviceProvisionSummary media type (default view)
//
// Identifier: application/vnd.app.device.provision.summary+json; view=default
type DeviceProvisionSummary struct {
	Created    time.Time          `form:"created" json:"created" yaml:"created" xml:"created"`
	Data       *DeviceDataSummary `form:"data" json:"data" yaml:"data" xml:"data"`
	Generation string             `form:"generation" json:"generation" yaml:"generation" xml:"generation"`
	Meta       *DeviceMetaSummary `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Updated    time.Time          `form:"updated" json:"updated" yaml:"updated" xml:"updated"`
}

// Validate validates the DeviceProvisionSummary media type instance.
func (mt *DeviceProvisionSummary) Validate() (err error) {
	if mt.Generation == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "generation"))
	}

	if mt.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "meta"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceProvisionSummaryCollection is the media type for an array of DeviceProvisionSummary (default view)
//
// Identifier: application/vnd.app.device.provision.summary+json; type=collection; view=default
type DeviceProvisionSummaryCollection []*DeviceProvisionSummary

// Validate validates the DeviceProvisionSummaryCollection media type instance.
func (mt DeviceProvisionSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceDataSummaryResponse media type (default view)
//
// Identifier: application/vnd.app.device.summary+json; view=default
type DeviceDataSummaryResponse struct {
	Provisions DeviceProvisionSummaryCollection `form:"provisions" json:"provisions" yaml:"provisions" xml:"provisions"`
}

// Validate validates the DeviceDataSummaryResponse media type instance.
func (mt *DeviceDataSummaryResponse) Validate() (err error) {
	if mt.Provisions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "provisions"))
	}
	if err2 := mt.Provisions.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// FirmwareSummary media type (default view)
//
// Identifier: application/vnd.app.firmware+json; view=default
type FirmwareSummary struct {
	BuildNumber int                    `form:"buildNumber" json:"buildNumber" yaml:"buildNumber" xml:"buildNumber"`
	BuildTime   int                    `form:"buildTime" json:"buildTime" yaml:"buildTime" xml:"buildTime"`
	Etag        string                 `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	ID          int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Meta        map[string]interface{} `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Module      string                 `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile     string                 `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	Time        time.Time              `form:"time" json:"time" yaml:"time" xml:"time"`
	URL         string                 `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the FirmwareSummary media type instance.
func (mt *FirmwareSummary) Validate() (err error) {

	if mt.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "etag"))
	}
	if mt.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "module"))
	}
	if mt.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "profile"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	if mt.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "meta"))
	}

	return
}

// FirmwareSummaryCollection is the media type for an array of FirmwareSummary (default view)
//
// Identifier: application/vnd.app.firmware+json; type=collection; view=default
type FirmwareSummaryCollection []*FirmwareSummary

// Validate validates the FirmwareSummaryCollection media type instance.
func (mt FirmwareSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Firmwares media type (default view)
//
// Identifier: application/vnd.app.firmwares+json; view=default
type Firmwares struct {
	Firmwares FirmwareSummaryCollection `form:"firmwares" json:"firmwares" yaml:"firmwares" xml:"firmwares"`
}

// Validate validates the Firmwares media type instance.
func (mt *Firmwares) Validate() (err error) {
	if mt.Firmwares == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "firmwares"))
	}
	if err2 := mt.Firmwares.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Location media type (default view)
//
// Identifier: application/vnd.app.location+json; view=default
type Location struct {
	Location string `form:"location" json:"location" yaml:"location" xml:"location"`
}

// Validate validates the Location media type instance.
func (mt *Location) Validate() (err error) {
	if mt.Location == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}
	if err2 := goa.ValidateFormat(goa.FormatURI, mt.Location); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.location`, mt.Location, goa.FormatURI, err2))
	}
	return
}

// MediaReferenceResponse media type (default view)
//
// Identifier: application/vnd.app.media+json; view=default
type MediaReferenceResponse struct {
	ID  int    `form:"id" json:"id" yaml:"id" xml:"id"`
	URL string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the MediaReferenceResponse media type instance.
func (mt *MediaReferenceResponse) Validate() (err error) {

	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}
