// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Media Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// ProjectAdministrator media type (default view)
//
// Identifier: application/vnd.app.administrator+json; view=default
type ProjectAdministrator struct {
	ProjectID int `form:"projectId" json:"projectId" yaml:"projectId" xml:"projectId"`
	UserID    int `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// Validate validates the ProjectAdministrator media type instance.
func (mt *ProjectAdministrator) Validate() (err error) {

	return
}

// ProjectAdministratorCollection is the media type for an array of ProjectAdministrator (default view)
//
// Identifier: application/vnd.app.administrator+json; type=collection; view=default
type ProjectAdministratorCollection []*ProjectAdministrator

// Validate validates the ProjectAdministratorCollection media type instance.
func (mt ProjectAdministratorCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ProjectAdministrators media type (default view)
//
// Identifier: application/vnd.app.administrators+json; view=default
type ProjectAdministrators struct {
	Administrators ProjectAdministratorCollection `form:"administrators" json:"administrators" yaml:"administrators" xml:"administrators"`
}

// Validate validates the ProjectAdministrators media type instance.
func (mt *ProjectAdministrators) Validate() (err error) {
	if mt.Administrators == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "administrators"))
	}
	return
}

// ClusterGeometrySummary media type (default view)
//
// Identifier: application/vnd.app.cluster_geometry_summary+json; view=default
type ClusterGeometrySummary struct {
	Geometry [][]float64 `form:"geometry" json:"geometry" yaml:"geometry" xml:"geometry"`
	ID       int         `form:"id" json:"id" yaml:"id" xml:"id"`
	SourceID int         `form:"sourceId" json:"sourceId" yaml:"sourceId" xml:"sourceId"`
}

// Validate validates the ClusterGeometrySummary media type instance.
func (mt *ClusterGeometrySummary) Validate() (err error) {

	if mt.Geometry == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "geometry"))
	}
	return
}

// DeviceDataRecordsResponse media type (default view)
//
// Identifier: application/vnd.app.device.data+json; view=default
type DeviceDataRecordsResponse struct {
	Data DeviceDataRecordCollection `form:"data" json:"data" yaml:"data" xml:"data"`
	Meta DeviceMetaRecordCollection `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
}

// Validate validates the DeviceDataRecordsResponse media type instance.
func (mt *DeviceDataRecordsResponse) Validate() (err error) {
	if mt.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "meta"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if err2 := mt.Data.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.Meta.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DeviceDataRecord media type (default view)
//
// Identifier: application/vnd.app.device.data.record+json; view=default
type DeviceDataRecord struct {
	Data     map[string]interface{} `form:"data" json:"data" yaml:"data" xml:"data"`
	ID       int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Location []float64              `form:"location" json:"location" yaml:"location" xml:"location"`
	Meta     int                    `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Record   int                    `form:"record" json:"record" yaml:"record" xml:"record"`
	Time     time.Time              `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the DeviceDataRecord media type instance.
func (mt *DeviceDataRecord) Validate() (err error) {

	if mt.Location == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceDataRecordCollection is the media type for an array of DeviceDataRecord (default view)
//
// Identifier: application/vnd.app.device.data.record+json; type=collection; view=default
type DeviceDataRecordCollection []*DeviceDataRecord

// Validate validates the DeviceDataRecordCollection media type instance.
func (mt DeviceDataRecordCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceDataSummary media type (default view)
//
// Identifier: application/vnd.app.device.data.summary+json; view=default
type DeviceDataSummary struct {
	First int `form:"first" json:"first" yaml:"first" xml:"first"`
	Last  int `form:"last" json:"last" yaml:"last" xml:"last"`
	Size  int `form:"size" json:"size" yaml:"size" xml:"size"`
}

// Validate validates the DeviceDataSummary media type instance.
func (mt *DeviceDataSummary) Validate() (err error) {

	return
}

// JSONDataResponse media type (default view)
//
// Identifier: application/vnd.app.device.json.data+json; view=default
type JSONDataResponse struct {
	Versions []*JSONDataVersion `form:"versions" json:"versions" yaml:"versions" xml:"versions"`
}

// Validate validates the JSONDataResponse media type instance.
func (mt *JSONDataResponse) Validate() (err error) {
	if mt.Versions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "versions"))
	}
	for _, e := range mt.Versions {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// JSONDataSummaryResponse media type (default view)
//
// Identifier: application/vnd.app.device.json.data.summary+json; view=default
type JSONDataSummaryResponse struct {
	Data       []*JSONDataRow        `form:"data" json:"data" yaml:"data" xml:"data"`
	Modules    []*JSONDataMetaModule `form:"modules" json:"modules" yaml:"modules" xml:"modules"`
	Statistics *JSONDataStatistics   `form:"statistics" json:"statistics" yaml:"statistics" xml:"statistics"`
}

// Validate validates the JSONDataSummaryResponse media type instance.
func (mt *JSONDataSummaryResponse) Validate() (err error) {
	if mt.Modules == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "modules"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Statistics == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "statistics"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range mt.Modules {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceMetaRecord media type (default view)
//
// Identifier: application/vnd.app.device.meta.record+json; view=default
type DeviceMetaRecord struct {
	Data   map[string]interface{} `form:"data" json:"data" yaml:"data" xml:"data"`
	ID     int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Record int                    `form:"record" json:"record" yaml:"record" xml:"record"`
	Time   time.Time              `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the DeviceMetaRecord media type instance.
func (mt *DeviceMetaRecord) Validate() (err error) {

	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceMetaRecordCollection is the media type for an array of DeviceMetaRecord (default view)
//
// Identifier: application/vnd.app.device.meta.record+json; type=collection; view=default
type DeviceMetaRecordCollection []*DeviceMetaRecord

// Validate validates the DeviceMetaRecordCollection media type instance.
func (mt DeviceMetaRecordCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceMetaSummary media type (default view)
//
// Identifier: application/vnd.app.device.meta.summary+json; view=default
type DeviceMetaSummary struct {
	First int `form:"first" json:"first" yaml:"first" xml:"first"`
	Last  int `form:"last" json:"last" yaml:"last" xml:"last"`
	Size  int `form:"size" json:"size" yaml:"size" xml:"size"`
}

// Validate validates the DeviceMetaSummary media type instance.
func (mt *DeviceMetaSummary) Validate() (err error) {

	return
}

// DeviceProvisionSummary media type (default view)
//
// Identifier: application/vnd.app.device.provision.summary+json; view=default
type DeviceProvisionSummary struct {
	Created    time.Time          `form:"created" json:"created" yaml:"created" xml:"created"`
	Data       *DeviceDataSummary `form:"data" json:"data" yaml:"data" xml:"data"`
	Generation string             `form:"generation" json:"generation" yaml:"generation" xml:"generation"`
	Meta       *DeviceMetaSummary `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Updated    time.Time          `form:"updated" json:"updated" yaml:"updated" xml:"updated"`
}

// Validate validates the DeviceProvisionSummary media type instance.
func (mt *DeviceProvisionSummary) Validate() (err error) {
	if mt.Generation == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "generation"))
	}

	if mt.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "meta"))
	}
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DeviceProvisionSummaryCollection is the media type for an array of DeviceProvisionSummary (default view)
//
// Identifier: application/vnd.app.device.provision.summary+json; type=collection; view=default
type DeviceProvisionSummaryCollection []*DeviceProvisionSummary

// Validate validates the DeviceProvisionSummaryCollection media type instance.
func (mt DeviceProvisionSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceDataSummaryResponse media type (default view)
//
// Identifier: application/vnd.app.device.summary+json; view=default
type DeviceDataSummaryResponse struct {
	Provisions DeviceProvisionSummaryCollection `form:"provisions" json:"provisions" yaml:"provisions" xml:"provisions"`
}

// Validate validates the DeviceDataSummaryResponse media type instance.
func (mt *DeviceDataSummaryResponse) Validate() (err error) {
	if mt.Provisions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "provisions"))
	}
	if err2 := mt.Provisions.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DeviceSchema media type (default view)
//
// Identifier: application/vnd.app.device_schema+json; view=default
type DeviceSchema struct {
	Active     bool   `form:"active" json:"active" yaml:"active" xml:"active"`
	DeviceID   int    `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	JSONSchema string `form:"jsonSchema" json:"jsonSchema" yaml:"jsonSchema" xml:"jsonSchema"`
	Key        string `form:"key" json:"key" yaml:"key" xml:"key"`
	ProjectID  int    `form:"projectId" json:"projectId" yaml:"projectId" xml:"projectId"`
	SchemaID   int    `form:"schemaId" json:"schemaId" yaml:"schemaId" xml:"schemaId"`
}

// Validate validates the DeviceSchema media type instance.
func (mt *DeviceSchema) Validate() (err error) {

	if mt.JSONSchema == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "jsonSchema"))
	}
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	return
}

// DeviceSchemaCollection is the media type for an array of DeviceSchema (default view)
//
// Identifier: application/vnd.app.device_schema+json; type=collection; view=default
type DeviceSchemaCollection []*DeviceSchema

// Validate validates the DeviceSchemaCollection media type instance.
func (mt DeviceSchemaCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceSchemas media type (default view)
//
// Identifier: application/vnd.app.device_schemas+json; view=default
type DeviceSchemas struct {
	Schemas DeviceSchemaCollection `form:"schemas" json:"schemas" yaml:"schemas" xml:"schemas"`
}

// Validate validates the DeviceSchemas media type instance.
func (mt *DeviceSchemas) Validate() (err error) {
	if mt.Schemas == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "schemas"))
	}
	if err2 := mt.Schemas.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DeviceSource media type (default view)
//
// Identifier: application/vnd.app.device_source+json; view=default
type DeviceSource struct {
	Active       bool   `form:"active" json:"active" yaml:"active" xml:"active"`
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" yaml:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Key          string `form:"key" json:"key" yaml:"key" xml:"key"`
	Name         string `form:"name" json:"name" yaml:"name" xml:"name"`
	TeamID       *int   `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	Token        string `form:"token" json:"token" yaml:"token" xml:"token"`
	UserID       *int   `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the DeviceSource media type instance.
func (mt *DeviceSource) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	return
}

// DeviceSource media type (public view)
//
// Identifier: application/vnd.app.device_source+json; view=public
type DeviceSourcePublic struct {
	Active           bool        `form:"active" json:"active" yaml:"active" xml:"active"`
	Centroid         []float64   `form:"centroid,omitempty" json:"centroid,omitempty" yaml:"centroid,omitempty" xml:"centroid,omitempty"`
	EndTime          *time.Time  `form:"endTime,omitempty" json:"endTime,omitempty" yaml:"endTime,omitempty" xml:"endTime,omitempty"`
	Envelope         [][]float64 `form:"envelope,omitempty" json:"envelope,omitempty" yaml:"envelope,omitempty" xml:"envelope,omitempty"`
	ExpeditionID     int         `form:"expeditionId" json:"expeditionId" yaml:"expeditionId" xml:"expeditionId"`
	ID               int         `form:"id" json:"id" yaml:"id" xml:"id"`
	Name             string      `form:"name" json:"name" yaml:"name" xml:"name"`
	NumberOfFeatures *int        `form:"numberOfFeatures,omitempty" json:"numberOfFeatures,omitempty" yaml:"numberOfFeatures,omitempty" xml:"numberOfFeatures,omitempty"`
	Radius           *float64    `form:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty" xml:"radius,omitempty"`
	StartTime        *time.Time  `form:"startTime,omitempty" json:"startTime,omitempty" yaml:"startTime,omitempty" xml:"startTime,omitempty"`
	TeamID           *int        `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID           *int        `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the DeviceSourcePublic media type instance.
func (mt *DeviceSourcePublic) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DeviceSourceCollection is the media type for an array of DeviceSource (default view)
//
// Identifier: application/vnd.app.device_source+json; type=collection; view=default
type DeviceSourceCollection []*DeviceSource

// Validate validates the DeviceSourceCollection media type instance.
func (mt DeviceSourceCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceSourceCollection is the media type for an array of DeviceSource (public view)
//
// Identifier: application/vnd.app.device_source+json; type=collection; view=public
type DeviceSourcePublicCollection []*DeviceSourcePublic

// Validate validates the DeviceSourcePublicCollection media type instance.
func (mt DeviceSourcePublicCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DeviceSources media type (default view)
//
// Identifier: application/vnd.app.device_sources+json; view=default
type DeviceSources struct {
	DeviceSources DeviceSourceCollection `form:"deviceSources" json:"deviceSources" yaml:"deviceSources" xml:"deviceSources"`
}

// Validate validates the DeviceSources media type instance.
func (mt *DeviceSources) Validate() (err error) {
	if mt.DeviceSources == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "deviceSources"))
	}
	if err2 := mt.DeviceSources.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Expedition media type (default view)
//
// Identifier: application/vnd.app.expedition+json; view=default
type Expedition struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	ID          int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the Expedition media type instance.
func (mt *Expedition) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// Expedition media type (detailed view)
//
// Identifier: application/vnd.app.expedition+json; view=detailed
type ExpeditionDetailed struct {
	Centroid         []float64  `form:"centroid,omitempty" json:"centroid,omitempty" yaml:"centroid,omitempty" xml:"centroid,omitempty"`
	Description      string     `form:"description" json:"description" yaml:"description" xml:"description"`
	EndTime          *time.Time `form:"endTime,omitempty" json:"endTime,omitempty" yaml:"endTime,omitempty" xml:"endTime,omitempty"`
	ID               int        `form:"id" json:"id" yaml:"id" xml:"id"`
	Name             string     `form:"name" json:"name" yaml:"name" xml:"name"`
	NumberOfFeatures *int       `form:"numberOfFeatures,omitempty" json:"numberOfFeatures,omitempty" yaml:"numberOfFeatures,omitempty" xml:"numberOfFeatures,omitempty"`
	Radius           *float64   `form:"radius,omitempty" json:"radius,omitempty" yaml:"radius,omitempty" xml:"radius,omitempty"`
	Slug             string     `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
	StartTime        *time.Time `form:"startTime,omitempty" json:"startTime,omitempty" yaml:"startTime,omitempty" xml:"startTime,omitempty"`
}

// Validate validates the ExpeditionDetailed media type instance.
func (mt *ExpeditionDetailed) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// ExpeditionCollection is the media type for an array of Expedition (default view)
//
// Identifier: application/vnd.app.expedition+json; type=collection; view=default
type ExpeditionCollection []*Expedition

// Validate validates the ExpeditionCollection media type instance.
func (mt ExpeditionCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ExpeditionCollection is the media type for an array of Expedition (detailed view)
//
// Identifier: application/vnd.app.expedition+json; type=collection; view=detailed
type ExpeditionDetailedCollection []*ExpeditionDetailed

// Validate validates the ExpeditionDetailedCollection media type instance.
func (mt ExpeditionDetailedCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Expeditions media type (default view)
//
// Identifier: application/vnd.app.expeditions+json; view=default
type Expeditions struct {
	Expeditions ExpeditionCollection `form:"expeditions" json:"expeditions" yaml:"expeditions" xml:"expeditions"`
}

// Validate validates the Expeditions media type instance.
func (mt *Expeditions) Validate() (err error) {
	if mt.Expeditions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "expeditions"))
	}
	if err2 := mt.Expeditions.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// FieldNoteMedia media type (default view)
//
// Identifier: application/vnd.app.field_note_media+json; view=default
type FieldNoteMedia struct {
	ContentType string    `form:"content_type" json:"content_type" yaml:"content_type" xml:"content_type"`
	Created     time.Time `form:"created" json:"created" yaml:"created" xml:"created"`
	ID          int       `form:"id" json:"id" yaml:"id" xml:"id"`
	URL         string    `form:"url" json:"url" yaml:"url" xml:"url"`
	UserID      int       `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the FieldNoteMedia media type instance.
func (mt *FieldNoteMedia) Validate() (err error) {

	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	if mt.ContentType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "content_type"))
	}
	return
}

// FieldNoteQueryResult media type (default view)
//
// Identifier: application/vnd.app.field_note_result+json; view=default
type FieldNoteQueryResult struct {
	CategoryKey      string    `form:"category_key" json:"category_key" yaml:"category_key" xml:"category_key"`
	Created          time.Time `form:"created" json:"created" yaml:"created" xml:"created"`
	Creator          string    `form:"creator" json:"creator" yaml:"creator" xml:"creator"`
	ID               int       `form:"id" json:"id" yaml:"id" xml:"id"`
	MediaContentType *string   `form:"media_content_type,omitempty" json:"media_content_type,omitempty" yaml:"media_content_type,omitempty" xml:"media_content_type,omitempty"`
	MediaID          *int      `form:"media_id,omitempty" json:"media_id,omitempty" yaml:"media_id,omitempty" xml:"media_id,omitempty"`
	MediaURL         *string   `form:"media_url,omitempty" json:"media_url,omitempty" yaml:"media_url,omitempty" xml:"media_url,omitempty"`
	Note             *string   `form:"note,omitempty" json:"note,omitempty" yaml:"note,omitempty" xml:"note,omitempty"`
	UserID           int       `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the FieldNoteQueryResult media type instance.
func (mt *FieldNoteQueryResult) Validate() (err error) {

	if mt.CategoryKey == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "category_key"))
	}
	if mt.Creator == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "creator"))
	}
	return
}

// FieldNoteQueryResultCollection is the media type for an array of FieldNoteQueryResult (default view)
//
// Identifier: application/vnd.app.field_note_result+json; type=collection; view=default
type FieldNoteQueryResultCollection []*FieldNoteQueryResult

// Validate validates the FieldNoteQueryResultCollection media type instance.
func (mt FieldNoteQueryResultCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// FieldNotes media type (default view)
//
// Identifier: application/vnd.app.field_notes+json; view=default
type FieldNotes struct {
	Notes FieldNoteQueryResultCollection `form:"notes" json:"notes" yaml:"notes" xml:"notes"`
}

// Validate validates the FieldNotes media type instance.
func (mt *FieldNotes) Validate() (err error) {
	if mt.Notes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "notes"))
	}
	if err2 := mt.Notes.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// FirmwareSummary media type (default view)
//
// Identifier: application/vnd.app.firmware+json; view=default
type FirmwareSummary struct {
	Etag    string    `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	ID      int       `form:"id" json:"id" yaml:"id" xml:"id"`
	Module  string    `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile string    `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	Time    time.Time `form:"time" json:"time" yaml:"time" xml:"time"`
	URL     string    `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the FirmwareSummary media type instance.
func (mt *FirmwareSummary) Validate() (err error) {

	if mt.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "etag"))
	}
	if mt.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "module"))
	}
	if mt.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "profile"))
	}
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}

// FirmwareSummaryCollection is the media type for an array of FirmwareSummary (default view)
//
// Identifier: application/vnd.app.firmware+json; type=collection; view=default
type FirmwareSummaryCollection []*FirmwareSummary

// Validate validates the FirmwareSummaryCollection media type instance.
func (mt FirmwareSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Firmwares media type (default view)
//
// Identifier: application/vnd.app.firmwares+json; view=default
type Firmwares struct {
	Firmwares FirmwareSummaryCollection `form:"firmwares" json:"firmwares" yaml:"firmwares" xml:"firmwares"`
}

// Validate validates the Firmwares media type instance.
func (mt *Firmwares) Validate() (err error) {
	if mt.Firmwares == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "firmwares"))
	}
	if err2 := mt.Firmwares.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// ClusterSummary media type (default view)
//
// Identifier: application/vnd.app.geometry_cluster_summary+json; view=default
type ClusterSummary struct {
	Centroid         []float64   `form:"centroid" json:"centroid" yaml:"centroid" xml:"centroid"`
	EndTime          time.Time   `form:"endTime" json:"endTime" yaml:"endTime" xml:"endTime"`
	Envelope         [][]float64 `form:"envelope,omitempty" json:"envelope,omitempty" yaml:"envelope,omitempty" xml:"envelope,omitempty"`
	ID               int         `form:"id" json:"id" yaml:"id" xml:"id"`
	NumberOfFeatures int         `form:"numberOfFeatures" json:"numberOfFeatures" yaml:"numberOfFeatures" xml:"numberOfFeatures"`
	Radius           float64     `form:"radius" json:"radius" yaml:"radius" xml:"radius"`
	SourceID         int         `form:"sourceId" json:"sourceId" yaml:"sourceId" xml:"sourceId"`
	StartTime        time.Time   `form:"startTime" json:"startTime" yaml:"startTime" xml:"startTime"`
}

// Validate validates the ClusterSummary media type instance.
func (mt *ClusterSummary) Validate() (err error) {

	if mt.Centroid == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "centroid"))
	}

	return
}

// ClusterSummaryCollection is the media type for an array of ClusterSummary (default view)
//
// Identifier: application/vnd.app.geometry_cluster_summary+json; type=collection; view=default
type ClusterSummaryCollection []*ClusterSummary

// Validate validates the ClusterSummaryCollection media type instance.
func (mt ClusterSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ImageRef media type (default view)
//
// Identifier: application/vnd.app.imageref+json; view=default
type ImageRef struct {
	URL string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the ImageRef media type instance.
func (mt *ImageRef) Validate() (err error) {
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}

// ImageRefCollection is the media type for an array of ImageRef (default view)
//
// Identifier: application/vnd.app.imageref+json; type=collection; view=default
type ImageRefCollection []*ImageRef

// Validate validates the ImageRefCollection media type instance.
func (mt ImageRefCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Location media type (default view)
//
// Identifier: application/vnd.app.location+json; view=default
type Location struct {
	Location string `form:"location" json:"location" yaml:"location" xml:"location"`
}

// Validate validates the Location media type instance.
func (mt *Location) Validate() (err error) {
	if mt.Location == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}
	if err2 := goa.ValidateFormat(goa.FormatURI, mt.Location); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.location`, mt.Location, goa.FormatURI, err2))
	}
	return
}

// MediaReferenceResponse media type (default view)
//
// Identifier: application/vnd.app.media+json; view=default
type MediaReferenceResponse struct {
	ID  int    `form:"id" json:"id" yaml:"id" xml:"id"`
	URL string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the MediaReferenceResponse media type instance.
func (mt *MediaReferenceResponse) Validate() (err error) {

	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}

// TeamMember media type (default view)
//
// Identifier: application/vnd.app.member+json; view=default
type TeamMember struct {
	Role   string `form:"role" json:"role" yaml:"role" xml:"role"`
	TeamID int    `form:"teamId" json:"teamId" yaml:"teamId" xml:"teamId"`
	UserID int    `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// Validate validates the TeamMember media type instance.
func (mt *TeamMember) Validate() (err error) {

	if mt.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "role"))
	}
	return
}

// TeamMemberCollection is the media type for an array of TeamMember (default view)
//
// Identifier: application/vnd.app.member+json; type=collection; view=default
type TeamMemberCollection []*TeamMember

// Validate validates the TeamMemberCollection media type instance.
func (mt TeamMemberCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// TeamMembers media type (default view)
//
// Identifier: application/vnd.app.members+json; view=default
type TeamMembers struct {
	Members TeamMemberCollection `form:"members" json:"members" yaml:"members" xml:"members"`
}

// Validate validates the TeamMembers media type instance.
func (mt *TeamMembers) Validate() (err error) {
	if mt.Members == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "members"))
	}
	if err2 := mt.Members.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Project media type (default view)
//
// Identifier: application/vnd.app.project+json; view=default
type Project struct {
	Description      string     `form:"description" json:"description" yaml:"description" xml:"description"`
	EndTime          *time.Time `form:"end_time,omitempty" json:"end_time,omitempty" yaml:"end_time,omitempty" xml:"end_time,omitempty"`
	Goal             string     `form:"goal" json:"goal" yaml:"goal" xml:"goal"`
	ID               int        `form:"id" json:"id" yaml:"id" xml:"id"`
	Location         string     `form:"location" json:"location" yaml:"location" xml:"location"`
	MediaContentType *string    `form:"media_content_type,omitempty" json:"media_content_type,omitempty" yaml:"media_content_type,omitempty" xml:"media_content_type,omitempty"`
	MediaURL         *string    `form:"media_url,omitempty" json:"media_url,omitempty" yaml:"media_url,omitempty" xml:"media_url,omitempty"`
	Name             string     `form:"name" json:"name" yaml:"name" xml:"name"`
	Private          bool       `form:"private" json:"private" yaml:"private" xml:"private"`
	Slug             string     `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
	StartTime        *time.Time `form:"start_time,omitempty" json:"start_time,omitempty" yaml:"start_time,omitempty" xml:"start_time,omitempty"`
	Tags             string     `form:"tags" json:"tags" yaml:"tags" xml:"tags"`
}

// Validate validates the Project media type instance.
func (mt *Project) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if mt.Goal == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "goal"))
	}
	if mt.Location == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "location"))
	}

	if mt.Tags == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "tags"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// ProjectCollection is the media type for an array of Project (default view)
//
// Identifier: application/vnd.app.project+json; type=collection; view=default
type ProjectCollection []*Project

// Validate validates the ProjectCollection media type instance.
func (mt ProjectCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Projects media type (default view)
//
// Identifier: application/vnd.app.projects+json; view=default
type Projects struct {
	Projects ProjectCollection `form:"projects" json:"projects" yaml:"projects" xml:"projects"`
}

// Validate validates the Projects media type instance.
func (mt *Projects) Validate() (err error) {
	if mt.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "projects"))
	}
	if err2 := mt.Projects.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// QueryData media type (default view)
//
// Identifier: application/vnd.app.queried+json; view=default
type QueryData struct {
	Series SeriesDataCollection `form:"series" json:"series" yaml:"series" xml:"series"`
}

// Validate validates the QueryData media type instance.
func (mt *QueryData) Validate() (err error) {
	if mt.Series == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "series"))
	}
	if err2 := mt.Series.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// ReadingSummary media type (default view)
//
// Identifier: application/vnd.app.reading_summary+json; view=default
type ReadingSummary struct {
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the ReadingSummary media type instance.
func (mt *ReadingSummary) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// ReadingSummaryCollection is the media type for an array of ReadingSummary (default view)
//
// Identifier: application/vnd.app.reading_summary+json; type=collection; view=default
type ReadingSummaryCollection []*ReadingSummary

// Validate validates the ReadingSummaryCollection media type instance.
func (mt ReadingSummaryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// SeriesData media type (default view)
//
// Identifier: application/vnd.app.series+json; view=default
type SeriesData struct {
	Name string        `form:"name" json:"name" yaml:"name" xml:"name"`
	Rows []interface{} `form:"rows" json:"rows" yaml:"rows" xml:"rows"`
}

// Validate validates the SeriesData media type instance.
func (mt *SeriesData) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Rows == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "rows"))
	}
	return
}

// SeriesDataCollection is the media type for an array of SeriesData (default view)
//
// Identifier: application/vnd.app.series+json; type=collection; view=default
type SeriesDataCollection []*SeriesData

// Validate validates the SeriesDataCollection media type instance.
func (mt SeriesDataCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Source media type (default view)
//
// Identifier: application/vnd.app.source+json; view=default
type Source struct {
	Active       *bool  `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" yaml:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Name         string `form:"name" json:"name" yaml:"name" xml:"name"`
	TeamID       *int   `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID       *int   `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the Source media type instance.
func (mt *Source) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// SourceSummary media type (default view)
//
// Identifier: application/vnd.app.source_summary+json; view=default
type SourceSummary struct {
	ID       int                      `form:"id" json:"id" yaml:"id" xml:"id"`
	Name     string                   `form:"name" json:"name" yaml:"name" xml:"name"`
	Readings ReadingSummaryCollection `form:"readings,omitempty" json:"readings,omitempty" yaml:"readings,omitempty" xml:"readings,omitempty"`
	Spatial  ClusterSummaryCollection `form:"spatial" json:"spatial" yaml:"spatial" xml:"spatial"`
	Temporal ClusterSummaryCollection `form:"temporal" json:"temporal" yaml:"temporal" xml:"temporal"`
}

// Validate validates the SourceSummary media type instance.
func (mt *SourceSummary) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Temporal == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "temporal"))
	}
	if mt.Spatial == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "spatial"))
	}
	if err2 := mt.Readings.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.Spatial.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.Temporal.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// SourceToken media type (default view)
//
// Identifier: application/vnd.app.source_token+json; view=default
type SourceToken struct {
	ExpeditionID int    `form:"expeditionId" json:"expeditionId" yaml:"expeditionId" xml:"expeditionId"`
	ID           int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Token        string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the SourceToken media type instance.
func (mt *SourceToken) Validate() (err error) {

	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}

	return
}

// SourceTokenCollection is the media type for an array of SourceToken (default view)
//
// Identifier: application/vnd.app.source_token+json; type=collection; view=default
type SourceTokenCollection []*SourceToken

// Validate validates the SourceTokenCollection media type instance.
func (mt SourceTokenCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// SourceTokens media type (default view)
//
// Identifier: application/vnd.app.source_tokens+json; view=default
type SourceTokens struct {
	SourceTokens SourceTokenCollection `form:"sourceTokens" json:"sourceTokens" yaml:"sourceTokens" xml:"sourceTokens"`
}

// Validate validates the SourceTokens media type instance.
func (mt *SourceTokens) Validate() (err error) {
	if mt.SourceTokens == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "sourceTokens"))
	}
	if err2 := mt.SourceTokens.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Sources media type (default view)
//
// Identifier: application/vnd.app.sources+json; view=default
type Sources struct {
	DeviceSources         DeviceSourceCollection         `form:"deviceSources,omitempty" json:"deviceSources,omitempty" yaml:"deviceSources,omitempty" xml:"deviceSources,omitempty"`
	TwitterAccountSources TwitterAccountSourceCollection `form:"twitterAccountSources,omitempty" json:"twitterAccountSources,omitempty" yaml:"twitterAccountSources,omitempty" xml:"twitterAccountSources,omitempty"`
}

// Validate validates the Sources media type instance.
func (mt *Sources) Validate() (err error) {
	if err2 := mt.DeviceSources.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.TwitterAccountSources.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Station media type (default view)
//
// Identifier: application/vnd.app.station+json; view=default
type Station struct {
	DeviceID    string                 `form:"device_id" json:"device_id" yaml:"device_id" xml:"device_id"`
	ID          int                    `form:"id" json:"id" yaml:"id" xml:"id"`
	Images      ImageRefCollection     `form:"images" json:"images" yaml:"images" xml:"images"`
	LastUploads LastUploadCollection   `form:"last_uploads,omitempty" json:"last_uploads,omitempty" yaml:"last_uploads,omitempty" xml:"last_uploads,omitempty"`
	Name        string                 `form:"name" json:"name" yaml:"name" xml:"name"`
	OwnerID     int                    `form:"owner_id" json:"owner_id" yaml:"owner_id" xml:"owner_id"`
	Photos      *StationPhotos         `form:"photos" json:"photos" yaml:"photos" xml:"photos"`
	ReadOnly    bool                   `form:"read_only" json:"read_only" yaml:"read_only" xml:"read_only"`
	StatusJSON  map[string]interface{} `form:"status_json" json:"status_json" yaml:"status_json" xml:"status_json"`
}

// Validate validates the Station media type instance.
func (mt *Station) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.DeviceID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "device_id"))
	}
	if mt.StatusJSON == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status_json"))
	}
	if mt.Images == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "images"))
	}
	if mt.Photos == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "photos"))
	}

	if err2 := mt.Images.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if err2 := mt.LastUploads.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if mt.Photos != nil {
		if err2 := mt.Photos.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// StationPhotos media type (default view)
//
// Identifier: application/vnd.app.station.photos+json; view=default
type StationPhotos struct {
	Small string `form:"small" json:"small" yaml:"small" xml:"small"`
}

// Validate validates the StationPhotos media type instance.
func (mt *StationPhotos) Validate() (err error) {
	if mt.Small == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "small"))
	}
	return
}

// StationCollection is the media type for an array of Station (default view)
//
// Identifier: application/vnd.app.station+json; type=collection; view=default
type StationCollection []*Station

// Validate validates the StationCollection media type instance.
func (mt StationCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// StationLog media type (default view)
//
// Identifier: application/vnd.app.stationlog+json; view=default
type StationLog struct {
	ID        int    `form:"ID" json:"ID" yaml:"ID" xml:"ID"`
	Body      string `form:"body" json:"body" yaml:"body" xml:"body"`
	StationID int    `form:"station_id" json:"station_id" yaml:"station_id" xml:"station_id"`
	Timestamp string `form:"timestamp" json:"timestamp" yaml:"timestamp" xml:"timestamp"`
}

// Validate validates the StationLog media type instance.
func (mt *StationLog) Validate() (err error) {

	if mt.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}
	if mt.Timestamp == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "timestamp"))
	}
	return
}

// StationLogCollection is the media type for an array of StationLog (default view)
//
// Identifier: application/vnd.app.stationlog+json; type=collection; view=default
type StationLogCollection []*StationLog

// Validate validates the StationLogCollection media type instance.
func (mt StationLogCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// StationLogs media type (default view)
//
// Identifier: application/vnd.app.stationlogs+json; view=default
type StationLogs struct {
	StationLogs StationLogCollection `form:"station_logs" json:"station_logs" yaml:"station_logs" xml:"station_logs"`
}

// Validate validates the StationLogs media type instance.
func (mt *StationLogs) Validate() (err error) {
	if mt.StationLogs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "station_logs"))
	}
	if err2 := mt.StationLogs.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Stations media type (default view)
//
// Identifier: application/vnd.app.stations+json; view=default
type Stations struct {
	Stations StationCollection `form:"stations" json:"stations" yaml:"stations" xml:"stations"`
}

// Validate validates the Stations media type instance.
func (mt *Stations) Validate() (err error) {
	if mt.Stations == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "stations"))
	}
	if err2 := mt.Stations.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// Team media type (default view)
//
// Identifier: application/vnd.app.team+json; view=default
type Team struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	ID          int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the Team media type instance.
func (mt *Team) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "slug"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if ok := goa.ValidatePattern(`\S`, mt.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, mt.Name, `\S`))
	}
	if utf8.RuneCountInString(mt.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 256, false))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, mt.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.slug`, mt.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(mt.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.slug`, mt.Slug, utf8.RuneCountInString(mt.Slug), 40, false))
	}
	return
}

// TeamCollection is the media type for an array of Team (default view)
//
// Identifier: application/vnd.app.team+json; type=collection; view=default
type TeamCollection []*Team

// Validate validates the TeamCollection media type instance.
func (mt TeamCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Teams media type (default view)
//
// Identifier: application/vnd.app.teams+json; view=default
type Teams struct {
	Teams TeamCollection `form:"teams" json:"teams" yaml:"teams" xml:"teams"`
}

// Validate validates the Teams media type instance.
func (mt *Teams) Validate() (err error) {
	if mt.Teams == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "teams"))
	}
	if err2 := mt.Teams.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// TwitterAccountSources media type (default view)
//
// Identifier: application/vnd.app.twitter_account_intputs+json; view=default
type TwitterAccountSources struct {
	TwitterAccountSources TwitterAccountSourceCollection `form:"twitterAccountSources" json:"twitterAccountSources" yaml:"twitterAccountSources" xml:"twitterAccountSources"`
}

// Validate validates the TwitterAccountSources media type instance.
func (mt *TwitterAccountSources) Validate() (err error) {
	if mt.TwitterAccountSources == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "twitterAccountSources"))
	}
	if err2 := mt.TwitterAccountSources.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// TwitterAccountSource media type (default view)
//
// Identifier: application/vnd.app.twitter_account_source+json; view=default
type TwitterAccountSource struct {
	ExpeditionID     int    `form:"expeditionId" json:"expeditionId" yaml:"expeditionId" xml:"expeditionId"`
	ID               int    `form:"id" json:"id" yaml:"id" xml:"id"`
	Name             string `form:"name" json:"name" yaml:"name" xml:"name"`
	ScreenName       string `form:"screenName" json:"screenName" yaml:"screenName" xml:"screenName"`
	TeamID           *int   `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	TwitterAccountID int    `form:"twitterAccountId" json:"twitterAccountId" yaml:"twitterAccountId" xml:"twitterAccountId"`
	UserID           *int   `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the TwitterAccountSource media type instance.
func (mt *TwitterAccountSource) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.ScreenName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "screenName"))
	}
	return
}

// TwitterAccountSourceCollection is the media type for an array of TwitterAccountSource (default view)
//
// Identifier: application/vnd.app.twitter_account_source+json; type=collection; view=default
type TwitterAccountSourceCollection []*TwitterAccountSource

// Validate validates the TwitterAccountSourceCollection media type instance.
func (mt TwitterAccountSourceCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// LastUpload media type (default view)
//
// Identifier: application/vnd.app.upload+json; view=default
type LastUpload struct {
	Blocks   []int     `form:"blocks" json:"blocks" yaml:"blocks" xml:"blocks"`
	ID       int       `form:"id" json:"id" yaml:"id" xml:"id"`
	Size     int       `form:"size" json:"size" yaml:"size" xml:"size"`
	Time     time.Time `form:"time" json:"time" yaml:"time" xml:"time"`
	Type     string    `form:"type" json:"type" yaml:"type" xml:"type"`
	UploadID string    `form:"upload_id" json:"upload_id" yaml:"upload_id" xml:"upload_id"`
	URL      string    `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the LastUpload media type instance.
func (mt *LastUpload) Validate() (err error) {

	if mt.UploadID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "upload_id"))
	}

	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	if mt.Blocks == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "blocks"))
	}
	return
}

// LastUploadCollection is the media type for an array of LastUpload (default view)
//
// Identifier: application/vnd.app.upload+json; type=collection; view=default
type LastUploadCollection []*LastUpload

// Validate validates the LastUploadCollection media type instance.
func (mt LastUploadCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// User media type (default view)
//
// Identifier: application/vnd.app.user+json; view=default
type User struct {
	Bio              string  `form:"bio" json:"bio" yaml:"bio" xml:"bio"`
	Email            string  `form:"email" json:"email" yaml:"email" xml:"email"`
	ID               int     `form:"id" json:"id" yaml:"id" xml:"id"`
	MediaContentType *string `form:"media_content_type,omitempty" json:"media_content_type,omitempty" yaml:"media_content_type,omitempty" xml:"media_content_type,omitempty"`
	MediaURL         *string `form:"media_url,omitempty" json:"media_url,omitempty" yaml:"media_url,omitempty" xml:"media_url,omitempty"`
	Name             string  `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.Bio == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "bio"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, mt.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, mt.Name, `\S`))
	}
	if utf8.RuneCountInString(mt.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 256, false))
	}
	return
}

// TransmissionToken media type (default view)
//
// Identifier: application/vnd.app.user.transmission.token+json; view=default
type TransmissionToken struct {
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the TransmissionToken media type instance.
func (mt *TransmissionToken) Validate() (err error) {
	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	return
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.app.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Users media type (default view)
//
// Identifier: application/vnd.app.users+json; view=default
type Users struct {
	Users UserCollection `form:"users" json:"users" yaml:"users" xml:"users"`
}

// Validate validates the Users media type instance.
func (mt *Users) Validate() (err error) {
	if mt.Users == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "users"))
	}
	if err2 := mt.Users.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// BadRequestResponse media type (default view)
//
// Identifier: application/vnd.brr+json; view=default
type BadRequestResponse struct {
	Key     string `form:"key" json:"key" yaml:"key" xml:"key"`
	Message string `form:"message" json:"message" yaml:"message" xml:"message"`
}

// Validate validates the BadRequestResponse media type instance.
func (mt *BadRequestResponse) Validate() (err error) {
	if mt.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "key"))
	}
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}
	return
}
