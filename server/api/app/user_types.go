// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application User Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// addAdministratorPayload user type.
type addAdministratorPayload struct {
	UserID *int `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the addAdministratorPayload type instance.
func (ut *addAdministratorPayload) Validate() (err error) {
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userId"))
	}
	return
}

// Publicize creates AddAdministratorPayload from addAdministratorPayload
func (ut *addAdministratorPayload) Publicize() *AddAdministratorPayload {
	var pub AddAdministratorPayload
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// AddAdministratorPayload user type.
type AddAdministratorPayload struct {
	UserID int `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// addDeviceSourcePayload user type.
type addDeviceSourcePayload struct {
	Key  *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the addDeviceSourcePayload type instance.
func (ut *addDeviceSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	return
}

// Publicize creates AddDeviceSourcePayload from addDeviceSourcePayload
func (ut *addDeviceSourcePayload) Publicize() *AddDeviceSourcePayload {
	var pub AddDeviceSourcePayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// AddDeviceSourcePayload user type.
type AddDeviceSourcePayload struct {
	Key  string `form:"key" json:"key" yaml:"key" xml:"key"`
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the AddDeviceSourcePayload type instance.
func (ut *AddDeviceSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}
	return
}

// addExpeditionPayload user type.
type addExpeditionPayload struct {
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
}

// Validate validates the addExpeditionPayload type instance.
func (ut *addExpeditionPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddExpeditionPayload from addExpeditionPayload
func (ut *addExpeditionPayload) Publicize() *AddExpeditionPayload {
	var pub AddExpeditionPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	return &pub
}

// AddExpeditionPayload user type.
type AddExpeditionPayload struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the AddExpeditionPayload type instance.
func (ut *AddExpeditionPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addFieldNotePayload user type.
type addFieldNotePayload struct {
	CategoryID *int       `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	Created    *time.Time `form:"created,omitempty" json:"created,omitempty" yaml:"created,omitempty" xml:"created,omitempty"`
	MediaID    *int       `form:"media_id,omitempty" json:"media_id,omitempty" yaml:"media_id,omitempty" xml:"media_id,omitempty"`
	Note       *string    `form:"note,omitempty" json:"note,omitempty" yaml:"note,omitempty" xml:"note,omitempty"`
}

// Validate validates the addFieldNotePayload type instance.
func (ut *addFieldNotePayload) Validate() (err error) {
	if ut.Created == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "created"))
	}
	return
}

// Publicize creates AddFieldNotePayload from addFieldNotePayload
func (ut *addFieldNotePayload) Publicize() *AddFieldNotePayload {
	var pub AddFieldNotePayload
	if ut.CategoryID != nil {
		pub.CategoryID = ut.CategoryID
	}
	if ut.Created != nil {
		pub.Created = *ut.Created
	}
	if ut.MediaID != nil {
		pub.MediaID = ut.MediaID
	}
	if ut.Note != nil {
		pub.Note = ut.Note
	}
	return &pub
}

// AddFieldNotePayload user type.
type AddFieldNotePayload struct {
	CategoryID *int      `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	Created    time.Time `form:"created" json:"created" yaml:"created" xml:"created"`
	MediaID    *int      `form:"media_id,omitempty" json:"media_id,omitempty" yaml:"media_id,omitempty" xml:"media_id,omitempty"`
	Note       *string   `form:"note,omitempty" json:"note,omitempty" yaml:"note,omitempty" xml:"note,omitempty"`
}

// addFirmwarePayload user type.
type addFirmwarePayload struct {
	Etag    *string `form:"etag,omitempty" json:"etag,omitempty" yaml:"etag,omitempty" xml:"etag,omitempty"`
	Meta    *string `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
	Module  *string `form:"module,omitempty" json:"module,omitempty" yaml:"module,omitempty" xml:"module,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" yaml:"profile,omitempty" xml:"profile,omitempty"`
	URL     *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}

// Validate validates the addFirmwarePayload type instance.
func (ut *addFirmwarePayload) Validate() (err error) {
	if ut.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "etag"))
	}
	if ut.Module == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "module"))
	}
	if ut.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "profile"))
	}
	if ut.URL == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "url"))
	}
	if ut.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "meta"))
	}
	return
}

// Publicize creates AddFirmwarePayload from addFirmwarePayload
func (ut *addFirmwarePayload) Publicize() *AddFirmwarePayload {
	var pub AddFirmwarePayload
	if ut.Etag != nil {
		pub.Etag = *ut.Etag
	}
	if ut.Meta != nil {
		pub.Meta = *ut.Meta
	}
	if ut.Module != nil {
		pub.Module = *ut.Module
	}
	if ut.Profile != nil {
		pub.Profile = *ut.Profile
	}
	if ut.URL != nil {
		pub.URL = *ut.URL
	}
	return &pub
}

// AddFirmwarePayload user type.
type AddFirmwarePayload struct {
	Etag    string `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	Meta    string `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Module  string `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile string `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	URL     string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the AddFirmwarePayload type instance.
func (ut *AddFirmwarePayload) Validate() (err error) {
	if ut.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "etag"))
	}
	if ut.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "module"))
	}
	if ut.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "profile"))
	}
	if ut.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "url"))
	}
	if ut.Meta == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "meta"))
	}
	return
}

// addMemberPayload user type.
type addMemberPayload struct {
	Role   *string `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the addMemberPayload type instance.
func (ut *addMemberPayload) Validate() (err error) {
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userId"))
	}
	if ut.Role == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "role"))
	}
	return
}

// Publicize creates AddMemberPayload from addMemberPayload
func (ut *addMemberPayload) Publicize() *AddMemberPayload {
	var pub AddMemberPayload
	if ut.Role != nil {
		pub.Role = *ut.Role
	}
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// AddMemberPayload user type.
type AddMemberPayload struct {
	Role   string `form:"role" json:"role" yaml:"role" xml:"role"`
	UserID int    `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// Validate validates the AddMemberPayload type instance.
func (ut *AddMemberPayload) Validate() (err error) {

	if ut.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "role"))
	}
	return
}

// addProjectPayload user type.
type addProjectPayload struct {
	Description *string    `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	EndTime     *time.Time `form:"end_time,omitempty" json:"end_time,omitempty" yaml:"end_time,omitempty" xml:"end_time,omitempty"`
	Goal        *string    `form:"goal,omitempty" json:"goal,omitempty" yaml:"goal,omitempty" xml:"goal,omitempty"`
	Location    *string    `form:"location,omitempty" json:"location,omitempty" yaml:"location,omitempty" xml:"location,omitempty"`
	Name        *string    `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Private     *bool      `form:"private,omitempty" json:"private,omitempty" yaml:"private,omitempty" xml:"private,omitempty"`
	Slug        *string    `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
	StartTime   *time.Time `form:"start_time,omitempty" json:"start_time,omitempty" yaml:"start_time,omitempty" xml:"start_time,omitempty"`
	Tags        *string    `form:"tags,omitempty" json:"tags,omitempty" yaml:"tags,omitempty" xml:"tags,omitempty"`
}

// Validate validates the addProjectPayload type instance.
func (ut *addProjectPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddProjectPayload from addProjectPayload
func (ut *addProjectPayload) Publicize() *AddProjectPayload {
	var pub AddProjectPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.EndTime != nil {
		pub.EndTime = ut.EndTime
	}
	if ut.Goal != nil {
		pub.Goal = ut.Goal
	}
	if ut.Location != nil {
		pub.Location = ut.Location
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Private != nil {
		pub.Private = ut.Private
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	if ut.StartTime != nil {
		pub.StartTime = ut.StartTime
	}
	if ut.Tags != nil {
		pub.Tags = ut.Tags
	}
	return &pub
}

// AddProjectPayload user type.
type AddProjectPayload struct {
	Description string     `form:"description" json:"description" yaml:"description" xml:"description"`
	EndTime     *time.Time `form:"end_time,omitempty" json:"end_time,omitempty" yaml:"end_time,omitempty" xml:"end_time,omitempty"`
	Goal        *string    `form:"goal,omitempty" json:"goal,omitempty" yaml:"goal,omitempty" xml:"goal,omitempty"`
	Location    *string    `form:"location,omitempty" json:"location,omitempty" yaml:"location,omitempty" xml:"location,omitempty"`
	Name        string     `form:"name" json:"name" yaml:"name" xml:"name"`
	Private     *bool      `form:"private,omitempty" json:"private,omitempty" yaml:"private,omitempty" xml:"private,omitempty"`
	Slug        string     `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
	StartTime   *time.Time `form:"start_time,omitempty" json:"start_time,omitempty" yaml:"start_time,omitempty" xml:"start_time,omitempty"`
	Tags        *string    `form:"tags,omitempty" json:"tags,omitempty" yaml:"tags,omitempty" xml:"tags,omitempty"`
}

// Validate validates the AddProjectPayload type instance.
func (ut *AddProjectPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addStationLogPayload user type.
type addStationLogPayload struct {
	ID        *int    `form:"ID,omitempty" json:"ID,omitempty" yaml:"ID,omitempty" xml:"ID,omitempty"`
	Body      *string `form:"body,omitempty" json:"body,omitempty" yaml:"body,omitempty" xml:"body,omitempty"`
	StationID *int    `form:"station_id,omitempty" json:"station_id,omitempty" yaml:"station_id,omitempty" xml:"station_id,omitempty"`
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" yaml:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// Validate validates the addStationLogPayload type instance.
func (ut *addStationLogPayload) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "ID"))
	}
	if ut.StationID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "station_id"))
	}
	if ut.Body == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "body"))
	}
	if ut.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "timestamp"))
	}
	return
}

// Publicize creates AddStationLogPayload from addStationLogPayload
func (ut *addStationLogPayload) Publicize() *AddStationLogPayload {
	var pub AddStationLogPayload
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Body != nil {
		pub.Body = *ut.Body
	}
	if ut.StationID != nil {
		pub.StationID = *ut.StationID
	}
	if ut.Timestamp != nil {
		pub.Timestamp = *ut.Timestamp
	}
	return &pub
}

// AddStationLogPayload user type.
type AddStationLogPayload struct {
	ID        int    `form:"ID" json:"ID" yaml:"ID" xml:"ID"`
	Body      string `form:"body" json:"body" yaml:"body" xml:"body"`
	StationID int    `form:"station_id" json:"station_id" yaml:"station_id" xml:"station_id"`
	Timestamp string `form:"timestamp" json:"timestamp" yaml:"timestamp" xml:"timestamp"`
}

// Validate validates the AddStationLogPayload type instance.
func (ut *AddStationLogPayload) Validate() (err error) {

	if ut.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "body"))
	}
	if ut.Timestamp == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "timestamp"))
	}
	return
}

// addStationLogsPayload user type.
type addStationLogsPayload struct {
	StationLogs []*addStationLogPayload `form:"station_logs,omitempty" json:"station_logs,omitempty" yaml:"station_logs,omitempty" xml:"station_logs,omitempty"`
}

// Validate validates the addStationLogsPayload type instance.
func (ut *addStationLogsPayload) Validate() (err error) {
	if ut.StationLogs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "station_logs"))
	}
	for _, e := range ut.StationLogs {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates AddStationLogsPayload from addStationLogsPayload
func (ut *addStationLogsPayload) Publicize() *AddStationLogsPayload {
	var pub AddStationLogsPayload
	if ut.StationLogs != nil {
		pub.StationLogs = make([]*AddStationLogPayload, len(ut.StationLogs))
		for i2, elem2 := range ut.StationLogs {
			pub.StationLogs[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// AddStationLogsPayload user type.
type AddStationLogsPayload struct {
	StationLogs []*AddStationLogPayload `form:"station_logs" json:"station_logs" yaml:"station_logs" xml:"station_logs"`
}

// Validate validates the AddStationLogsPayload type instance.
func (ut *AddStationLogsPayload) Validate() (err error) {
	if ut.StationLogs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "station_logs"))
	}
	for _, e := range ut.StationLogs {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// addStationPayload user type.
type addStationPayload struct {
	DeviceID   *string                `form:"device_id,omitempty" json:"device_id,omitempty" yaml:"device_id,omitempty" xml:"device_id,omitempty"`
	Name       *string                `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	StatusJSON map[string]interface{} `form:"status_json,omitempty" json:"status_json,omitempty" yaml:"status_json,omitempty" xml:"status_json,omitempty"`
}

// Validate validates the addStationPayload type instance.
func (ut *addStationPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "device_id"))
	}
	if ut.StatusJSON == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "status_json"))
	}
	return
}

// Publicize creates AddStationPayload from addStationPayload
func (ut *addStationPayload) Publicize() *AddStationPayload {
	var pub AddStationPayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.StatusJSON != nil {
		pub.StatusJSON = ut.StatusJSON
	}
	return &pub
}

// AddStationPayload user type.
type AddStationPayload struct {
	DeviceID   string                 `form:"device_id" json:"device_id" yaml:"device_id" xml:"device_id"`
	Name       string                 `form:"name" json:"name" yaml:"name" xml:"name"`
	StatusJSON map[string]interface{} `form:"status_json" json:"status_json" yaml:"status_json" xml:"status_json"`
}

// Validate validates the AddStationPayload type instance.
func (ut *AddStationPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.DeviceID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "device_id"))
	}
	if ut.StatusJSON == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "status_json"))
	}
	return
}

// addTeamPayload user type.
type addTeamPayload struct {
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
}

// Validate validates the addTeamPayload type instance.
func (ut *addTeamPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddTeamPayload from addTeamPayload
func (ut *addTeamPayload) Publicize() *AddTeamPayload {
	var pub AddTeamPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	return &pub
}

// AddTeamPayload user type.
type AddTeamPayload struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the AddTeamPayload type instance.
func (ut *AddTeamPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addTwitterAccountSourcePayload user type.
type addTwitterAccountSourcePayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the addTwitterAccountSourcePayload type instance.
func (ut *addTwitterAccountSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates AddTwitterAccountSourcePayload from addTwitterAccountSourcePayload
func (ut *addTwitterAccountSourcePayload) Publicize() *AddTwitterAccountSourcePayload {
	var pub AddTwitterAccountSourcePayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// AddTwitterAccountSourcePayload user type.
type AddTwitterAccountSourcePayload struct {
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the AddTwitterAccountSourcePayload type instance.
func (ut *AddTwitterAccountSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	return
}

// addUserPayload user type.
type addUserPayload struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Password    *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the addUserPayload type instance.
func (ut *addUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates AddUserPayload from addUserPayload
func (ut *addUserPayload) Publicize() *AddUserPayload {
	var pub AddUserPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.InviteToken != nil {
		pub.InviteToken = ut.InviteToken
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// AddUserPayload user type.
type AddUserPayload struct {
	Email       string  `form:"email" json:"email" yaml:"email" xml:"email"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        string  `form:"name" json:"name" yaml:"name" xml:"name"`
	Password    string  `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the AddUserPayload type instance.
func (ut *AddUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// deviceDataStreamsSummary user type.
type deviceDataStreamsSummary struct {
	Data *deviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *deviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// Publicize creates DeviceDataStreamsSummary from deviceDataStreamsSummary
func (ut *deviceDataStreamsSummary) Publicize() *DeviceDataStreamsSummary {
	var pub DeviceDataStreamsSummary
	if ut.Data != nil {
		pub.Data = ut.Data.Publicize()
	}
	if ut.Meta != nil {
		pub.Meta = ut.Meta.Publicize()
	}
	return &pub
}

// DeviceDataStreamsSummary user type.
type DeviceDataStreamsSummary struct {
	Data *DeviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *DeviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// deviceStreamSummary user type.
type deviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// Publicize creates DeviceStreamSummary from deviceStreamSummary
func (ut *deviceStreamSummary) Publicize() *DeviceStreamSummary {
	var pub DeviceStreamSummary
	if ut.Records != nil {
		pub.Records = ut.Records
	}
	if ut.Size != nil {
		pub.Size = ut.Size
	}
	return &pub
}

// DeviceStreamSummary user type.
type DeviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// inviteUserPayload user type.
type inviteUserPayload struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
}

// Validate validates the inviteUserPayload type instance.
func (ut *inviteUserPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	return
}

// Publicize creates InviteUserPayload from inviteUserPayload
func (ut *inviteUserPayload) Publicize() *InviteUserPayload {
	var pub InviteUserPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	return &pub
}

// InviteUserPayload user type.
type InviteUserPayload struct {
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
}

// Validate validates the InviteUserPayload type instance.
func (ut *InviteUserPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	return
}

// jSONDataMeta user type.
type jSONDataMeta struct {
	ID      *int                 `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Station *jSONDataMetaStation `form:"station,omitempty" json:"station,omitempty" yaml:"station,omitempty" xml:"station,omitempty"`
}

// Validate validates the jSONDataMeta type instance.
func (ut *jSONDataMeta) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Station != nil {
		if err2 := ut.Station.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates JSONDataMeta from jSONDataMeta
func (ut *jSONDataMeta) Publicize() *JSONDataMeta {
	var pub JSONDataMeta
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Station != nil {
		pub.Station = ut.Station.Publicize()
	}
	return &pub
}

// JSONDataMeta user type.
type JSONDataMeta struct {
	ID      int                  `form:"id" json:"id" yaml:"id" xml:"id"`
	Station *JSONDataMetaStation `form:"station,omitempty" json:"station,omitempty" yaml:"station,omitempty" xml:"station,omitempty"`
}

// Validate validates the JSONDataMeta type instance.
func (ut *JSONDataMeta) Validate() (err error) {
	if ut.Station != nil {
		if err2 := ut.Station.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// jSONDataMetaModule user type.
type jSONDataMetaModule struct {
	ID           *string               `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Kind         *int                  `form:"kind,omitempty" json:"kind,omitempty" yaml:"kind,omitempty" xml:"kind,omitempty"`
	Manufacturer *int                  `form:"manufacturer,omitempty" json:"manufacturer,omitempty" yaml:"manufacturer,omitempty" xml:"manufacturer,omitempty"`
	Name         *string               `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Sensors      []*jSONDataMetaSensor `form:"sensors,omitempty" json:"sensors,omitempty" yaml:"sensors,omitempty" xml:"sensors,omitempty"`
	Version      *int                  `form:"version,omitempty" json:"version,omitempty" yaml:"version,omitempty" xml:"version,omitempty"`
}

// Validate validates the jSONDataMetaModule type instance.
func (ut *jSONDataMetaModule) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "kind"))
	}
	if ut.Version == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "version"))
	}
	if ut.Manufacturer == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "manufacturer"))
	}
	for _, e := range ut.Sensors {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates JSONDataMetaModule from jSONDataMetaModule
func (ut *jSONDataMetaModule) Publicize() *JSONDataMetaModule {
	var pub JSONDataMetaModule
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Kind != nil {
		pub.Kind = *ut.Kind
	}
	if ut.Manufacturer != nil {
		pub.Manufacturer = *ut.Manufacturer
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Sensors != nil {
		pub.Sensors = make([]*JSONDataMetaSensor, len(ut.Sensors))
		for i2, elem2 := range ut.Sensors {
			pub.Sensors[i2] = elem2.Publicize()
		}
	}
	if ut.Version != nil {
		pub.Version = *ut.Version
	}
	return &pub
}

// JSONDataMetaModule user type.
type JSONDataMetaModule struct {
	ID           string                `form:"id" json:"id" yaml:"id" xml:"id"`
	Kind         int                   `form:"kind" json:"kind" yaml:"kind" xml:"kind"`
	Manufacturer int                   `form:"manufacturer" json:"manufacturer" yaml:"manufacturer" xml:"manufacturer"`
	Name         string                `form:"name" json:"name" yaml:"name" xml:"name"`
	Sensors      []*JSONDataMetaSensor `form:"sensors,omitempty" json:"sensors,omitempty" yaml:"sensors,omitempty" xml:"sensors,omitempty"`
	Version      int                   `form:"version" json:"version" yaml:"version" xml:"version"`
}

// Validate validates the JSONDataMetaModule type instance.
func (ut *JSONDataMetaModule) Validate() (err error) {
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}

	for _, e := range ut.Sensors {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// jSONDataMetaSensor user type.
type jSONDataMetaSensor struct {
	Key           *string                    `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Name          *string                    `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Ranges        []*jSONDataMetaSensorRange `form:"ranges,omitempty" json:"ranges,omitempty" yaml:"ranges,omitempty" xml:"ranges,omitempty"`
	UnitOfMeasure *string                    `form:"unitOfMeasure,omitempty" json:"unitOfMeasure,omitempty" yaml:"unitOfMeasure,omitempty" xml:"unitOfMeasure,omitempty"`
}

// Validate validates the jSONDataMetaSensor type instance.
func (ut *jSONDataMetaSensor) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	if ut.UnitOfMeasure == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "unitOfMeasure"))
	}
	if ut.Ranges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "ranges"))
	}
	for _, e := range ut.Ranges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates JSONDataMetaSensor from jSONDataMetaSensor
func (ut *jSONDataMetaSensor) Publicize() *JSONDataMetaSensor {
	var pub JSONDataMetaSensor
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Ranges != nil {
		pub.Ranges = make([]*JSONDataMetaSensorRange, len(ut.Ranges))
		for i2, elem2 := range ut.Ranges {
			pub.Ranges[i2] = elem2.Publicize()
		}
	}
	if ut.UnitOfMeasure != nil {
		pub.UnitOfMeasure = *ut.UnitOfMeasure
	}
	return &pub
}

// JSONDataMetaSensor user type.
type JSONDataMetaSensor struct {
	Key           string                     `form:"key" json:"key" yaml:"key" xml:"key"`
	Name          string                     `form:"name" json:"name" yaml:"name" xml:"name"`
	Ranges        []*JSONDataMetaSensorRange `form:"ranges" json:"ranges" yaml:"ranges" xml:"ranges"`
	UnitOfMeasure string                     `form:"unitOfMeasure" json:"unitOfMeasure" yaml:"unitOfMeasure" xml:"unitOfMeasure"`
}

// Validate validates the JSONDataMetaSensor type instance.
func (ut *JSONDataMetaSensor) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}
	if ut.UnitOfMeasure == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "unitOfMeasure"))
	}
	if ut.Ranges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "ranges"))
	}
	for _, e := range ut.Ranges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// jSONDataMetaSensorRange user type.
type jSONDataMetaSensorRange struct {
	Maximum *float64 `form:"maximum,omitempty" json:"maximum,omitempty" yaml:"maximum,omitempty" xml:"maximum,omitempty"`
	Minimum *float64 `form:"minimum,omitempty" json:"minimum,omitempty" yaml:"minimum,omitempty" xml:"minimum,omitempty"`
}

// Validate validates the jSONDataMetaSensorRange type instance.
func (ut *jSONDataMetaSensorRange) Validate() (err error) {
	if ut.Minimum == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "minimum"))
	}
	if ut.Maximum == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "maximum"))
	}
	return
}

// Publicize creates JSONDataMetaSensorRange from jSONDataMetaSensorRange
func (ut *jSONDataMetaSensorRange) Publicize() *JSONDataMetaSensorRange {
	var pub JSONDataMetaSensorRange
	if ut.Maximum != nil {
		pub.Maximum = *ut.Maximum
	}
	if ut.Minimum != nil {
		pub.Minimum = *ut.Minimum
	}
	return &pub
}

// JSONDataMetaSensorRange user type.
type JSONDataMetaSensorRange struct {
	Maximum float64 `form:"maximum" json:"maximum" yaml:"maximum" xml:"maximum"`
	Minimum float64 `form:"minimum" json:"minimum" yaml:"minimum" xml:"minimum"`
}

// Validate validates the JSONDataMetaSensorRange type instance.
func (ut *JSONDataMetaSensorRange) Validate() (err error) {

	return
}

// jSONDataMetaStation user type.
type jSONDataMetaStation struct {
	Firmware *jSONDataMetaStationFirmware `form:"firmware,omitempty" json:"firmware,omitempty" yaml:"firmware,omitempty" xml:"firmware,omitempty"`
	ID       *string                      `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Modules  []*jSONDataMetaModule        `form:"modules,omitempty" json:"modules,omitempty" yaml:"modules,omitempty" xml:"modules,omitempty"`
	Name     *string                      `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the jSONDataMetaStation type instance.
func (ut *jSONDataMetaStation) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Modules == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "modules"))
	}
	if ut.Firmware == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firmware"))
	}
	if ut.Firmware != nil {
		if err2 := ut.Firmware.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range ut.Modules {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates JSONDataMetaStation from jSONDataMetaStation
func (ut *jSONDataMetaStation) Publicize() *JSONDataMetaStation {
	var pub JSONDataMetaStation
	if ut.Firmware != nil {
		pub.Firmware = ut.Firmware.Publicize()
	}
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Modules != nil {
		pub.Modules = make([]*JSONDataMetaModule, len(ut.Modules))
		for i2, elem2 := range ut.Modules {
			pub.Modules[i2] = elem2.Publicize()
		}
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// JSONDataMetaStation user type.
type JSONDataMetaStation struct {
	Firmware *JSONDataMetaStationFirmware `form:"firmware" json:"firmware" yaml:"firmware" xml:"firmware"`
	ID       string                       `form:"id" json:"id" yaml:"id" xml:"id"`
	Modules  []*JSONDataMetaModule        `form:"modules" json:"modules" yaml:"modules" xml:"modules"`
	Name     string                       `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the JSONDataMetaStation type instance.
func (ut *JSONDataMetaStation) Validate() (err error) {
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Modules == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "modules"))
	}
	if ut.Firmware == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "firmware"))
	}
	if ut.Firmware != nil {
		if err2 := ut.Firmware.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range ut.Modules {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// jSONDataMetaStationFirmware user type.
type jSONDataMetaStationFirmware struct {
	Build     *string `form:"build,omitempty" json:"build,omitempty" yaml:"build,omitempty" xml:"build,omitempty"`
	Hash      *string `form:"hash,omitempty" json:"hash,omitempty" yaml:"hash,omitempty" xml:"hash,omitempty"`
	Number    *string `form:"number,omitempty" json:"number,omitempty" yaml:"number,omitempty" xml:"number,omitempty"`
	Timestamp *int    `form:"timestamp,omitempty" json:"timestamp,omitempty" yaml:"timestamp,omitempty" xml:"timestamp,omitempty"`
	Version   *string `form:"version,omitempty" json:"version,omitempty" yaml:"version,omitempty" xml:"version,omitempty"`
}

// Validate validates the jSONDataMetaStationFirmware type instance.
func (ut *jSONDataMetaStationFirmware) Validate() (err error) {
	if ut.Version == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "version"))
	}
	if ut.Build == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "build"))
	}
	if ut.Number == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "number"))
	}
	if ut.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "timestamp"))
	}
	if ut.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "hash"))
	}
	return
}

// Publicize creates JSONDataMetaStationFirmware from jSONDataMetaStationFirmware
func (ut *jSONDataMetaStationFirmware) Publicize() *JSONDataMetaStationFirmware {
	var pub JSONDataMetaStationFirmware
	if ut.Build != nil {
		pub.Build = *ut.Build
	}
	if ut.Hash != nil {
		pub.Hash = *ut.Hash
	}
	if ut.Number != nil {
		pub.Number = *ut.Number
	}
	if ut.Timestamp != nil {
		pub.Timestamp = *ut.Timestamp
	}
	if ut.Version != nil {
		pub.Version = *ut.Version
	}
	return &pub
}

// JSONDataMetaStationFirmware user type.
type JSONDataMetaStationFirmware struct {
	Build     string `form:"build" json:"build" yaml:"build" xml:"build"`
	Hash      string `form:"hash" json:"hash" yaml:"hash" xml:"hash"`
	Number    string `form:"number" json:"number" yaml:"number" xml:"number"`
	Timestamp int    `form:"timestamp" json:"timestamp" yaml:"timestamp" xml:"timestamp"`
	Version   string `form:"version" json:"version" yaml:"version" xml:"version"`
}

// Validate validates the JSONDataMetaStationFirmware type instance.
func (ut *JSONDataMetaStationFirmware) Validate() (err error) {
	if ut.Version == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "version"))
	}
	if ut.Build == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "build"))
	}
	if ut.Number == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "number"))
	}

	if ut.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "hash"))
	}
	return
}

// jSONDataRow user type.
type jSONDataRow struct {
	D        map[string]interface{} `form:"d,omitempty" json:"d,omitempty" yaml:"d,omitempty" xml:"d,omitempty"`
	Location []float64              `form:"location,omitempty" json:"location,omitempty" yaml:"location,omitempty" xml:"location,omitempty"`
	Metas    []int                  `form:"metas,omitempty" json:"metas,omitempty" yaml:"metas,omitempty" xml:"metas,omitempty"`
	Time     *int64                 `form:"time,omitempty" json:"time,omitempty" yaml:"time,omitempty" xml:"time,omitempty"`
}

// Validate validates the jSONDataRow type instance.
func (ut *jSONDataRow) Validate() (err error) {
	if ut.Time == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "time"))
	}
	if ut.Location == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "location"))
	}
	if ut.D == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "d"))
	}
	return
}

// Publicize creates JSONDataRow from jSONDataRow
func (ut *jSONDataRow) Publicize() *JSONDataRow {
	var pub JSONDataRow
	if ut.D != nil {
		pub.D = ut.D
	}
	if ut.Location != nil {
		pub.Location = ut.Location
	}
	if ut.Metas != nil {
		pub.Metas = ut.Metas
	}
	if ut.Time != nil {
		pub.Time = *ut.Time
	}
	return &pub
}

// JSONDataRow user type.
type JSONDataRow struct {
	D        map[string]interface{} `form:"d" json:"d" yaml:"d" xml:"d"`
	Location []float64              `form:"location" json:"location" yaml:"location" xml:"location"`
	Metas    []int                  `form:"metas,omitempty" json:"metas,omitempty" yaml:"metas,omitempty" xml:"metas,omitempty"`
	Time     int64                  `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the JSONDataRow type instance.
func (ut *JSONDataRow) Validate() (err error) {

	if ut.Location == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "location"))
	}
	if ut.D == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "d"))
	}
	return
}

// jSONDataStatistics user type.
type jSONDataStatistics struct {
	End                 *time.Time `form:"end,omitempty" json:"end,omitempty" yaml:"end,omitempty" xml:"end,omitempty"`
	NumberOfDataRecords *int       `form:"number_of_data_records,omitempty" json:"number_of_data_records,omitempty" yaml:"number_of_data_records,omitempty" xml:"number_of_data_records,omitempty"`
	NumberOfMetaRecords *int       `form:"number_of_meta_records,omitempty" json:"number_of_meta_records,omitempty" yaml:"number_of_meta_records,omitempty" xml:"number_of_meta_records,omitempty"`
	Start               *time.Time `form:"start,omitempty" json:"start,omitempty" yaml:"start,omitempty" xml:"start,omitempty"`
}

// Validate validates the jSONDataStatistics type instance.
func (ut *jSONDataStatistics) Validate() (err error) {
	if ut.Start == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "start"))
	}
	if ut.End == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "end"))
	}
	if ut.NumberOfDataRecords == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "number_of_data_records"))
	}
	if ut.NumberOfMetaRecords == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "number_of_meta_records"))
	}
	return
}

// Publicize creates JSONDataStatistics from jSONDataStatistics
func (ut *jSONDataStatistics) Publicize() *JSONDataStatistics {
	var pub JSONDataStatistics
	if ut.End != nil {
		pub.End = *ut.End
	}
	if ut.NumberOfDataRecords != nil {
		pub.NumberOfDataRecords = *ut.NumberOfDataRecords
	}
	if ut.NumberOfMetaRecords != nil {
		pub.NumberOfMetaRecords = *ut.NumberOfMetaRecords
	}
	if ut.Start != nil {
		pub.Start = *ut.Start
	}
	return &pub
}

// JSONDataStatistics user type.
type JSONDataStatistics struct {
	End                 time.Time `form:"end" json:"end" yaml:"end" xml:"end"`
	NumberOfDataRecords int       `form:"number_of_data_records" json:"number_of_data_records" yaml:"number_of_data_records" xml:"number_of_data_records"`
	NumberOfMetaRecords int       `form:"number_of_meta_records" json:"number_of_meta_records" yaml:"number_of_meta_records" xml:"number_of_meta_records"`
	Start               time.Time `form:"start" json:"start" yaml:"start" xml:"start"`
}

// Validate validates the JSONDataStatistics type instance.
func (ut *JSONDataStatistics) Validate() (err error) {

	return
}

// jSONDataVersion user type.
type jSONDataVersion struct {
	Data []*jSONDataRow `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *jSONDataMeta  `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the jSONDataVersion type instance.
func (ut *jSONDataVersion) Validate() (err error) {
	for _, e := range ut.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if ut.Meta != nil {
		if err2 := ut.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates JSONDataVersion from jSONDataVersion
func (ut *jSONDataVersion) Publicize() *JSONDataVersion {
	var pub JSONDataVersion
	if ut.Data != nil {
		pub.Data = make([]*JSONDataRow, len(ut.Data))
		for i2, elem2 := range ut.Data {
			pub.Data[i2] = elem2.Publicize()
		}
	}
	if ut.Meta != nil {
		pub.Meta = ut.Meta.Publicize()
	}
	return &pub
}

// JSONDataVersion user type.
type JSONDataVersion struct {
	Data []*JSONDataRow `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *JSONDataMeta  `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the JSONDataVersion type instance.
func (ut *JSONDataVersion) Validate() (err error) {
	for _, e := range ut.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if ut.Meta != nil {
		if err2 := ut.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// loginPayload user type.
type loginPayload struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	Email    string `form:"email" json:"email" yaml:"email" xml:"email"`
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// removeUserPayload user type.
type removeUserPayload struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
}

// Validate validates the removeUserPayload type instance.
func (ut *removeUserPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	return
}

// Publicize creates RemoveUserPayload from removeUserPayload
func (ut *removeUserPayload) Publicize() *RemoveUserPayload {
	var pub RemoveUserPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	return &pub
}

// RemoveUserPayload user type.
type RemoveUserPayload struct {
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
}

// Validate validates the RemoveUserPayload type instance.
func (ut *RemoveUserPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	return
}

// updateDeviceFirmwarePayload user type.
type updateDeviceFirmwarePayload struct {
	DeviceID   *int `form:"deviceId,omitempty" json:"deviceId,omitempty" yaml:"deviceId,omitempty" xml:"deviceId,omitempty"`
	FirmwareID *int `form:"firmwareId,omitempty" json:"firmwareId,omitempty" yaml:"firmwareId,omitempty" xml:"firmwareId,omitempty"`
}

// Validate validates the updateDeviceFirmwarePayload type instance.
func (ut *updateDeviceFirmwarePayload) Validate() (err error) {
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "deviceId"))
	}
	if ut.FirmwareID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firmwareId"))
	}
	return
}

// Publicize creates UpdateDeviceFirmwarePayload from updateDeviceFirmwarePayload
func (ut *updateDeviceFirmwarePayload) Publicize() *UpdateDeviceFirmwarePayload {
	var pub UpdateDeviceFirmwarePayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.FirmwareID != nil {
		pub.FirmwareID = *ut.FirmwareID
	}
	return &pub
}

// UpdateDeviceFirmwarePayload user type.
type UpdateDeviceFirmwarePayload struct {
	DeviceID   int `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	FirmwareID int `form:"firmwareId" json:"firmwareId" yaml:"firmwareId" xml:"firmwareId"`
}

// Validate validates the UpdateDeviceFirmwarePayload type instance.
func (ut *UpdateDeviceFirmwarePayload) Validate() (err error) {

	return
}

// updateDeviceSourceLocationPayload user type.
type updateDeviceSourceLocationPayload struct {
	Key       *string  `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Latitude  *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
}

// Validate validates the updateDeviceSourceLocationPayload type instance.
func (ut *updateDeviceSourceLocationPayload) Validate() (err error) {
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	if ut.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "longitude"))
	}
	if ut.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "latitude"))
	}
	return
}

// Publicize creates UpdateDeviceSourceLocationPayload from updateDeviceSourceLocationPayload
func (ut *updateDeviceSourceLocationPayload) Publicize() *UpdateDeviceSourceLocationPayload {
	var pub UpdateDeviceSourceLocationPayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Latitude != nil {
		pub.Latitude = *ut.Latitude
	}
	if ut.Longitude != nil {
		pub.Longitude = *ut.Longitude
	}
	return &pub
}

// UpdateDeviceSourceLocationPayload user type.
type UpdateDeviceSourceLocationPayload struct {
	Key       string  `form:"key" json:"key" yaml:"key" xml:"key"`
	Latitude  float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
}

// Validate validates the UpdateDeviceSourceLocationPayload type instance.
func (ut *UpdateDeviceSourceLocationPayload) Validate() (err error) {
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}

	return
}

// updateDeviceSourcePayload user type.
type updateDeviceSourcePayload struct {
	Key  *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the updateDeviceSourcePayload type instance.
func (ut *updateDeviceSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	return
}

// Publicize creates UpdateDeviceSourcePayload from updateDeviceSourcePayload
func (ut *updateDeviceSourcePayload) Publicize() *UpdateDeviceSourcePayload {
	var pub UpdateDeviceSourcePayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// UpdateDeviceSourcePayload user type.
type UpdateDeviceSourcePayload struct {
	Key  string `form:"key" json:"key" yaml:"key" xml:"key"`
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the UpdateDeviceSourcePayload type instance.
func (ut *UpdateDeviceSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}
	return
}

// updateDeviceSourceSchemaPayload user type.
type updateDeviceSourceSchemaPayload struct {
	Active     *bool   `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	JSONSchema *string `form:"jsonSchema,omitempty" json:"jsonSchema,omitempty" yaml:"jsonSchema,omitempty" xml:"jsonSchema,omitempty"`
	Key        *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
}

// Validate validates the updateDeviceSourceSchemaPayload type instance.
func (ut *updateDeviceSourceSchemaPayload) Validate() (err error) {
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	if ut.Active == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "active"))
	}
	if ut.JSONSchema == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "jsonSchema"))
	}
	return
}

// Publicize creates UpdateDeviceSourceSchemaPayload from updateDeviceSourceSchemaPayload
func (ut *updateDeviceSourceSchemaPayload) Publicize() *UpdateDeviceSourceSchemaPayload {
	var pub UpdateDeviceSourceSchemaPayload
	if ut.Active != nil {
		pub.Active = *ut.Active
	}
	if ut.JSONSchema != nil {
		pub.JSONSchema = *ut.JSONSchema
	}
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	return &pub
}

// UpdateDeviceSourceSchemaPayload user type.
type UpdateDeviceSourceSchemaPayload struct {
	Active     bool   `form:"active" json:"active" yaml:"active" xml:"active"`
	JSONSchema string `form:"jsonSchema" json:"jsonSchema" yaml:"jsonSchema" xml:"jsonSchema"`
	Key        string `form:"key" json:"key" yaml:"key" xml:"key"`
}

// Validate validates the UpdateDeviceSourceSchemaPayload type instance.
func (ut *UpdateDeviceSourceSchemaPayload) Validate() (err error) {
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}

	if ut.JSONSchema == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "jsonSchema"))
	}
	return
}

// updateMemberPayload user type.
type updateMemberPayload struct {
	Role *string `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
}

// Validate validates the updateMemberPayload type instance.
func (ut *updateMemberPayload) Validate() (err error) {
	if ut.Role == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "role"))
	}
	return
}

// Publicize creates UpdateMemberPayload from updateMemberPayload
func (ut *updateMemberPayload) Publicize() *UpdateMemberPayload {
	var pub UpdateMemberPayload
	if ut.Role != nil {
		pub.Role = *ut.Role
	}
	return &pub
}

// UpdateMemberPayload user type.
type UpdateMemberPayload struct {
	Role string `form:"role" json:"role" yaml:"role" xml:"role"`
}

// Validate validates the UpdateMemberPayload type instance.
func (ut *UpdateMemberPayload) Validate() (err error) {
	if ut.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "role"))
	}
	return
}

// updateSourcePayload user type.
type updateSourcePayload struct {
	Active *bool   `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the updateSourcePayload type instance.
func (ut *updateSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates UpdateSourcePayload from updateSourcePayload
func (ut *updateSourcePayload) Publicize() *UpdateSourcePayload {
	var pub UpdateSourcePayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.TeamID != nil {
		pub.TeamID = ut.TeamID
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// UpdateSourcePayload user type.
type UpdateSourcePayload struct {
	Active *bool  `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	Name   string `form:"name" json:"name" yaml:"name" xml:"name"`
	TeamID *int   `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int   `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the UpdateSourcePayload type instance.
func (ut *UpdateSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	return
}

// updateStationPayload user type.
type updateStationPayload struct {
	Name       *string                `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	StatusJSON map[string]interface{} `form:"status_json,omitempty" json:"status_json,omitempty" yaml:"status_json,omitempty" xml:"status_json,omitempty"`
}

// Validate validates the updateStationPayload type instance.
func (ut *updateStationPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.StatusJSON == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "status_json"))
	}
	return
}

// Publicize creates UpdateStationPayload from updateStationPayload
func (ut *updateStationPayload) Publicize() *UpdateStationPayload {
	var pub UpdateStationPayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.StatusJSON != nil {
		pub.StatusJSON = ut.StatusJSON
	}
	return &pub
}

// UpdateStationPayload user type.
type UpdateStationPayload struct {
	Name       string                 `form:"name" json:"name" yaml:"name" xml:"name"`
	StatusJSON map[string]interface{} `form:"status_json" json:"status_json" yaml:"status_json" xml:"status_json"`
}

// Validate validates the UpdateStationPayload type instance.
func (ut *UpdateStationPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.StatusJSON == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "status_json"))
	}
	return
}

// updateTwitterAccountSourcePayload user type.
type updateTwitterAccountSourcePayload struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Publicize creates UpdateTwitterAccountSourcePayload from updateTwitterAccountSourcePayload
func (ut *updateTwitterAccountSourcePayload) Publicize() *UpdateTwitterAccountSourcePayload {
	var pub UpdateTwitterAccountSourcePayload
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	if ut.TeamID != nil {
		pub.TeamID = ut.TeamID
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// UpdateTwitterAccountSourcePayload user type.
type UpdateTwitterAccountSourcePayload struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// updateUserPasswordPayload user type.
type updateUserPasswordPayload struct {
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" yaml:"newPassword,omitempty" xml:"newPassword,omitempty"`
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" yaml:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
}

// Validate validates the updateUserPasswordPayload type instance.
func (ut *updateUserPasswordPayload) Validate() (err error) {
	if ut.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oldPassword"))
	}
	if ut.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "newPassword"))
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 10, true))
		}
	}
	if ut.OldPassword != nil {
		if utf8.RuneCountInString(*ut.OldPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.oldPassword`, *ut.OldPassword, utf8.RuneCountInString(*ut.OldPassword), 10, true))
		}
	}
	return
}

// Publicize creates UpdateUserPasswordPayload from updateUserPasswordPayload
func (ut *updateUserPasswordPayload) Publicize() *UpdateUserPasswordPayload {
	var pub UpdateUserPasswordPayload
	if ut.NewPassword != nil {
		pub.NewPassword = *ut.NewPassword
	}
	if ut.OldPassword != nil {
		pub.OldPassword = *ut.OldPassword
	}
	return &pub
}

// UpdateUserPasswordPayload user type.
type UpdateUserPasswordPayload struct {
	NewPassword string `form:"newPassword" json:"newPassword" yaml:"newPassword" xml:"newPassword"`
	OldPassword string `form:"oldPassword" json:"oldPassword" yaml:"oldPassword" xml:"oldPassword"`
}

// Validate validates the UpdateUserPasswordPayload type instance.
func (ut *UpdateUserPasswordPayload) Validate() (err error) {
	if ut.OldPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "oldPassword"))
	}
	if ut.NewPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "newPassword"))
	}
	if utf8.RuneCountInString(ut.NewPassword) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 10, true))
	}
	if utf8.RuneCountInString(ut.OldPassword) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.oldPassword`, ut.OldPassword, utf8.RuneCountInString(ut.OldPassword), 10, true))
	}
	return
}

// updateUserPayload user type.
type updateUserPayload struct {
	Bio   *string `form:"bio,omitempty" json:"bio,omitempty" yaml:"bio,omitempty" xml:"bio,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the updateUserPayload type instance.
func (ut *updateUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "bio"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (ut *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if ut.Bio != nil {
		pub.Bio = *ut.Bio
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// UpdateUserPayload user type.
type UpdateUserPayload struct {
	Bio   string `form:"bio" json:"bio" yaml:"bio" xml:"bio"`
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	Name  string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the UpdateUserPayload type instance.
func (ut *UpdateUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Bio == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "bio"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	return
}
