// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application User Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
)

// addFirmwarePayload user type.
type addFirmwarePayload struct {
	Etag    *string `form:"etag,omitempty" json:"etag,omitempty" yaml:"etag,omitempty" xml:"etag,omitempty"`
	Meta    *string `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
	Module  *string `form:"module,omitempty" json:"module,omitempty" yaml:"module,omitempty" xml:"module,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" yaml:"profile,omitempty" xml:"profile,omitempty"`
	URL     *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}

// Validate validates the addFirmwarePayload type instance.
func (ut *addFirmwarePayload) Validate() (err error) {
	if ut.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "etag"))
	}
	if ut.Module == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "module"))
	}
	if ut.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "profile"))
	}
	if ut.URL == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "url"))
	}
	if ut.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "meta"))
	}
	return
}

// Publicize creates AddFirmwarePayload from addFirmwarePayload
func (ut *addFirmwarePayload) Publicize() *AddFirmwarePayload {
	var pub AddFirmwarePayload
	if ut.Etag != nil {
		pub.Etag = *ut.Etag
	}
	if ut.Meta != nil {
		pub.Meta = *ut.Meta
	}
	if ut.Module != nil {
		pub.Module = *ut.Module
	}
	if ut.Profile != nil {
		pub.Profile = *ut.Profile
	}
	if ut.URL != nil {
		pub.URL = *ut.URL
	}
	return &pub
}

// AddFirmwarePayload user type.
type AddFirmwarePayload struct {
	Etag    string `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	Meta    string `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Module  string `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile string `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	URL     string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the AddFirmwarePayload type instance.
func (ut *AddFirmwarePayload) Validate() (err error) {
	if ut.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "etag"))
	}
	if ut.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "module"))
	}
	if ut.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "profile"))
	}
	if ut.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "url"))
	}
	if ut.Meta == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "meta"))
	}
	return
}

// deviceDataStreamsSummary user type.
type deviceDataStreamsSummary struct {
	Data *deviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *deviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// Publicize creates DeviceDataStreamsSummary from deviceDataStreamsSummary
func (ut *deviceDataStreamsSummary) Publicize() *DeviceDataStreamsSummary {
	var pub DeviceDataStreamsSummary
	if ut.Data != nil {
		pub.Data = ut.Data.Publicize()
	}
	if ut.Meta != nil {
		pub.Meta = ut.Meta.Publicize()
	}
	return &pub
}

// DeviceDataStreamsSummary user type.
type DeviceDataStreamsSummary struct {
	Data *DeviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *DeviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// deviceStreamSummary user type.
type deviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// Publicize creates DeviceStreamSummary from deviceStreamSummary
func (ut *deviceStreamSummary) Publicize() *DeviceStreamSummary {
	var pub DeviceStreamSummary
	if ut.Records != nil {
		pub.Records = ut.Records
	}
	if ut.Size != nil {
		pub.Size = ut.Size
	}
	return &pub
}

// DeviceStreamSummary user type.
type DeviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// updateDeviceFirmwarePayload user type.
type updateDeviceFirmwarePayload struct {
	DeviceID   *int `form:"deviceId,omitempty" json:"deviceId,omitempty" yaml:"deviceId,omitempty" xml:"deviceId,omitempty"`
	FirmwareID *int `form:"firmwareId,omitempty" json:"firmwareId,omitempty" yaml:"firmwareId,omitempty" xml:"firmwareId,omitempty"`
}

// Validate validates the updateDeviceFirmwarePayload type instance.
func (ut *updateDeviceFirmwarePayload) Validate() (err error) {
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "deviceId"))
	}
	if ut.FirmwareID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firmwareId"))
	}
	return
}

// Publicize creates UpdateDeviceFirmwarePayload from updateDeviceFirmwarePayload
func (ut *updateDeviceFirmwarePayload) Publicize() *UpdateDeviceFirmwarePayload {
	var pub UpdateDeviceFirmwarePayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.FirmwareID != nil {
		pub.FirmwareID = *ut.FirmwareID
	}
	return &pub
}

// UpdateDeviceFirmwarePayload user type.
type UpdateDeviceFirmwarePayload struct {
	DeviceID   int `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	FirmwareID int `form:"firmwareId" json:"firmwareId" yaml:"firmwareId" xml:"firmwareId"`
}

// Validate validates the UpdateDeviceFirmwarePayload type instance.
func (ut *UpdateDeviceFirmwarePayload) Validate() (err error) {

	return
}
