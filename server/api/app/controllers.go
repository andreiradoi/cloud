// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "fieldkit": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
	"regexp"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AdministratorController is the controller interface for the Administrator actions.
type AdministratorController interface {
	goa.Muxer
	Add(*AddAdministratorContext) error
	Delete(*DeleteAdministratorContext) error
	Get(*GetAdministratorContext) error
	GetID(*GetIDAdministratorContext) error
	List(*ListAdministratorContext) error
	ListID(*ListIDAdministratorContext) error
}

// MountAdministratorController "mounts" a Administrator resource controller on the given service.
func MountAdministratorController(service *goa.Service, ctrl AdministratorController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/:project_id/administrators", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:project_id/administrators/:user_id", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/administrators/@/:username", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/administrators", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddAdministratorPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("POST", "/projects/:project_id/administrators", ctrl.MuxHandler("Add", h, unmarshalAddAdministratorPayload))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Add", "route", "POST /projects/:project_id/administrators", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("DELETE", "/projects/:project_id/administrators/:user_id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Delete", "route", "DELETE /projects/:project_id/administrators/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/administrators/@/:username", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Get", "route", "GET /projects/@/:project/administrators/@/:username", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/:project_id/administrators/:user_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "GetID", "route", "GET /projects/:project_id/administrators/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/administrators", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "List", "route", "GET /projects/@/:project/administrators", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/:project_id/administrators", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "ListID", "route", "GET /projects/:project_id/administrators", "security", "jwt")
}

// handleAdministratorOrigin applies the CORS response headers corresponding to the origin.
func handleAdministratorOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddAdministratorPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddAdministratorPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addAdministratorPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DocumentController is the controller interface for the Document actions.
type DocumentController interface {
	goa.Muxer
	List(*ListDocumentContext) error
	ListID(*ListIDDocumentContext) error
}

// MountDocumentController "mounts" a Document resource controller on the given service.
func MountDocumentController(service *goa.Service, ctrl DocumentController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/documents", ctrl.MuxHandler("preflight", handleDocumentOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/documents", ctrl.MuxHandler("preflight", handleDocumentOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDocumentContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleDocumentOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/documents", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Document", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/documents")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDDocumentContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleDocumentOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/documents", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Document", "action", "ListID", "route", "GET /expeditions/:expedition_id/documents")
}

// handleDocumentOrigin applies the CORS response headers corresponding to the origin.
func handleDocumentOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ExpeditionController is the controller interface for the Expedition actions.
type ExpeditionController interface {
	goa.Muxer
	Add(*AddExpeditionContext) error
	Get(*GetExpeditionContext) error
	GetID(*GetIDExpeditionContext) error
	List(*ListExpeditionContext) error
	ListID(*ListIDExpeditionContext) error
	Update(*UpdateExpeditionContext) error
}

// MountExpeditionController "mounts" a Expedition resource controller on the given service.
func MountExpeditionController(service *goa.Service, ctrl ExpeditionController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/:project_id/expeditions", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddExpeditionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("POST", "/projects/:project_id/expeditions", ctrl.MuxHandler("Add", h, unmarshalAddExpeditionPayload))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Add", "route", "POST /projects/:project_id/expeditions", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "GetID", "route", "GET /expeditions/:expedition_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "List", "route", "GET /projects/@/:project/expeditions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/:project_id/expeditions", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "ListID", "route", "GET /projects/:project_id/expeditions", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddExpeditionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("PATCH", "/expeditions/:expedition_id", ctrl.MuxHandler("Update", h, unmarshalUpdateExpeditionPayload))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Update", "route", "PATCH /expeditions/:expedition_id", "security", "jwt")
}

// handleExpeditionOrigin applies the CORS response headers corresponding to the origin.
func handleExpeditionOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddExpeditionPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddExpeditionPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addExpeditionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateExpeditionPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateExpeditionPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addExpeditionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// FieldkitController is the controller interface for the Fieldkit actions.
type FieldkitController interface {
	goa.Muxer
	Add(*AddFieldkitContext) error
	GetID(*GetIDFieldkitContext) error
	List(*ListFieldkitContext) error
	ListID(*ListIDFieldkitContext) error
}

// MountFieldkitController "mounts" a Fieldkit resource controller on the given service.
func MountFieldkitController(service *goa.Service, ctrl FieldkitController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/inputs/fieldkits", ctrl.MuxHandler("preflight", handleFieldkitOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/inputs/fieldkits/:input_id", ctrl.MuxHandler("preflight", handleFieldkitOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/inputs/fieldkits", ctrl.MuxHandler("preflight", handleFieldkitOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddFieldkitContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddFieldkitInputPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleFieldkitOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expedition_id/inputs/fieldkits", ctrl.MuxHandler("Add", h, unmarshalAddFieldkitPayload))
	service.LogInfo("mount", "ctrl", "Fieldkit", "action", "Add", "route", "POST /expeditions/:expedition_id/inputs/fieldkits", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDFieldkitContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleFieldkitOrigin(h)
	service.Mux.Handle("GET", "/inputs/fieldkits/:input_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Fieldkit", "action", "GetID", "route", "GET /inputs/fieldkits/:input_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListFieldkitContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleFieldkitOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/inputs/fieldkits", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Fieldkit", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/inputs/fieldkits", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDFieldkitContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleFieldkitOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/inputs/fieldkits", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Fieldkit", "action", "ListID", "route", "GET /expeditions/:expedition_id/inputs/fieldkits", "security", "jwt")
}

// handleFieldkitOrigin applies the CORS response headers corresponding to the origin.
func handleFieldkitOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddFieldkitPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddFieldkitPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addFieldkitInputPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// InputController is the controller interface for the Input actions.
type InputController interface {
	goa.Muxer
	List(*ListInputContext) error
	ListID(*ListIDInputContext) error
	Update(*UpdateInputContext) error
}

// MountInputController "mounts" a Input resource controller on the given service.
func MountInputController(service *goa.Service, ctrl InputController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/inputs", ctrl.MuxHandler("preflight", handleInputOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/inputs", ctrl.MuxHandler("preflight", handleInputOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/inputs/:input_id", ctrl.MuxHandler("preflight", handleInputOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListInputContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/inputs", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Input", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/inputs", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDInputContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/inputs", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Input", "action", "ListID", "route", "GET /expeditions/:expedition_id/inputs", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateInputContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateInputPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputOrigin(h)
	service.Mux.Handle("PATCH", "/inputs/:input_id", ctrl.MuxHandler("Update", h, unmarshalUpdateInputPayload))
	service.LogInfo("mount", "ctrl", "Input", "action", "Update", "route", "PATCH /inputs/:input_id", "security", "jwt")
}

// handleInputOrigin applies the CORS response headers corresponding to the origin.
func handleInputOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalUpdateInputPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateInputPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateInputPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// InputTokenController is the controller interface for the InputToken actions.
type InputTokenController interface {
	goa.Muxer
	Add(*AddInputTokenContext) error
	Delete(*DeleteInputTokenContext) error
	List(*ListInputTokenContext) error
	ListID(*ListIDInputTokenContext) error
}

// MountInputTokenController "mounts" a InputToken resource controller on the given service.
func MountInputTokenController(service *goa.Service, ctrl InputTokenController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/input-tokens", ctrl.MuxHandler("preflight", handleInputTokenOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/input-tokens/:input_token_id", ctrl.MuxHandler("preflight", handleInputTokenOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/input-tokens", ctrl.MuxHandler("preflight", handleInputTokenOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddInputTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputTokenOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expedition_id/input-tokens", ctrl.MuxHandler("Add", h, nil))
	service.LogInfo("mount", "ctrl", "InputToken", "action", "Add", "route", "POST /expeditions/:expedition_id/input-tokens", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteInputTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputTokenOrigin(h)
	service.Mux.Handle("DELETE", "/input-tokens/:input_token_id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "InputToken", "action", "Delete", "route", "DELETE /input-tokens/:input_token_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListInputTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputTokenOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/input-tokens", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "InputToken", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/input-tokens", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDInputTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleInputTokenOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/input-tokens", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "InputToken", "action", "ListID", "route", "GET /expeditions/:expedition_id/input-tokens", "security", "jwt")
}

// handleInputTokenOrigin applies the CORS response headers corresponding to the origin.
func handleInputTokenOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// MemberController is the controller interface for the Member actions.
type MemberController interface {
	goa.Muxer
	Add(*AddMemberContext) error
	Delete(*DeleteMemberContext) error
	Get(*GetMemberContext) error
	GetID(*GetIDMemberContext) error
	List(*ListMemberContext) error
	ListID(*ListIDMemberContext) error
	Update(*UpdateMemberContext) error
}

// MountMemberController "mounts" a Member resource controller on the given service.
func MountMemberController(service *goa.Service, ctrl MemberController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/teams/:team_id/members", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/teams/:team_id/members/:user_id", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:username", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddMemberPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("POST", "/teams/:team_id/members", ctrl.MuxHandler("Add", h, unmarshalAddMemberPayload))
	service.LogInfo("mount", "ctrl", "Member", "action", "Add", "route", "POST /teams/:team_id/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("DELETE", "/teams/:team_id/members/:user_id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "Delete", "route", "DELETE /teams/:team_id/members/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:username", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:username", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/teams/:team_id/members/:user_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "GetID", "route", "GET /teams/:team_id/members/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/teams/:team_id/members", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "ListID", "route", "GET /teams/:team_id/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateMemberPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("PATCH", "/teams/:team_id/members/:user_id", ctrl.MuxHandler("Update", h, unmarshalUpdateMemberPayload))
	service.LogInfo("mount", "ctrl", "Member", "action", "Update", "route", "PATCH /teams/:team_id/members/:user_id", "security", "jwt")
}

// handleMemberOrigin applies the CORS response headers corresponding to the origin.
func handleMemberOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddMemberPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddMemberPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addMemberPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateMemberPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateMemberPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateMemberPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PictureController is the controller interface for the Picture actions.
type PictureController interface {
	goa.Muxer
	ExpeditionGetID(*ExpeditionGetIDPictureContext) error
	ProjectGetID(*ProjectGetIDPictureContext) error
	UserGetID(*UserGetIDPictureContext) error
}

// MountPictureController "mounts" a Picture resource controller on the given service.
func MountPictureController(service *goa.Service, ctrl PictureController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:project_id/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:user_id/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExpeditionGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ExpeditionGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/picture", ctrl.MuxHandler("ExpeditionGetID", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "ExpeditionGetID", "route", "GET /expeditions/:expedition_id/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewProjectGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ProjectGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/projects/:project_id/picture", ctrl.MuxHandler("ProjectGetID", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "ProjectGetID", "route", "GET /projects/:project_id/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUserGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.UserGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/users/:user_id/picture", ctrl.MuxHandler("UserGetID", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "UserGetID", "route", "GET /users/:user_id/picture")
}

// handlePictureOrigin applies the CORS response headers corresponding to the origin.
func handlePictureOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ProjectController is the controller interface for the Project actions.
type ProjectController interface {
	goa.Muxer
	Add(*AddProjectContext) error
	Get(*GetProjectContext) error
	GetID(*GetIDProjectContext) error
	List(*ListProjectContext) error
	ListCurrent(*ListCurrentProjectContext) error
	Update(*UpdateProjectContext) error
}

// MountProjectController "mounts" a Project resource controller on the given service.
func MountProjectController(service *goa.Service, ctrl ProjectController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:project_id", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/user/projects", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddProjectPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("POST", "/projects", ctrl.MuxHandler("Add", h, unmarshalAddProjectPayload))
	service.LogInfo("mount", "ctrl", "Project", "action", "Add", "route", "POST /projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "Get", "route", "GET /projects/@/:project")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects/:project_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "GetID", "route", "GET /projects/:project_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "List", "route", "GET /projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCurrentProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCurrent(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/user/projects", ctrl.MuxHandler("ListCurrent", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "ListCurrent", "route", "GET /user/projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddProjectPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("PATCH", "/projects/:project_id", ctrl.MuxHandler("Update", h, unmarshalUpdateProjectPayload))
	service.LogInfo("mount", "ctrl", "Project", "action", "Update", "route", "PATCH /projects/:project_id", "security", "jwt")
}

// handleProjectOrigin applies the CORS response headers corresponding to the origin.
func handleProjectOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddProjectPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddProjectPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addProjectPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateProjectPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateProjectPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addProjectPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger.yaml", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "api/public/swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger.yaml", "api/public/swagger/swagger.yaml")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.yaml", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.yaml", "route", "GET /swagger.yaml")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {
	spec1 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// TeamController is the controller interface for the Team actions.
type TeamController interface {
	goa.Muxer
	Add(*AddTeamContext) error
	Delete(*DeleteTeamContext) error
	Get(*GetTeamContext) error
	GetID(*GetIDTeamContext) error
	List(*ListTeamContext) error
	ListID(*ListIDTeamContext) error
	Update(*UpdateTeamContext) error
}

// MountTeamController "mounts" a Team resource controller on the given service.
func MountTeamController(service *goa.Service, ctrl TeamController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/teams", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/teams/:team_id", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTeamPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expedition_id/teams", ctrl.MuxHandler("Add", h, unmarshalAddTeamPayload))
	service.LogInfo("mount", "ctrl", "Team", "action", "Add", "route", "POST /expeditions/:expedition_id/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("DELETE", "/teams/:team_id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "Delete", "route", "DELETE /teams/:team_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/teams/:team_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "GetID", "route", "GET /teams/:team_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/teams", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "ListID", "route", "GET /expeditions/:expedition_id/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTeamPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("PATCH", "/teams/:team_id", ctrl.MuxHandler("Update", h, unmarshalUpdateTeamPayload))
	service.LogInfo("mount", "ctrl", "Team", "action", "Update", "route", "PATCH /teams/:team_id", "security", "jwt")
}

// handleTeamOrigin applies the CORS response headers corresponding to the origin.
func handleTeamOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddTeamPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddTeamPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTeamPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateTeamPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateTeamPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTeamPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// TwitterController is the controller interface for the Twitter actions.
type TwitterController interface {
	goa.Muxer
	Add(*AddTwitterContext) error
	Callback(*CallbackTwitterContext) error
	GetID(*GetIDTwitterContext) error
	List(*ListTwitterContext) error
	ListID(*ListIDTwitterContext) error
}

// MountTwitterController "mounts" a Twitter resource controller on the given service.
func MountTwitterController(service *goa.Service, ctrl TwitterController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expedition_id/inputs/twitter-accounts", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/twitter/callback", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/inputs/twitter-accounts/:input_id", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/inputs/twitter-accounts", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTwitterAccountInputPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expedition_id/inputs/twitter-accounts", ctrl.MuxHandler("Add", h, unmarshalAddTwitterPayload))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "Add", "route", "POST /expeditions/:expedition_id/inputs/twitter-accounts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCallbackTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Callback(rctx)
	}
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/twitter/callback", ctrl.MuxHandler("Callback", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "Callback", "route", "GET /twitter/callback")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/inputs/twitter-accounts/:input_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "GetID", "route", "GET /inputs/twitter-accounts/:input_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/inputs/twitter-accounts", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/inputs/twitter-accounts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expedition_id/inputs/twitter-accounts", ctrl.MuxHandler("ListID", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "ListID", "route", "GET /expeditions/:expedition_id/inputs/twitter-accounts", "security", "jwt")
}

// handleTwitterOrigin applies the CORS response headers corresponding to the origin.
func handleTwitterOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddTwitterPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddTwitterPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTwitterAccountInputPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	Add(*AddUserContext) error
	Get(*GetUserContext) error
	GetCurrent(*GetCurrentUserContext) error
	GetID(*GetIDUserContext) error
	List(*ListUserContext) error
	Login(*LoginUserContext) error
	Logout(*LogoutUserContext) error
	Refresh(*RefreshUserContext) error
	Update(*UpdateUserContext) error
	Validate(*ValidateUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/users", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/@/:username", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/user", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:user_id", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/login", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/logout", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/refresh", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/validate", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/users", ctrl.MuxHandler("Add", h, unmarshalAddUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Add", "route", "POST /users")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/users/@/:username", ctrl.MuxHandler("Get", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Get", "route", "GET /users/@/:username", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCurrentUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetCurrent(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/user", ctrl.MuxHandler("GetCurrent", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetCurrent", "route", "GET /user", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/users/:user_id", ctrl.MuxHandler("GetID", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetID", "route", "GET /users/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/users", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "List", "route", "GET /users", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLoginUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*LoginPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Login(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/login", ctrl.MuxHandler("Login", h, unmarshalLoginUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Login", "route", "POST /login")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLogoutUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Logout(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/logout", ctrl.MuxHandler("Logout", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Logout", "route", "POST /logout", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRefreshUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*RefreshUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Refresh(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/refresh", ctrl.MuxHandler("Refresh", h, unmarshalRefreshUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Refresh", "route", "POST /refresh")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("PATCH", "/users/:user_id", ctrl.MuxHandler("Update", h, unmarshalUpdateUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Update", "route", "PATCH /users/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewValidateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Validate(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/validate", ctrl.MuxHandler("Validate", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Validate", "route", "GET /validate")
}

// handleUserOrigin applies the CORS response headers corresponding to the origin.
func handleUserOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalLoginUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalLoginUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &loginPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalRefreshUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalRefreshUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &refreshUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
