// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
	"regexp"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// FirmwareController is the controller interface for the Firmware actions.
type FirmwareController interface {
	goa.Muxer
	Add(*AddFirmwareContext) error
	Delete(*DeleteFirmwareContext) error
	Download(*DownloadFirmwareContext) error
	List(*ListFirmwareContext) error
}

// MountFirmwareController "mounts" a Firmware resource controller on the given service.
func MountFirmwareController(service *goa.Service, ctrl FirmwareController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/firmware", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/firmware/:firmwareId", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/firmware/:firmwareId/download", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddFirmwarePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:admin")
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("PATCH", "/firmware", ctrl.MuxHandler("add", h, unmarshalAddFirmwarePayload))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Add", "route", "PATCH /firmware", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:admin")
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("DELETE", "/firmware/:firmwareId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Delete", "route", "DELETE /firmware/:firmwareId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDownloadFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Download(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("GET", "/firmware/:firmwareId/download", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Download", "route", "GET /firmware/:firmwareId/download")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("GET", "/firmware", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "List", "route", "GET /firmware")
}

// handleFirmwareOrigin applies the CORS response headers corresponding to the origin.
func handleFirmwareOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?127.0.0.1:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec3 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec3) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddFirmwarePayload unmarshals the request body into the context request data Payload field.
func unmarshalAddFirmwarePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addFirmwarePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DataController is the controller interface for the Data actions.
type DataController interface {
	goa.Muxer
	DeviceData(*DeviceDataDataContext) error
	DeviceSummary(*DeviceSummaryDataContext) error
}

// MountDataController "mounts" a Data resource controller on the given service.
func MountDataController(service *goa.Service, ctrl DataController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/data/devices/:deviceId/data", ctrl.MuxHandler("preflight", handleDataOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/data/devices/:deviceId/summary", ctrl.MuxHandler("preflight", handleDataOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeviceDataDataContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeviceData(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDataOrigin(h)
	service.Mux.Handle("GET", "/data/devices/:deviceId/data", ctrl.MuxHandler("device data", h, nil))
	service.LogInfo("mount", "ctrl", "Data", "action", "DeviceData", "route", "GET /data/devices/:deviceId/data", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeviceSummaryDataContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeviceSummary(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDataOrigin(h)
	service.Mux.Handle("GET", "/data/devices/:deviceId/summary", ctrl.MuxHandler("device summary", h, nil))
	service.LogInfo("mount", "ctrl", "Data", "action", "DeviceSummary", "route", "GET /data/devices/:deviceId/summary", "security", "jwt")
}

// handleDataOrigin applies the CORS response headers corresponding to the origin.
func handleDataOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?127.0.0.1:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec3 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec3) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// PictureController is the controller interface for the Picture actions.
type PictureController interface {
	goa.Muxer
	ProjectGetID(*ProjectGetIDPictureContext) error
	UserGetID(*UserGetIDPictureContext) error
	UserSaveID(*UserSaveIDPictureContext) error
}

// MountPictureController "mounts" a Picture resource controller on the given service.
func MountPictureController(service *goa.Service, ctrl PictureController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/:projectId/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:userId/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewProjectGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ProjectGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId/picture", ctrl.MuxHandler("project get id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "ProjectGetID", "route", "GET /projects/:projectId/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUserGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.UserGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/users/:userId/picture", ctrl.MuxHandler("user get id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "UserGetID", "route", "GET /users/:userId/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUserSaveIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.UserSaveID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("POST", "/users/:userId/picture", ctrl.MuxHandler("user save id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "UserSaveID", "route", "POST /users/:userId/picture")
}

// handlePictureOrigin applies the CORS response headers corresponding to the origin.
func handlePictureOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?127.0.0.1:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec3 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec3) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger.yaml", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "api/public/swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger.yaml", "api/public/swagger/swagger.yaml")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.yaml", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.yaml", "route", "GET /swagger.yaml")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {
	spec1 := regexp.MustCompile("(.+[.])?127.0.0.1:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec3 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec4 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec3) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec4) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
