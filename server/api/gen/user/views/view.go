// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// AvailableRoles is the viewed result type that is projected based on a view.
type AvailableRoles struct {
	// Type to project
	Projected *AvailableRolesView
	// View to render
	View string
}

// AvailableRolesView is a type that runs validations on a projected type.
type AvailableRolesView struct {
	Roles []*AvailableRoleView
}

// AvailableRoleView is a type that runs validations on a projected type.
type AvailableRoleView struct {
	ID   *int32
	Name *string
}

var (
	// AvailableRolesMap is a map of attribute names in result type AvailableRoles
	// indexed by view name.
	AvailableRolesMap = map[string][]string{
		"default": []string{
			"roles",
		},
	}
)

// ValidateAvailableRoles runs the validations defined on the viewed result
// type AvailableRoles.
func ValidateAvailableRoles(result *AvailableRoles) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAvailableRolesView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAvailableRolesView runs the validations defined on
// AvailableRolesView using the "default" view.
func ValidateAvailableRolesView(result *AvailableRolesView) (err error) {
	if result.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "result"))
	}
	for _, e := range result.Roles {
		if e != nil {
			if err2 := ValidateAvailableRoleView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAvailableRoleView runs the validations defined on AvailableRoleView.
func ValidateAvailableRoleView(result *AvailableRoleView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
