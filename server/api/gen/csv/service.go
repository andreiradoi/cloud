// Code generated by goa v3.1.2, DO NOT EDIT.
//
// csv service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package csv

import (
	"context"
	"io"

	csvviews "github.com/fieldkit/cloud/server/api/gen/csv/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the csv service interface.
type Service interface {
	// Export implements export.
	Export(context.Context, *ExportPayload) (res *ExportResult, err error)
	// Status implements status.
	Status(context.Context, *StatusPayload) (res *ExportStatus, err error)
	// Download implements download.
	Download(context.Context, *DownloadPayload) (res *DownloadResult, body io.ReadCloser, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "csv"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"export", "status", "download"}

// ExportPayload is the payload type of the csv service export method.
type ExportPayload struct {
	Auth       string
	Start      *int64
	End        *int64
	Stations   *string
	Sensors    *string
	Resolution *int32
	Aggregate  *string
	Complete   *bool
	Tail       *int32
}

// ExportResult is the result type of the csv service export method.
type ExportResult struct {
	Location string
}

// StatusPayload is the payload type of the csv service status method.
type StatusPayload struct {
	Auth string
	ID   string
}

// ExportStatus is the result type of the csv service status method.
type ExportStatus struct {
	ID          int64
	CreatedAt   int64
	CompletedAt *int64
	Progress    float32
	URL         *string
	Kind        string
	Args        interface{}
}

// DownloadPayload is the payload type of the csv service download method.
type DownloadPayload struct {
	Auth string
	ID   string
}

// DownloadResult is the result type of the csv service download method.
type DownloadResult struct {
	Length      int64
	ContentType string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad-request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewExportStatus initializes result type ExportStatus from viewed result type
// ExportStatus.
func NewExportStatus(vres *csvviews.ExportStatus) *ExportStatus {
	return newExportStatus(vres.Projected)
}

// NewViewedExportStatus initializes viewed result type ExportStatus from
// result type ExportStatus using the given view.
func NewViewedExportStatus(res *ExportStatus, view string) *csvviews.ExportStatus {
	p := newExportStatusView(res)
	return &csvviews.ExportStatus{Projected: p, View: "default"}
}

// newExportStatus converts projected type ExportStatus to service type
// ExportStatus.
func newExportStatus(vres *csvviews.ExportStatusView) *ExportStatus {
	res := &ExportStatus{
		CompletedAt: vres.CompletedAt,
		URL:         vres.URL,
		Args:        vres.Args,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Progress != nil {
		res.Progress = *vres.Progress
	}
	return res
}

// newExportStatusView projects result type ExportStatus to projected type
// ExportStatusView using the "default" view.
func newExportStatusView(res *ExportStatus) *csvviews.ExportStatusView {
	vres := &csvviews.ExportStatusView{
		ID:          &res.ID,
		CreatedAt:   &res.CreatedAt,
		CompletedAt: res.CompletedAt,
		Progress:    &res.Progress,
		URL:         res.URL,
		Kind:        &res.Kind,
		Args:        res.Args,
	}
	return vres
}
