// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// PendingInvites is the viewed result type that is projected based on a view.
type PendingInvites struct {
	// Type to project
	Projected *PendingInvitesView
	// View to render
	View string
}

// PendingInvitesView is a type that runs validations on a projected type.
type PendingInvitesView struct {
	Pending []*PendingInviteView
}

// PendingInviteView is a type that runs validations on a projected type.
type PendingInviteView struct {
	ID      *int64
	Project *ProjectSummaryView
	Time    *int64
	Role    *int32
}

// ProjectSummaryView is a type that runs validations on a projected type.
type ProjectSummaryView struct {
	ID   *int64
	Name *string
}

var (
	// PendingInvitesMap is a map of attribute names in result type PendingInvites
	// indexed by view name.
	PendingInvitesMap = map[string][]string{
		"default": []string{
			"pending",
		},
	}
)

// ValidatePendingInvites runs the validations defined on the viewed result
// type PendingInvites.
func ValidatePendingInvites(result *PendingInvites) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePendingInvitesView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePendingInvitesView runs the validations defined on
// PendingInvitesView using the "default" view.
func ValidatePendingInvitesView(result *PendingInvitesView) (err error) {
	if result.Pending == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pending", "result"))
	}
	for _, e := range result.Pending {
		if e != nil {
			if err2 := ValidatePendingInviteView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePendingInviteView runs the validations defined on PendingInviteView.
func ValidatePendingInviteView(result *PendingInviteView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "result"))
	}
	if result.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "result"))
	}
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectSummaryView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectSummaryView runs the validations defined on
// ProjectSummaryView.
func ValidateProjectSummaryView(result *ProjectSummaryView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
