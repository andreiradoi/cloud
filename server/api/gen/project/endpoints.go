// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package project

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "project" service endpoints.
type Endpoints struct {
	AddUpdate    goa.Endpoint
	DeleteUpdate goa.Endpoint
	ModifyUpdate goa.Endpoint
	Invites      goa.Endpoint
	LookupInvite goa.Endpoint
	AcceptInvite goa.Endpoint
	RejectInvite goa.Endpoint
}

// NewEndpoints wraps the methods of the "project" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		AddUpdate:    NewAddUpdateEndpoint(s, a.JWTAuth),
		DeleteUpdate: NewDeleteUpdateEndpoint(s, a.JWTAuth),
		ModifyUpdate: NewModifyUpdateEndpoint(s, a.JWTAuth),
		Invites:      NewInvitesEndpoint(s, a.JWTAuth),
		LookupInvite: NewLookupInviteEndpoint(s, a.JWTAuth),
		AcceptInvite: NewAcceptInviteEndpoint(s, a.JWTAuth),
		RejectInvite: NewRejectInviteEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "project" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AddUpdate = m(e.AddUpdate)
	e.DeleteUpdate = m(e.DeleteUpdate)
	e.ModifyUpdate = m(e.ModifyUpdate)
	e.Invites = m(e.Invites)
	e.LookupInvite = m(e.LookupInvite)
	e.AcceptInvite = m(e.AcceptInvite)
	e.RejectInvite = m(e.RejectInvite)
}

// NewAddUpdateEndpoint returns an endpoint function that calls the method "add
// update" of service "project".
func NewAddUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddUpdatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.AddUpdate(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProjectUpdate(res, "default")
		return vres, nil
	}
}

// NewDeleteUpdateEndpoint returns an endpoint function that calls the method
// "delete update" of service "project".
func NewDeleteUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteUpdatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteUpdate(ctx, p)
	}
}

// NewModifyUpdateEndpoint returns an endpoint function that calls the method
// "modify update" of service "project".
func NewModifyUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ModifyUpdatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.ModifyUpdate(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProjectUpdate(res, "default")
		return vres, nil
	}
}

// NewInvitesEndpoint returns an endpoint function that calls the method
// "invites" of service "project".
func NewInvitesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*InvitesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Invites(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPendingInvites(res, "default")
		return vres, nil
	}
}

// NewLookupInviteEndpoint returns an endpoint function that calls the method
// "lookup invite" of service "project".
func NewLookupInviteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LookupInvitePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.LookupInvite(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPendingInvites(res, "default")
		return vres, nil
	}
}

// NewAcceptInviteEndpoint returns an endpoint function that calls the method
// "accept invite" of service "project".
func NewAcceptInviteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AcceptInvitePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.AcceptInvite(ctx, p)
	}
}

// NewRejectInviteEndpoint returns an endpoint function that calls the method
// "reject invite" of service "project".
func NewRejectInviteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RejectInvitePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.RejectInvite(ctx, p)
	}
}
