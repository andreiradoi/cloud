// Code generated by goa v3.1.2, DO NOT EDIT.
//
// station client HTTP transport
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"context"
	"net/http"

	station "github.com/fieldkit/cloud/server/api/gen/station"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the station service endpoint HTTP clients.
type Client struct {
	// Add Doer is the HTTP client used to make requests to the add endpoint.
	AddDoer goahttp.Doer

	// Get Doer is the HTTP client used to make requests to the get endpoint.
	GetDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// ListMine Doer is the HTTP client used to make requests to the list mine
	// endpoint.
	ListMineDoer goahttp.Doer

	// ListProject Doer is the HTTP client used to make requests to the list
	// project endpoint.
	ListProjectDoer goahttp.Doer

	// Photo Doer is the HTTP client used to make requests to the photo endpoint.
	PhotoDoer goahttp.Doer

	// ListAll Doer is the HTTP client used to make requests to the list all
	// endpoint.
	ListAllDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the station service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddDoer:             doer,
		GetDoer:             doer,
		UpdateDoer:          doer,
		ListMineDoer:        doer,
		ListProjectDoer:     doer,
		PhotoDoer:           doer,
		ListAllDoer:         doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Add returns an endpoint that makes HTTP requests to the station service add
// server.
func (c *Client) Add() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddRequest(c.encoder)
		decodeResponse = DecodeAddResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "add", err)
		}
		return decodeResponse(resp)
	}
}

// Get returns an endpoint that makes HTTP requests to the station service get
// server.
func (c *Client) Get() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetRequest(c.encoder)
		decodeResponse = DecodeGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "get", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the station service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "update", err)
		}
		return decodeResponse(resp)
	}
}

// ListMine returns an endpoint that makes HTTP requests to the station service
// list mine server.
func (c *Client) ListMine() goa.Endpoint {
	var (
		encodeRequest  = EncodeListMineRequest(c.encoder)
		decodeResponse = DecodeListMineResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListMineRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListMineDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "list mine", err)
		}
		return decodeResponse(resp)
	}
}

// ListProject returns an endpoint that makes HTTP requests to the station
// service list project server.
func (c *Client) ListProject() goa.Endpoint {
	var (
		encodeRequest  = EncodeListProjectRequest(c.encoder)
		decodeResponse = DecodeListProjectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListProjectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListProjectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "list project", err)
		}
		return decodeResponse(resp)
	}
}

// Photo returns an endpoint that makes HTTP requests to the station service
// photo server.
func (c *Client) Photo() goa.Endpoint {
	var (
		encodeRequest  = EncodePhotoRequest(c.encoder)
		decodeResponse = DecodePhotoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPhotoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PhotoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "photo", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, goahttp.ErrDecodingError("station", "photo", err)
		}
		return &station.PhotoResponseData{Result: res.(*station.PhotoResult), Body: resp.Body}, nil
	}
}

// ListAll returns an endpoint that makes HTTP requests to the station service
// list all server.
func (c *Client) ListAll() goa.Endpoint {
	var (
		encodeRequest  = EncodeListAllRequest(c.encoder)
		decodeResponse = DecodeListAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListAllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("station", "list all", err)
		}
		return decodeResponse(resp)
	}
}
