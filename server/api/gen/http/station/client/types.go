// Code generated by goa v3.1.2, DO NOT EDIT.
//
// station HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	station "github.com/fieldkit/cloud/server/api/gen/station"
	stationviews "github.com/fieldkit/cloud/server/api/gen/station/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "station" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Name         string  `form:"name" json:"name" xml:"name"`
	DeviceID     string  `form:"deviceId" json:"deviceId" xml:"deviceId"`
	LocationName *string `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	StatusPb     *string `form:"statusPb,omitempty" json:"statusPb,omitempty" xml:"statusPb,omitempty"`
}

// UpdateRequestBody is the type of the "station" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Name         string  `form:"name" json:"name" xml:"name"`
	LocationName *string `form:"location_name,omitempty" json:"location_name,omitempty" xml:"location_name,omitempty"`
	StatusPb     *string `form:"status_pb,omitempty" json:"status_pb,omitempty" xml:"status_pb,omitempty"`
}

// AddResponseBody is the type of the "station" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	ID                 *int32                             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name               *string                            `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Owner              *StationOwnerResponseBody          `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	DeviceID           *string                            `form:"deviceId,omitempty" json:"deviceId,omitempty" xml:"deviceId,omitempty"`
	Uploads            []*StationUploadResponseBody       `form:"uploads,omitempty" json:"uploads,omitempty" xml:"uploads,omitempty"`
	Images             []*ImageRefResponseBody            `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Photos             *StationPhotosResponseBody         `form:"photos,omitempty" json:"photos,omitempty" xml:"photos,omitempty"`
	ReadOnly           *bool                              `form:"readOnly,omitempty" json:"readOnly,omitempty" xml:"readOnly,omitempty"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations,omitempty" json:"configurations,omitempty" xml:"configurations,omitempty"`
	Updated            *int64                             `form:"updated,omitempty" json:"updated,omitempty" xml:"updated,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceName          *string                            `form:"placeName,omitempty" json:"placeName,omitempty" xml:"placeName,omitempty"`
	NativeLandName     *string                            `form:"nativeLandName,omitempty" json:"nativeLandName,omitempty" xml:"nativeLandName,omitempty"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// GetResponseBody is the type of the "station" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID                 *int32                             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name               *string                            `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Owner              *StationOwnerResponseBody          `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	DeviceID           *string                            `form:"deviceId,omitempty" json:"deviceId,omitempty" xml:"deviceId,omitempty"`
	Uploads            []*StationUploadResponseBody       `form:"uploads,omitempty" json:"uploads,omitempty" xml:"uploads,omitempty"`
	Images             []*ImageRefResponseBody            `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Photos             *StationPhotosResponseBody         `form:"photos,omitempty" json:"photos,omitempty" xml:"photos,omitempty"`
	ReadOnly           *bool                              `form:"readOnly,omitempty" json:"readOnly,omitempty" xml:"readOnly,omitempty"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations,omitempty" json:"configurations,omitempty" xml:"configurations,omitempty"`
	Updated            *int64                             `form:"updated,omitempty" json:"updated,omitempty" xml:"updated,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceName          *string                            `form:"placeName,omitempty" json:"placeName,omitempty" xml:"placeName,omitempty"`
	NativeLandName     *string                            `form:"nativeLandName,omitempty" json:"nativeLandName,omitempty" xml:"nativeLandName,omitempty"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// UpdateResponseBody is the type of the "station" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	ID                 *int32                             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name               *string                            `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Owner              *StationOwnerResponseBody          `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	DeviceID           *string                            `form:"deviceId,omitempty" json:"deviceId,omitempty" xml:"deviceId,omitempty"`
	Uploads            []*StationUploadResponseBody       `form:"uploads,omitempty" json:"uploads,omitempty" xml:"uploads,omitempty"`
	Images             []*ImageRefResponseBody            `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Photos             *StationPhotosResponseBody         `form:"photos,omitempty" json:"photos,omitempty" xml:"photos,omitempty"`
	ReadOnly           *bool                              `form:"readOnly,omitempty" json:"readOnly,omitempty" xml:"readOnly,omitempty"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations,omitempty" json:"configurations,omitempty" xml:"configurations,omitempty"`
	Updated            *int64                             `form:"updated,omitempty" json:"updated,omitempty" xml:"updated,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceName          *string                            `form:"placeName,omitempty" json:"placeName,omitempty" xml:"placeName,omitempty"`
	NativeLandName     *string                            `form:"nativeLandName,omitempty" json:"nativeLandName,omitempty" xml:"nativeLandName,omitempty"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// ListMineResponseBody is the type of the "station" service "list mine"
// endpoint HTTP response body.
type ListMineResponseBody struct {
	Stations StationFullCollectionResponseBody `form:"stations,omitempty" json:"stations,omitempty" xml:"stations,omitempty"`
}

// ListProjectResponseBody is the type of the "station" service "list project"
// endpoint HTTP response body.
type ListProjectResponseBody struct {
	Stations StationFullCollectionResponseBody `form:"stations,omitempty" json:"stations,omitempty" xml:"stations,omitempty"`
}

// AddBadRequestResponseBody is the type of the "station" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody string

// AddForbiddenResponseBody is the type of the "station" service "add" endpoint
// HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody string

// AddNotFoundResponseBody is the type of the "station" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody string

// AddUnauthorizedResponseBody is the type of the "station" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody string

// GetBadRequestResponseBody is the type of the "station" service "get"
// endpoint HTTP response body for the "bad-request" error.
type GetBadRequestResponseBody string

// GetForbiddenResponseBody is the type of the "station" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody string

// GetNotFoundResponseBody is the type of the "station" service "get" endpoint
// HTTP response body for the "not-found" error.
type GetNotFoundResponseBody string

// GetUnauthorizedResponseBody is the type of the "station" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody string

// UpdateBadRequestResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "bad-request" error.
type UpdateBadRequestResponseBody string

// UpdateForbiddenResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody string

// UpdateNotFoundResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "not-found" error.
type UpdateNotFoundResponseBody string

// UpdateUnauthorizedResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody string

// ListMineBadRequestResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "bad-request" error.
type ListMineBadRequestResponseBody string

// ListMineForbiddenResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "forbidden" error.
type ListMineForbiddenResponseBody string

// ListMineNotFoundResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "not-found" error.
type ListMineNotFoundResponseBody string

// ListMineUnauthorizedResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "unauthorized" error.
type ListMineUnauthorizedResponseBody string

// ListProjectBadRequestResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "bad-request" error.
type ListProjectBadRequestResponseBody string

// ListProjectForbiddenResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "forbidden" error.
type ListProjectForbiddenResponseBody string

// ListProjectNotFoundResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "not-found" error.
type ListProjectNotFoundResponseBody string

// ListProjectUnauthorizedResponseBody is the type of the "station" service
// "list project" endpoint HTTP response body for the "unauthorized" error.
type ListProjectUnauthorizedResponseBody string

// PhotoBadRequestResponseBody is the type of the "station" service "photo"
// endpoint HTTP response body for the "bad-request" error.
type PhotoBadRequestResponseBody string

// PhotoForbiddenResponseBody is the type of the "station" service "photo"
// endpoint HTTP response body for the "forbidden" error.
type PhotoForbiddenResponseBody string

// PhotoNotFoundResponseBody is the type of the "station" service "photo"
// endpoint HTTP response body for the "not-found" error.
type PhotoNotFoundResponseBody string

// PhotoUnauthorizedResponseBody is the type of the "station" service "photo"
// endpoint HTTP response body for the "unauthorized" error.
type PhotoUnauthorizedResponseBody string

// StationOwnerResponseBody is used to define fields on response body types.
type StationOwnerResponseBody struct {
	ID   *int32  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StationUploadResponseBody is used to define fields on response body types.
type StationUploadResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Time     *int64  `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	UploadID *string `form:"uploadId,omitempty" json:"uploadId,omitempty" xml:"uploadId,omitempty"`
	Size     *int64  `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Blocks   []int64 `form:"blocks,omitempty" json:"blocks,omitempty" xml:"blocks,omitempty"`
}

// ImageRefResponseBody is used to define fields on response body types.
type ImageRefResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// StationPhotosResponseBody is used to define fields on response body types.
type StationPhotosResponseBody struct {
	Small *string `form:"small,omitempty" json:"small,omitempty" xml:"small,omitempty"`
}

// StationConfigurationsResponseBody is used to define fields on response body
// types.
type StationConfigurationsResponseBody struct {
	All []*StationConfigurationResponseBody `form:"all,omitempty" json:"all,omitempty" xml:"all,omitempty"`
}

// StationConfigurationResponseBody is used to define fields on response body
// types.
type StationConfigurationResponseBody struct {
	ID           *int64                       `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Time         *int64                       `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	ProvisionID  *int64                       `form:"provisionId,omitempty" json:"provisionId,omitempty" xml:"provisionId,omitempty"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	SourceID     *int32                       `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Modules      []*StationModuleResponseBody `form:"modules,omitempty" json:"modules,omitempty" xml:"modules,omitempty"`
}

// StationModuleResponseBody is used to define fields on response body types.
type StationModuleResponseBody struct {
	ID           *int64                       `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	HardwareID   *string                      `form:"hardwareId,omitempty" json:"hardwareId,omitempty" xml:"hardwareId,omitempty"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	Name         *string                      `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Position     *int32                       `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
	Flags        *int32                       `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
	Internal     *bool                        `form:"internal,omitempty" json:"internal,omitempty" xml:"internal,omitempty"`
	Sensors      []*StationSensorResponseBody `form:"sensors,omitempty" json:"sensors,omitempty" xml:"sensors,omitempty"`
}

// StationSensorResponseBody is used to define fields on response body types.
type StationSensorResponseBody struct {
	Name          *string                    `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	UnitOfMeasure *string                    `form:"unitOfMeasure,omitempty" json:"unitOfMeasure,omitempty" xml:"unitOfMeasure,omitempty"`
	Reading       *SensorReadingResponseBody `form:"reading,omitempty" json:"reading,omitempty" xml:"reading,omitempty"`
	Key           *string                    `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Ranges        []*SensorRangeResponseBody `form:"ranges,omitempty" json:"ranges,omitempty" xml:"ranges,omitempty"`
}

// SensorReadingResponseBody is used to define fields on response body types.
type SensorReadingResponseBody struct {
	Last *float32 `form:"last,omitempty" json:"last,omitempty" xml:"last,omitempty"`
	Time *int64   `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// SensorRangeResponseBody is used to define fields on response body types.
type SensorRangeResponseBody struct {
	Minimum *float32 `form:"minimum,omitempty" json:"minimum,omitempty" xml:"minimum,omitempty"`
	Maximum *float32 `form:"maximum,omitempty" json:"maximum,omitempty" xml:"maximum,omitempty"`
}

// StationLocationResponseBody is used to define fields on response body types.
type StationLocationResponseBody struct {
	Latitude  *float64 `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
}

// StationFullCollectionResponseBody is used to define fields on response body
// types.
type StationFullCollectionResponseBody []*StationFullResponseBody

// StationFullResponseBody is used to define fields on response body types.
type StationFullResponseBody struct {
	ID                 *int32                             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name               *string                            `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Owner              *StationOwnerResponseBody          `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	DeviceID           *string                            `form:"deviceId,omitempty" json:"deviceId,omitempty" xml:"deviceId,omitempty"`
	Uploads            []*StationUploadResponseBody       `form:"uploads,omitempty" json:"uploads,omitempty" xml:"uploads,omitempty"`
	Images             []*ImageRefResponseBody            `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Photos             *StationPhotosResponseBody         `form:"photos,omitempty" json:"photos,omitempty" xml:"photos,omitempty"`
	ReadOnly           *bool                              `form:"readOnly,omitempty" json:"readOnly,omitempty" xml:"readOnly,omitempty"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations,omitempty" json:"configurations,omitempty" xml:"configurations,omitempty"`
	Updated            *int64                             `form:"updated,omitempty" json:"updated,omitempty" xml:"updated,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceName          *string                            `form:"placeName,omitempty" json:"placeName,omitempty" xml:"placeName,omitempty"`
	NativeLandName     *string                            `form:"nativeLandName,omitempty" json:"nativeLandName,omitempty" xml:"nativeLandName,omitempty"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "station" service.
func NewAddRequestBody(p *station.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Name:         p.Name,
		DeviceID:     p.DeviceID,
		LocationName: p.LocationName,
		StatusPb:     p.StatusPb,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "station" service.
func NewUpdateRequestBody(p *station.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:         p.Name,
		LocationName: p.LocationName,
		StatusPb:     p.StatusPb,
	}
	return body
}

// NewAddStationFullOK builds a "station" service "add" endpoint result from a
// HTTP "OK" response.
func NewAddStationFullOK(body *AddResponseBody) *stationviews.StationFullView {
	v := &stationviews.StationFullView{
		ID:                 body.ID,
		Name:               body.Name,
		DeviceID:           body.DeviceID,
		ReadOnly:           body.ReadOnly,
		Battery:            body.Battery,
		RecordingStartedAt: body.RecordingStartedAt,
		MemoryUsed:         body.MemoryUsed,
		MemoryAvailable:    body.MemoryAvailable,
		FirmwareNumber:     body.FirmwareNumber,
		FirmwareTime:       body.FirmwareTime,
		Updated:            body.Updated,
		LocationName:       body.LocationName,
		PlaceName:          body.PlaceName,
		NativeLandName:     body.NativeLandName,
	}
	v.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(body.Owner)
	v.Uploads = make([]*stationviews.StationUploadView, len(body.Uploads))
	for i, val := range body.Uploads {
		v.Uploads[i] = unmarshalStationUploadResponseBodyToStationviewsStationUploadView(val)
	}
	v.Images = make([]*stationviews.ImageRefView, len(body.Images))
	for i, val := range body.Images {
		v.Images[i] = unmarshalImageRefResponseBodyToStationviewsImageRefView(val)
	}
	v.Photos = unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(body.Photos)
	v.Configurations = unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView(body.Configurations)
	if body.Location != nil {
		v.Location = unmarshalStationLocationResponseBodyToStationviewsStationLocationView(body.Location)
	}

	return v
}

// NewAddBadRequest builds a station service add endpoint bad-request error.
func NewAddBadRequest(body AddBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewAddForbidden builds a station service add endpoint forbidden error.
func NewAddForbidden(body AddForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewAddNotFound builds a station service add endpoint not-found error.
func NewAddNotFound(body AddNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewAddUnauthorized builds a station service add endpoint unauthorized error.
func NewAddUnauthorized(body AddUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// NewGetStationFullOK builds a "station" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetStationFullOK(body *GetResponseBody) *stationviews.StationFullView {
	v := &stationviews.StationFullView{
		ID:                 body.ID,
		Name:               body.Name,
		DeviceID:           body.DeviceID,
		ReadOnly:           body.ReadOnly,
		Battery:            body.Battery,
		RecordingStartedAt: body.RecordingStartedAt,
		MemoryUsed:         body.MemoryUsed,
		MemoryAvailable:    body.MemoryAvailable,
		FirmwareNumber:     body.FirmwareNumber,
		FirmwareTime:       body.FirmwareTime,
		Updated:            body.Updated,
		LocationName:       body.LocationName,
		PlaceName:          body.PlaceName,
		NativeLandName:     body.NativeLandName,
	}
	v.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(body.Owner)
	v.Uploads = make([]*stationviews.StationUploadView, len(body.Uploads))
	for i, val := range body.Uploads {
		v.Uploads[i] = unmarshalStationUploadResponseBodyToStationviewsStationUploadView(val)
	}
	v.Images = make([]*stationviews.ImageRefView, len(body.Images))
	for i, val := range body.Images {
		v.Images[i] = unmarshalImageRefResponseBodyToStationviewsImageRefView(val)
	}
	v.Photos = unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(body.Photos)
	v.Configurations = unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView(body.Configurations)
	if body.Location != nil {
		v.Location = unmarshalStationLocationResponseBodyToStationviewsStationLocationView(body.Location)
	}

	return v
}

// NewGetBadRequest builds a station service get endpoint bad-request error.
func NewGetBadRequest(body GetBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewGetForbidden builds a station service get endpoint forbidden error.
func NewGetForbidden(body GetForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewGetNotFound builds a station service get endpoint not-found error.
func NewGetNotFound(body GetNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewGetUnauthorized builds a station service get endpoint unauthorized error.
func NewGetUnauthorized(body GetUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// NewUpdateStationFullOK builds a "station" service "update" endpoint result
// from a HTTP "OK" response.
func NewUpdateStationFullOK(body *UpdateResponseBody) *stationviews.StationFullView {
	v := &stationviews.StationFullView{
		ID:                 body.ID,
		Name:               body.Name,
		DeviceID:           body.DeviceID,
		ReadOnly:           body.ReadOnly,
		Battery:            body.Battery,
		RecordingStartedAt: body.RecordingStartedAt,
		MemoryUsed:         body.MemoryUsed,
		MemoryAvailable:    body.MemoryAvailable,
		FirmwareNumber:     body.FirmwareNumber,
		FirmwareTime:       body.FirmwareTime,
		Updated:            body.Updated,
		LocationName:       body.LocationName,
		PlaceName:          body.PlaceName,
		NativeLandName:     body.NativeLandName,
	}
	v.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(body.Owner)
	v.Uploads = make([]*stationviews.StationUploadView, len(body.Uploads))
	for i, val := range body.Uploads {
		v.Uploads[i] = unmarshalStationUploadResponseBodyToStationviewsStationUploadView(val)
	}
	v.Images = make([]*stationviews.ImageRefView, len(body.Images))
	for i, val := range body.Images {
		v.Images[i] = unmarshalImageRefResponseBodyToStationviewsImageRefView(val)
	}
	v.Photos = unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(body.Photos)
	v.Configurations = unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView(body.Configurations)
	if body.Location != nil {
		v.Location = unmarshalStationLocationResponseBodyToStationviewsStationLocationView(body.Location)
	}

	return v
}

// NewUpdateBadRequest builds a station service update endpoint bad-request
// error.
func NewUpdateBadRequest(body UpdateBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewUpdateForbidden builds a station service update endpoint forbidden error.
func NewUpdateForbidden(body UpdateForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewUpdateNotFound builds a station service update endpoint not-found error.
func NewUpdateNotFound(body UpdateNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewUpdateUnauthorized builds a station service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body UpdateUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// NewListMineStationsFullOK builds a "station" service "list mine" endpoint
// result from a HTTP "OK" response.
func NewListMineStationsFullOK(body *ListMineResponseBody) *stationviews.StationsFullView {
	v := &stationviews.StationsFullView{}
	v.Stations = make([]*stationviews.StationFullView, len(body.Stations))
	for i, val := range body.Stations {
		v.Stations[i] = unmarshalStationFullResponseBodyToStationviewsStationFullView(val)
	}

	return v
}

// NewListMineBadRequest builds a station service list mine endpoint
// bad-request error.
func NewListMineBadRequest(body ListMineBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewListMineForbidden builds a station service list mine endpoint forbidden
// error.
func NewListMineForbidden(body ListMineForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewListMineNotFound builds a station service list mine endpoint not-found
// error.
func NewListMineNotFound(body ListMineNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewListMineUnauthorized builds a station service list mine endpoint
// unauthorized error.
func NewListMineUnauthorized(body ListMineUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// NewListProjectStationsFullOK builds a "station" service "list project"
// endpoint result from a HTTP "OK" response.
func NewListProjectStationsFullOK(body *ListProjectResponseBody) *stationviews.StationsFullView {
	v := &stationviews.StationsFullView{}
	v.Stations = make([]*stationviews.StationFullView, len(body.Stations))
	for i, val := range body.Stations {
		v.Stations[i] = unmarshalStationFullResponseBodyToStationviewsStationFullView(val)
	}

	return v
}

// NewListProjectBadRequest builds a station service list project endpoint
// bad-request error.
func NewListProjectBadRequest(body ListProjectBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewListProjectForbidden builds a station service list project endpoint
// forbidden error.
func NewListProjectForbidden(body ListProjectForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewListProjectNotFound builds a station service list project endpoint
// not-found error.
func NewListProjectNotFound(body ListProjectNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewListProjectUnauthorized builds a station service list project endpoint
// unauthorized error.
func NewListProjectUnauthorized(body ListProjectUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// NewPhotoResultOK builds a "station" service "photo" endpoint result from a
// HTTP "OK" response.
func NewPhotoResultOK(length int64, contentType string) *station.PhotoResult {
	v := &station.PhotoResult{}
	v.Length = length
	v.ContentType = contentType

	return v
}

// NewPhotoBadRequest builds a station service photo endpoint bad-request error.
func NewPhotoBadRequest(body PhotoBadRequestResponseBody) station.BadRequest {
	v := station.BadRequest(body)
	return v
}

// NewPhotoForbidden builds a station service photo endpoint forbidden error.
func NewPhotoForbidden(body PhotoForbiddenResponseBody) station.Forbidden {
	v := station.Forbidden(body)
	return v
}

// NewPhotoNotFound builds a station service photo endpoint not-found error.
func NewPhotoNotFound(body PhotoNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewPhotoUnauthorized builds a station service photo endpoint unauthorized
// error.
func NewPhotoUnauthorized(body PhotoUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// ValidateStationOwnerResponseBody runs the validations defined on
// StationOwnerResponseBody
func ValidateStationOwnerResponseBody(body *StationOwnerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateStationUploadResponseBody runs the validations defined on
// StationUploadResponseBody
func ValidateStationUploadResponseBody(body *StationUploadResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	if body.UploadID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploadId", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Blocks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("blocks", "body"))
	}
	return
}

// ValidateImageRefResponseBody runs the validations defined on
// ImageRefResponseBody
func ValidateImageRefResponseBody(body *ImageRefResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateStationPhotosResponseBody runs the validations defined on
// StationPhotosResponseBody
func ValidateStationPhotosResponseBody(body *StationPhotosResponseBody) (err error) {
	if body.Small == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("small", "body"))
	}
	return
}

// ValidateStationConfigurationsResponseBody runs the validations defined on
// StationConfigurationsResponseBody
func ValidateStationConfigurationsResponseBody(body *StationConfigurationsResponseBody) (err error) {
	if body.All == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("all", "body"))
	}
	for _, e := range body.All {
		if e != nil {
			if err2 := ValidateStationConfigurationResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStationConfigurationResponseBody runs the validations defined on
// StationConfigurationResponseBody
func ValidateStationConfigurationResponseBody(body *StationConfigurationResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProvisionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provisionId", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	if body.Modules == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("modules", "body"))
	}
	for _, e := range body.Modules {
		if e != nil {
			if err2 := ValidateStationModuleResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStationModuleResponseBody runs the validations defined on
// StationModuleResponseBody
func ValidateStationModuleResponseBody(body *StationModuleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Position == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("position", "body"))
	}
	if body.Flags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flags", "body"))
	}
	if body.Internal == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("internal", "body"))
	}
	if body.Sensors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sensors", "body"))
	}
	for _, e := range body.Sensors {
		if e != nil {
			if err2 := ValidateStationSensorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStationSensorResponseBody runs the validations defined on
// StationSensorResponseBody
func ValidateStationSensorResponseBody(body *StationSensorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.UnitOfMeasure == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unitOfMeasure", "body"))
	}
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Ranges == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ranges", "body"))
	}
	if body.Reading != nil {
		if err2 := ValidateSensorReadingResponseBody(body.Reading); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Ranges {
		if e != nil {
			if err2 := ValidateSensorRangeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSensorReadingResponseBody runs the validations defined on
// SensorReadingResponseBody
func ValidateSensorReadingResponseBody(body *SensorReadingResponseBody) (err error) {
	if body.Last == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	return
}

// ValidateSensorRangeResponseBody runs the validations defined on
// SensorRangeResponseBody
func ValidateSensorRangeResponseBody(body *SensorRangeResponseBody) (err error) {
	if body.Minimum == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("minimum", "body"))
	}
	if body.Maximum == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("maximum", "body"))
	}
	return
}

// ValidateStationLocationResponseBody runs the validations defined on
// StationLocationResponseBody
func ValidateStationLocationResponseBody(body *StationLocationResponseBody) (err error) {
	if body.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("latitude", "body"))
	}
	if body.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("longitude", "body"))
	}
	return
}

// ValidateStationFullCollectionResponseBody runs the validations defined on
// StationFullCollectionResponseBody
func ValidateStationFullCollectionResponseBody(body StationFullCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateStationFullResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStationFullResponseBody runs the validations defined on
// StationFullResponseBody
func ValidateStationFullResponseBody(body *StationFullResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Owner == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("owner", "body"))
	}
	if body.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deviceId", "body"))
	}
	if body.Uploads == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploads", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.Photos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photos", "body"))
	}
	if body.ReadOnly == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("readOnly", "body"))
	}
	if body.Configurations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("configurations", "body"))
	}
	if body.Updated == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated", "body"))
	}
	if body.Owner != nil {
		if err2 := ValidateStationOwnerResponseBody(body.Owner); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Uploads {
		if e != nil {
			if err2 := ValidateStationUploadResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Images {
		if e != nil {
			if err2 := ValidateImageRefResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Photos != nil {
		if err2 := ValidateStationPhotosResponseBody(body.Photos); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Configurations != nil {
		if err2 := ValidateStationConfigurationsResponseBody(body.Configurations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Location != nil {
		if err2 := ValidateStationLocationResponseBody(body.Location); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
