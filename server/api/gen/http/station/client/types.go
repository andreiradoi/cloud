// Code generated by goa v3.1.2, DO NOT EDIT.
//
// station HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	station "github.com/fieldkit/cloud/server/api/gen/station"
	stationviews "github.com/fieldkit/cloud/server/api/gen/station/views"
	goa "goa.design/goa/v3/pkg"
)

// StationResponseBody is the type of the "station" service "station" endpoint
// HTTP response body.
type StationResponseBody struct {
	ID       *int32                       `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string                      `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Owner    *StationOwnerResponseBody    `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	DeviceID *string                      `form:"device_id,omitempty" json:"device_id,omitempty" xml:"device_id,omitempty"`
	Uploads  []*StationUploadResponseBody `form:"uploads,omitempty" json:"uploads,omitempty" xml:"uploads,omitempty"`
	Images   []*ImageRefResponseBody      `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Photos   *StationPhotosResponseBody   `form:"photos,omitempty" json:"photos,omitempty" xml:"photos,omitempty"`
	ReadOnly *bool                        `form:"read_only,omitempty" json:"read_only,omitempty" xml:"read_only,omitempty"`
}

// StationNotFoundResponseBody is the type of the "station" service "station"
// endpoint HTTP response body for the "not-found" error.
type StationNotFoundResponseBody string

// StationUnauthorizedResponseBody is the type of the "station" service
// "station" endpoint HTTP response body for the "unauthorized" error.
type StationUnauthorizedResponseBody string

// StationOwnerResponseBody is used to define fields on response body types.
type StationOwnerResponseBody struct {
	ID   *int32  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StationUploadResponseBody is used to define fields on response body types.
type StationUploadResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Time     *int64  `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	UploadID *string `form:"upload_id,omitempty" json:"upload_id,omitempty" xml:"upload_id,omitempty"`
	Size     *int64  `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Blocks   []int64 `form:"blocks,omitempty" json:"blocks,omitempty" xml:"blocks,omitempty"`
}

// ImageRefResponseBody is used to define fields on response body types.
type ImageRefResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// StationPhotosResponseBody is used to define fields on response body types.
type StationPhotosResponseBody struct {
	Small *string `form:"small,omitempty" json:"small,omitempty" xml:"small,omitempty"`
}

// NewStationFullViewOK builds a "station" service "station" endpoint result
// from a HTTP "OK" response.
func NewStationFullViewOK(body *StationResponseBody) *stationviews.StationFullView {
	v := &stationviews.StationFullView{
		ID:       body.ID,
		Name:     body.Name,
		DeviceID: body.DeviceID,
		ReadOnly: body.ReadOnly,
	}
	v.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(body.Owner)
	v.Uploads = make([]*stationviews.StationUploadView, len(body.Uploads))
	for i, val := range body.Uploads {
		v.Uploads[i] = unmarshalStationUploadResponseBodyToStationviewsStationUploadView(val)
	}
	v.Images = make([]*stationviews.ImageRefView, len(body.Images))
	for i, val := range body.Images {
		v.Images[i] = unmarshalImageRefResponseBodyToStationviewsImageRefView(val)
	}
	v.Photos = unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(body.Photos)

	return v
}

// NewStationNotFound builds a station service station endpoint not-found error.
func NewStationNotFound(body StationNotFoundResponseBody) station.NotFound {
	v := station.NotFound(body)
	return v
}

// NewStationUnauthorized builds a station service station endpoint
// unauthorized error.
func NewStationUnauthorized(body StationUnauthorizedResponseBody) station.Unauthorized {
	v := station.Unauthorized(body)
	return v
}

// ValidateStationOwnerResponseBody runs the validations defined on
// StationOwnerResponseBody
func ValidateStationOwnerResponseBody(body *StationOwnerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateStationUploadResponseBody runs the validations defined on
// StationUploadResponseBody
func ValidateStationUploadResponseBody(body *StationUploadResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	if body.UploadID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upload_id", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Blocks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("blocks", "body"))
	}
	return
}

// ValidateImageRefResponseBody runs the validations defined on
// ImageRefResponseBody
func ValidateImageRefResponseBody(body *ImageRefResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateStationPhotosResponseBody runs the validations defined on
// StationPhotosResponseBody
func ValidateStationPhotosResponseBody(body *StationPhotosResponseBody) (err error) {
	if body.Small == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("small", "body"))
	}
	return
}
