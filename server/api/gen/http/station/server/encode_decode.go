// Code generated by goa v3.1.2, DO NOT EDIT.
//
// station HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	station "github.com/fieldkit/cloud/server/api/gen/station"
	stationviews "github.com/fieldkit/cloud/server/api/gen/station/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeStationResponse returns an encoder for responses returned by the
// station station endpoint.
func EncodeStationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*stationviews.StationFull)
		enc := encoder(ctx, w)
		body := NewStationResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeStationRequest returns a decoder for requests sent to the station
// station endpoint.
func DecodeStationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   int32
			auth string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int32(v)
		}
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewStationPayload(id, auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeStationError returns an encoder for errors returned by the station
// station endpoint.
func EncodeStationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not-found":
			res := v.(station.NotFound)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStationNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(station.Unauthorized)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStationUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalStationviewsStationOwnerViewToStationOwnerResponseBody builds a value
// of type *StationOwnerResponseBody from a value of type
// *stationviews.StationOwnerView.
func marshalStationviewsStationOwnerViewToStationOwnerResponseBody(v *stationviews.StationOwnerView) *StationOwnerResponseBody {
	res := &StationOwnerResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalStationviewsStationUploadViewToStationUploadResponseBody builds a
// value of type *StationUploadResponseBody from a value of type
// *stationviews.StationUploadView.
func marshalStationviewsStationUploadViewToStationUploadResponseBody(v *stationviews.StationUploadView) *StationUploadResponseBody {
	res := &StationUploadResponseBody{
		ID:       *v.ID,
		Time:     *v.Time,
		UploadID: *v.UploadID,
		Size:     *v.Size,
		URL:      *v.URL,
		Type:     *v.Type,
	}
	if v.Blocks != nil {
		res.Blocks = make([]int64, len(v.Blocks))
		for i, val := range v.Blocks {
			res.Blocks[i] = val
		}
	}

	return res
}

// marshalStationviewsImageRefViewToImageRefResponseBody builds a value of type
// *ImageRefResponseBody from a value of type *stationviews.ImageRefView.
func marshalStationviewsImageRefViewToImageRefResponseBody(v *stationviews.ImageRefView) *ImageRefResponseBody {
	res := &ImageRefResponseBody{
		URL: *v.URL,
	}

	return res
}

// marshalStationviewsStationPhotosViewToStationPhotosResponseBody builds a
// value of type *StationPhotosResponseBody from a value of type
// *stationviews.StationPhotosView.
func marshalStationviewsStationPhotosViewToStationPhotosResponseBody(v *stationviews.StationPhotosView) *StationPhotosResponseBody {
	res := &StationPhotosResponseBody{
		Small: *v.Small,
	}

	return res
}
