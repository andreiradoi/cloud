// Code generated by goa v3.1.2, DO NOT EDIT.
//
// firmware HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	firmware "github.com/fieldkit/cloud/server/api/gen/firmware"
	firmwareviews "github.com/fieldkit/cloud/server/api/gen/firmware/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "firmware" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Etag    string `form:"etag" json:"etag" xml:"etag"`
	Module  string `form:"module" json:"module" xml:"module"`
	Profile string `form:"profile" json:"profile" xml:"profile"`
	URL     string `form:"url" json:"url" xml:"url"`
	Meta    string `form:"meta" json:"meta" xml:"meta"`
}

// ListResponseBody is the type of the "firmware" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Firmwares FirmwareSummaryCollectionResponseBody `form:"firmwares,omitempty" json:"firmwares,omitempty" xml:"firmwares,omitempty"`
}

// DownloadBadRequestResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "bad-request" error.
type DownloadBadRequestResponseBody string

// DownloadForbiddenResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "forbidden" error.
type DownloadForbiddenResponseBody string

// DownloadNotFoundResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "not-found" error.
type DownloadNotFoundResponseBody string

// DownloadUnauthorizedResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "unauthorized" error.
type DownloadUnauthorizedResponseBody string

// AddBadRequestResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody string

// AddForbiddenResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody string

// AddNotFoundResponseBody is the type of the "firmware" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody string

// AddUnauthorizedResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody string

// ListBadRequestResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "bad-request" error.
type ListBadRequestResponseBody string

// ListForbiddenResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody string

// ListNotFoundResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "not-found" error.
type ListNotFoundResponseBody string

// ListUnauthorizedResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody string

// DeleteBadRequestResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody string

// DeleteForbiddenResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody string

// DeleteNotFoundResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody string

// DeleteUnauthorizedResponseBody is the type of the "firmware" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody string

// FirmwareSummaryCollectionResponseBody is used to define fields on response
// body types.
type FirmwareSummaryCollectionResponseBody []*FirmwareSummaryResponseBody

// FirmwareSummaryResponseBody is used to define fields on response body types.
type FirmwareSummaryResponseBody struct {
	ID          *int32                 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Time        *string                `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	Etag        *string                `form:"etag,omitempty" json:"etag,omitempty" xml:"etag,omitempty"`
	Module      *string                `form:"module,omitempty" json:"module,omitempty" xml:"module,omitempty"`
	Profile     *string                `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	URL         *string                `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Meta        map[string]interface{} `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	BuildNumber *int32                 `form:"buildNumber,omitempty" json:"buildNumber,omitempty" xml:"buildNumber,omitempty"`
	BuildTime   *int64                 `form:"buildTime,omitempty" json:"buildTime,omitempty" xml:"buildTime,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "firmware" service.
func NewAddRequestBody(p *firmware.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Etag:    p.Firmware.Etag,
		Module:  p.Firmware.Module,
		Profile: p.Firmware.Profile,
		URL:     p.Firmware.URL,
		Meta:    p.Firmware.Meta,
	}
	return body
}

// NewDownloadResultOK builds a "firmware" service "download" endpoint result
// from a HTTP "OK" response.
func NewDownloadResultOK(length int64, contentType string) *firmware.DownloadResult {
	v := &firmware.DownloadResult{}
	v.Length = length
	v.ContentType = contentType

	return v
}

// NewDownloadBadRequest builds a firmware service download endpoint
// bad-request error.
func NewDownloadBadRequest(body DownloadBadRequestResponseBody) firmware.BadRequest {
	v := firmware.BadRequest(body)
	return v
}

// NewDownloadForbidden builds a firmware service download endpoint forbidden
// error.
func NewDownloadForbidden(body DownloadForbiddenResponseBody) firmware.Forbidden {
	v := firmware.Forbidden(body)
	return v
}

// NewDownloadNotFound builds a firmware service download endpoint not-found
// error.
func NewDownloadNotFound(body DownloadNotFoundResponseBody) firmware.NotFound {
	v := firmware.NotFound(body)
	return v
}

// NewDownloadUnauthorized builds a firmware service download endpoint
// unauthorized error.
func NewDownloadUnauthorized(body DownloadUnauthorizedResponseBody) firmware.Unauthorized {
	v := firmware.Unauthorized(body)
	return v
}

// NewAddBadRequest builds a firmware service add endpoint bad-request error.
func NewAddBadRequest(body AddBadRequestResponseBody) firmware.BadRequest {
	v := firmware.BadRequest(body)
	return v
}

// NewAddForbidden builds a firmware service add endpoint forbidden error.
func NewAddForbidden(body AddForbiddenResponseBody) firmware.Forbidden {
	v := firmware.Forbidden(body)
	return v
}

// NewAddNotFound builds a firmware service add endpoint not-found error.
func NewAddNotFound(body AddNotFoundResponseBody) firmware.NotFound {
	v := firmware.NotFound(body)
	return v
}

// NewAddUnauthorized builds a firmware service add endpoint unauthorized error.
func NewAddUnauthorized(body AddUnauthorizedResponseBody) firmware.Unauthorized {
	v := firmware.Unauthorized(body)
	return v
}

// NewListFirmwaresOK builds a "firmware" service "list" endpoint result from a
// HTTP "OK" response.
func NewListFirmwaresOK(body *ListResponseBody) *firmwareviews.FirmwaresView {
	v := &firmwareviews.FirmwaresView{}
	v.Firmwares = make([]*firmwareviews.FirmwareSummaryView, len(body.Firmwares))
	for i, val := range body.Firmwares {
		v.Firmwares[i] = unmarshalFirmwareSummaryResponseBodyToFirmwareviewsFirmwareSummaryView(val)
	}

	return v
}

// NewListBadRequest builds a firmware service list endpoint bad-request error.
func NewListBadRequest(body ListBadRequestResponseBody) firmware.BadRequest {
	v := firmware.BadRequest(body)
	return v
}

// NewListForbidden builds a firmware service list endpoint forbidden error.
func NewListForbidden(body ListForbiddenResponseBody) firmware.Forbidden {
	v := firmware.Forbidden(body)
	return v
}

// NewListNotFound builds a firmware service list endpoint not-found error.
func NewListNotFound(body ListNotFoundResponseBody) firmware.NotFound {
	v := firmware.NotFound(body)
	return v
}

// NewListUnauthorized builds a firmware service list endpoint unauthorized
// error.
func NewListUnauthorized(body ListUnauthorizedResponseBody) firmware.Unauthorized {
	v := firmware.Unauthorized(body)
	return v
}

// NewDeleteBadRequest builds a firmware service delete endpoint bad-request
// error.
func NewDeleteBadRequest(body DeleteBadRequestResponseBody) firmware.BadRequest {
	v := firmware.BadRequest(body)
	return v
}

// NewDeleteForbidden builds a firmware service delete endpoint forbidden error.
func NewDeleteForbidden(body DeleteForbiddenResponseBody) firmware.Forbidden {
	v := firmware.Forbidden(body)
	return v
}

// NewDeleteNotFound builds a firmware service delete endpoint not-found error.
func NewDeleteNotFound(body DeleteNotFoundResponseBody) firmware.NotFound {
	v := firmware.NotFound(body)
	return v
}

// NewDeleteUnauthorized builds a firmware service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body DeleteUnauthorizedResponseBody) firmware.Unauthorized {
	v := firmware.Unauthorized(body)
	return v
}

// ValidateFirmwareSummaryCollectionResponseBody runs the validations defined
// on FirmwareSummaryCollectionResponseBody
func ValidateFirmwareSummaryCollectionResponseBody(body FirmwareSummaryCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateFirmwareSummaryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFirmwareSummaryResponseBody runs the validations defined on
// FirmwareSummaryResponseBody
func ValidateFirmwareSummaryResponseBody(body *FirmwareSummaryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	if body.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "body"))
	}
	if body.Module == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("module", "body"))
	}
	if body.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("profile", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.BuildNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildNumber", "body"))
	}
	if body.BuildTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildTime", "body"))
	}
	return
}
