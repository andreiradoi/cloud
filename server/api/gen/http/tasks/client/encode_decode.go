// Code generated by goa v3.1.2, DO NOT EDIT.
//
// tasks HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	tasks "github.com/fieldkit/cloud/server/api/gen/tasks"
	goahttp "goa.design/goa/v3/http"
)

// BuildFiveRequest instantiates a HTTP request object with method and path set
// to call the "tasks" service "five" endpoint
func (c *Client) BuildFiveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FiveTasksPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "five", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFiveResponse returns a decoder for responses returned by the tasks
// five endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFiveResponse may return the following errors:
//	- "bad-request" (type tasks.BadRequest): http.StatusBadRequest
//	- "forbidden" (type tasks.Forbidden): http.StatusForbidden
//	- "not-found" (type tasks.NotFound): http.StatusNotFound
//	- "unauthorized" (type tasks.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeFiveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body FiveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "five", err)
			}
			return nil, NewFiveBadRequest(body)
		case http.StatusForbidden:
			var (
				body FiveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "five", err)
			}
			return nil, NewFiveForbidden(body)
		case http.StatusNotFound:
			var (
				body FiveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "five", err)
			}
			return nil, NewFiveNotFound(body)
		case http.StatusUnauthorized:
			var (
				body FiveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "five", err)
			}
			return nil, NewFiveUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "five", resp.StatusCode, string(body))
		}
	}
}

// BuildRefreshDeviceRequest instantiates a HTTP request object with method and
// path set to call the "tasks" service "refresh device" endpoint
func (c *Client) BuildRefreshDeviceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deviceID string
	)
	{
		p, ok := v.(*tasks.RefreshDevicePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks", "refresh device", "*tasks.RefreshDevicePayload", v)
		}
		deviceID = p.DeviceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RefreshDeviceTasksPath(deviceID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "refresh device", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRefreshDeviceRequest returns an encoder for requests sent to the tasks
// refresh device server.
func EncodeRefreshDeviceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.RefreshDevicePayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "refresh device", "*tasks.RefreshDevicePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeRefreshDeviceResponse returns a decoder for responses returned by the
// tasks refresh device endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRefreshDeviceResponse may return the following errors:
//	- "bad-request" (type tasks.BadRequest): http.StatusBadRequest
//	- "forbidden" (type tasks.Forbidden): http.StatusForbidden
//	- "not-found" (type tasks.NotFound): http.StatusNotFound
//	- "unauthorized" (type tasks.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRefreshDeviceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RefreshDeviceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "refresh device", err)
			}
			return nil, NewRefreshDeviceBadRequest(body)
		case http.StatusForbidden:
			var (
				body RefreshDeviceForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "refresh device", err)
			}
			return nil, NewRefreshDeviceForbidden(body)
		case http.StatusNotFound:
			var (
				body RefreshDeviceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "refresh device", err)
			}
			return nil, NewRefreshDeviceNotFound(body)
		case http.StatusUnauthorized:
			var (
				body RefreshDeviceUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "refresh device", err)
			}
			return nil, NewRefreshDeviceUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "refresh device", resp.StatusCode, string(body))
		}
	}
}
