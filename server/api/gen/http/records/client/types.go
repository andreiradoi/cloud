// Code generated by goa v3.1.2, DO NOT EDIT.
//
// records HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	records "github.com/fieldkit/cloud/server/api/gen/records"
)

// DataBadRequestResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "bad-request" error.
type DataBadRequestResponseBody string

// DataForbiddenResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "forbidden" error.
type DataForbiddenResponseBody string

// DataNotFoundResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "not-found" error.
type DataNotFoundResponseBody string

// DataUnauthorizedResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "unauthorized" error.
type DataUnauthorizedResponseBody string

// MetaBadRequestResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "bad-request" error.
type MetaBadRequestResponseBody string

// MetaForbiddenResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "forbidden" error.
type MetaForbiddenResponseBody string

// MetaNotFoundResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "not-found" error.
type MetaNotFoundResponseBody string

// MetaUnauthorizedResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "unauthorized" error.
type MetaUnauthorizedResponseBody string

// ResolvedBadRequestResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "bad-request" error.
type ResolvedBadRequestResponseBody string

// ResolvedForbiddenResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "forbidden" error.
type ResolvedForbiddenResponseBody string

// ResolvedNotFoundResponseBody is the type of the "records" service "resolved"
// endpoint HTTP response body for the "not-found" error.
type ResolvedNotFoundResponseBody string

// ResolvedUnauthorizedResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "unauthorized" error.
type ResolvedUnauthorizedResponseBody string

// NewDataResultOK builds a "records" service "data" endpoint result from a
// HTTP "OK" response.
func NewDataResultOK(body interface{}) *records.DataResult {
	v := body
	res := &records.DataResult{
		Object: v,
	}

	return res
}

// NewDataBadRequest builds a records service data endpoint bad-request error.
func NewDataBadRequest(body DataBadRequestResponseBody) records.BadRequest {
	v := records.BadRequest(body)
	return v
}

// NewDataForbidden builds a records service data endpoint forbidden error.
func NewDataForbidden(body DataForbiddenResponseBody) records.Forbidden {
	v := records.Forbidden(body)
	return v
}

// NewDataNotFound builds a records service data endpoint not-found error.
func NewDataNotFound(body DataNotFoundResponseBody) records.NotFound {
	v := records.NotFound(body)
	return v
}

// NewDataUnauthorized builds a records service data endpoint unauthorized
// error.
func NewDataUnauthorized(body DataUnauthorizedResponseBody) records.Unauthorized {
	v := records.Unauthorized(body)
	return v
}

// NewMetaResultOK builds a "records" service "meta" endpoint result from a
// HTTP "OK" response.
func NewMetaResultOK(body interface{}) *records.MetaResult {
	v := body
	res := &records.MetaResult{
		Object: v,
	}

	return res
}

// NewMetaBadRequest builds a records service meta endpoint bad-request error.
func NewMetaBadRequest(body MetaBadRequestResponseBody) records.BadRequest {
	v := records.BadRequest(body)
	return v
}

// NewMetaForbidden builds a records service meta endpoint forbidden error.
func NewMetaForbidden(body MetaForbiddenResponseBody) records.Forbidden {
	v := records.Forbidden(body)
	return v
}

// NewMetaNotFound builds a records service meta endpoint not-found error.
func NewMetaNotFound(body MetaNotFoundResponseBody) records.NotFound {
	v := records.NotFound(body)
	return v
}

// NewMetaUnauthorized builds a records service meta endpoint unauthorized
// error.
func NewMetaUnauthorized(body MetaUnauthorizedResponseBody) records.Unauthorized {
	v := records.Unauthorized(body)
	return v
}

// NewResolvedResultOK builds a "records" service "resolved" endpoint result
// from a HTTP "OK" response.
func NewResolvedResultOK(body interface{}) *records.ResolvedResult {
	v := body
	res := &records.ResolvedResult{
		Object: v,
	}

	return res
}

// NewResolvedBadRequest builds a records service resolved endpoint bad-request
// error.
func NewResolvedBadRequest(body ResolvedBadRequestResponseBody) records.BadRequest {
	v := records.BadRequest(body)
	return v
}

// NewResolvedForbidden builds a records service resolved endpoint forbidden
// error.
func NewResolvedForbidden(body ResolvedForbiddenResponseBody) records.Forbidden {
	v := records.Forbidden(body)
	return v
}

// NewResolvedNotFound builds a records service resolved endpoint not-found
// error.
func NewResolvedNotFound(body ResolvedNotFoundResponseBody) records.NotFound {
	v := records.NotFound(body)
	return v
}

// NewResolvedUnauthorized builds a records service resolved endpoint
// unauthorized error.
func NewResolvedUnauthorized(body ResolvedUnauthorizedResponseBody) records.Unauthorized {
	v := records.Unauthorized(body)
	return v
}
