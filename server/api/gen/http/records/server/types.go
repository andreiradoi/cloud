// Code generated by goa v3.1.2, DO NOT EDIT.
//
// records HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	records "github.com/fieldkit/cloud/server/api/gen/records"
)

// DataBadRequestResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "bad-request" error.
type DataBadRequestResponseBody string

// DataForbiddenResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "forbidden" error.
type DataForbiddenResponseBody string

// DataNotFoundResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "not-found" error.
type DataNotFoundResponseBody string

// DataUnauthorizedResponseBody is the type of the "records" service "data"
// endpoint HTTP response body for the "unauthorized" error.
type DataUnauthorizedResponseBody string

// MetaBadRequestResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "bad-request" error.
type MetaBadRequestResponseBody string

// MetaForbiddenResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "forbidden" error.
type MetaForbiddenResponseBody string

// MetaNotFoundResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "not-found" error.
type MetaNotFoundResponseBody string

// MetaUnauthorizedResponseBody is the type of the "records" service "meta"
// endpoint HTTP response body for the "unauthorized" error.
type MetaUnauthorizedResponseBody string

// ResolvedBadRequestResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "bad-request" error.
type ResolvedBadRequestResponseBody string

// ResolvedForbiddenResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "forbidden" error.
type ResolvedForbiddenResponseBody string

// ResolvedNotFoundResponseBody is the type of the "records" service "resolved"
// endpoint HTTP response body for the "not-found" error.
type ResolvedNotFoundResponseBody string

// ResolvedUnauthorizedResponseBody is the type of the "records" service
// "resolved" endpoint HTTP response body for the "unauthorized" error.
type ResolvedUnauthorizedResponseBody string

// NewDataBadRequestResponseBody builds the HTTP response body from the result
// of the "data" endpoint of the "records" service.
func NewDataBadRequestResponseBody(res records.BadRequest) DataBadRequestResponseBody {
	body := DataBadRequestResponseBody(res)
	return body
}

// NewDataForbiddenResponseBody builds the HTTP response body from the result
// of the "data" endpoint of the "records" service.
func NewDataForbiddenResponseBody(res records.Forbidden) DataForbiddenResponseBody {
	body := DataForbiddenResponseBody(res)
	return body
}

// NewDataNotFoundResponseBody builds the HTTP response body from the result of
// the "data" endpoint of the "records" service.
func NewDataNotFoundResponseBody(res records.NotFound) DataNotFoundResponseBody {
	body := DataNotFoundResponseBody(res)
	return body
}

// NewDataUnauthorizedResponseBody builds the HTTP response body from the
// result of the "data" endpoint of the "records" service.
func NewDataUnauthorizedResponseBody(res records.Unauthorized) DataUnauthorizedResponseBody {
	body := DataUnauthorizedResponseBody(res)
	return body
}

// NewMetaBadRequestResponseBody builds the HTTP response body from the result
// of the "meta" endpoint of the "records" service.
func NewMetaBadRequestResponseBody(res records.BadRequest) MetaBadRequestResponseBody {
	body := MetaBadRequestResponseBody(res)
	return body
}

// NewMetaForbiddenResponseBody builds the HTTP response body from the result
// of the "meta" endpoint of the "records" service.
func NewMetaForbiddenResponseBody(res records.Forbidden) MetaForbiddenResponseBody {
	body := MetaForbiddenResponseBody(res)
	return body
}

// NewMetaNotFoundResponseBody builds the HTTP response body from the result of
// the "meta" endpoint of the "records" service.
func NewMetaNotFoundResponseBody(res records.NotFound) MetaNotFoundResponseBody {
	body := MetaNotFoundResponseBody(res)
	return body
}

// NewMetaUnauthorizedResponseBody builds the HTTP response body from the
// result of the "meta" endpoint of the "records" service.
func NewMetaUnauthorizedResponseBody(res records.Unauthorized) MetaUnauthorizedResponseBody {
	body := MetaUnauthorizedResponseBody(res)
	return body
}

// NewResolvedBadRequestResponseBody builds the HTTP response body from the
// result of the "resolved" endpoint of the "records" service.
func NewResolvedBadRequestResponseBody(res records.BadRequest) ResolvedBadRequestResponseBody {
	body := ResolvedBadRequestResponseBody(res)
	return body
}

// NewResolvedForbiddenResponseBody builds the HTTP response body from the
// result of the "resolved" endpoint of the "records" service.
func NewResolvedForbiddenResponseBody(res records.Forbidden) ResolvedForbiddenResponseBody {
	body := ResolvedForbiddenResponseBody(res)
	return body
}

// NewResolvedNotFoundResponseBody builds the HTTP response body from the
// result of the "resolved" endpoint of the "records" service.
func NewResolvedNotFoundResponseBody(res records.NotFound) ResolvedNotFoundResponseBody {
	body := ResolvedNotFoundResponseBody(res)
	return body
}

// NewResolvedUnauthorizedResponseBody builds the HTTP response body from the
// result of the "resolved" endpoint of the "records" service.
func NewResolvedUnauthorizedResponseBody(res records.Unauthorized) ResolvedUnauthorizedResponseBody {
	body := ResolvedUnauthorizedResponseBody(res)
	return body
}

// NewDataPayload builds a records service data endpoint payload.
func NewDataPayload(recordID int64, auth *string) *records.DataPayload {
	v := &records.DataPayload{}
	v.RecordID = &recordID
	v.Auth = auth

	return v
}

// NewMetaPayload builds a records service meta endpoint payload.
func NewMetaPayload(recordID int64, auth *string) *records.MetaPayload {
	v := &records.MetaPayload{}
	v.RecordID = &recordID
	v.Auth = auth

	return v
}

// NewResolvedPayload builds a records service resolved endpoint payload.
func NewResolvedPayload(recordID int64, auth *string) *records.ResolvedPayload {
	v := &records.ResolvedPayload{}
	v.RecordID = &recordID
	v.Auth = auth

	return v
}
