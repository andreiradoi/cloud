// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	user "github.com/fieldkit/cloud/server/api/gen/user"
	userviews "github.com/fieldkit/cloud/server/api/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// RolesResponseBody is the type of the "user" service "roles" endpoint HTTP
// response body.
type RolesResponseBody struct {
	Roles []*AvailableRoleResponseBody `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// RolesBadRequestResponseBody is the type of the "user" service "roles"
// endpoint HTTP response body for the "bad-request" error.
type RolesBadRequestResponseBody string

// RolesNotFoundResponseBody is the type of the "user" service "roles" endpoint
// HTTP response body for the "not-found" error.
type RolesNotFoundResponseBody string

// RolesUnauthorizedResponseBody is the type of the "user" service "roles"
// endpoint HTTP response body for the "unauthorized" error.
type RolesUnauthorizedResponseBody string

// AvailableRoleResponseBody is used to define fields on response body types.
type AvailableRoleResponseBody struct {
	ID   *int32  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewRolesAvailableRolesOK builds a "user" service "roles" endpoint result
// from a HTTP "OK" response.
func NewRolesAvailableRolesOK(body *RolesResponseBody) *userviews.AvailableRolesView {
	v := &userviews.AvailableRolesView{}
	v.Roles = make([]*userviews.AvailableRoleView, len(body.Roles))
	for i, val := range body.Roles {
		v.Roles[i] = unmarshalAvailableRoleResponseBodyToUserviewsAvailableRoleView(val)
	}

	return v
}

// NewRolesBadRequest builds a user service roles endpoint bad-request error.
func NewRolesBadRequest(body RolesBadRequestResponseBody) user.BadRequest {
	v := user.BadRequest(body)
	return v
}

// NewRolesNotFound builds a user service roles endpoint not-found error.
func NewRolesNotFound(body RolesNotFoundResponseBody) user.NotFound {
	v := user.NotFound(body)
	return v
}

// NewRolesUnauthorized builds a user service roles endpoint unauthorized error.
func NewRolesUnauthorized(body RolesUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// ValidateAvailableRoleResponseBody runs the validations defined on
// AvailableRoleResponseBody
func ValidateAvailableRoleResponseBody(body *AvailableRoleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
