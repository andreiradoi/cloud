// Code generated by goa v3.1.1, DO NOT EDIT.
//
// activity HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	activityviews "github.com/fieldkit/cloud/server/api/gen/activity/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeStationResponse returns an encoder for responses returned by the
// activity station endpoint.
func EncodeStationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*activityviews.StationActivityPage)
		enc := encoder(ctx, w)
		body := NewStationResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeStationRequest returns a decoder for requests sent to the activity
// station endpoint.
func DecodeStationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   int64
			page *int64
			auth *string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = v
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = &v
			}
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewStationPayload(id, page, auth)
		if payload.Auth != nil {
			if strings.Contains(*payload.Auth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Auth, " ", 2)[1]
				payload.Auth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeProjectResponse returns an encoder for responses returned by the
// activity project endpoint.
func EncodeProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*activityviews.ProjectActivityPage)
		enc := encoder(ctx, w)
		body := NewProjectResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeProjectRequest returns a decoder for requests sent to the activity
// project endpoint.
func DecodeProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   int64
			page *int64
			auth *string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = v
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = &v
			}
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewProjectPayload(id, page, auth)
		if payload.Auth != nil {
			if strings.Contains(*payload.Auth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Auth, " ", 2)[1]
				payload.Auth = &cred
			}
		}

		return payload, nil
	}
}

// marshalActivityviewsStationActivityViewToStationActivityResponseBody builds
// a value of type *StationActivityResponseBody from a value of type
// *activityviews.StationActivityView.
func marshalActivityviewsStationActivityViewToStationActivityResponseBody(v *activityviews.StationActivityView) *StationActivityResponseBody {
	res := &StationActivityResponseBody{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		Type:      *v.Type,
		Meta:      v.Meta,
	}
	if v.Station != nil {
		res.Station = marshalActivityviewsStationSummaryViewToStationSummaryResponseBody(v.Station)
	}

	return res
}

// marshalActivityviewsStationSummaryViewToStationSummaryResponseBody builds a
// value of type *StationSummaryResponseBody from a value of type
// *activityviews.StationSummaryView.
func marshalActivityviewsStationSummaryViewToStationSummaryResponseBody(v *activityviews.StationSummaryView) *StationSummaryResponseBody {
	res := &StationSummaryResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalActivityviewsProjectActivityViewToProjectActivityResponseBody builds
// a value of type *ProjectActivityResponseBody from a value of type
// *activityviews.ProjectActivityView.
func marshalActivityviewsProjectActivityViewToProjectActivityResponseBody(v *activityviews.ProjectActivityView) *ProjectActivityResponseBody {
	res := &ProjectActivityResponseBody{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		Type:      *v.Type,
		Meta:      v.Meta,
	}
	if v.Project != nil {
		res.Project = marshalActivityviewsProjectSummaryViewToProjectSummaryResponseBody(v.Project)
	}

	return res
}

// marshalActivityviewsProjectSummaryViewToProjectSummaryResponseBody builds a
// value of type *ProjectSummaryResponseBody from a value of type
// *activityviews.ProjectSummaryView.
func marshalActivityviewsProjectSummaryViewToProjectSummaryResponseBody(v *activityviews.ProjectSummaryView) *ProjectSummaryResponseBody {
	res := &ProjectSummaryResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}
