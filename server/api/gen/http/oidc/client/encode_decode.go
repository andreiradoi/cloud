// Code generated by goa v3.2.4, DO NOT EDIT.
//
// oidc HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	oidc "github.com/fieldkit/cloud/server/api/gen/oidc"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildRequireRequest instantiates a HTTP request object with method and path
// set to call the "oidc" service "require" endpoint
func (c *Client) BuildRequireRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RequireOidcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oidc", "require", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRequireRequest returns an encoder for requests sent to the oidc
// require server.
func EncodeRequireRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*oidc.RequirePayload)
		if !ok {
			return goahttp.ErrInvalidType("oidc", "require", "*oidc.RequirePayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeRequireResponse returns a decoder for responses returned by the oidc
// require endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRequireResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRequireResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location string
				err      error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "require", err)
			}
			res := NewRequireResultTemporaryRedirect(location)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RequireUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "require", err)
			}
			err = ValidateRequireUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "require", err)
			}
			return nil, NewRequireUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RequireForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "require", err)
			}
			err = ValidateRequireForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "require", err)
			}
			return nil, NewRequireForbidden(&body)
		case http.StatusNotFound:
			var (
				body RequireNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "require", err)
			}
			err = ValidateRequireNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "require", err)
			}
			return nil, NewRequireNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RequireBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "require", err)
			}
			err = ValidateRequireBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "require", err)
			}
			return nil, NewRequireBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oidc", "require", resp.StatusCode, string(body))
		}
	}
}

// BuildAuthenticateRequest instantiates a HTTP request object with method and
// path set to call the "oidc" service "authenticate" endpoint
func (c *Client) BuildAuthenticateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthenticateOidcPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oidc", "authenticate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthenticateRequest returns an encoder for requests sent to the oidc
// authenticate server.
func EncodeAuthenticateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*oidc.AuthenticatePayload)
		if !ok {
			return goahttp.ErrInvalidType("oidc", "authenticate", "*oidc.AuthenticatePayload", v)
		}
		values := req.URL.Query()
		values.Add("state", p.State)
		values.Add("session_state", p.SessionState)
		values.Add("code", p.Code)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAuthenticateResponse returns a decoder for responses returned by the
// oidc authenticate endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAuthenticateResponse may return the following errors:
//	- "user-unverified" (type *goa.ServiceError): http.StatusForbidden
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAuthenticateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthenticateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
			}
			err = ValidateAuthenticateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
			}
			res := NewAuthenticateResultOK(&body)
			return res, nil
		case http.StatusForbidden:
			en := resp.Header.Get("goa-error")
			switch en {
			case "user-unverified":
				var (
					body AuthenticateUserUnverifiedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
				}
				err = ValidateAuthenticateUserUnverifiedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
				}
				return nil, NewAuthenticateUserUnverified(&body)
			case "forbidden":
				var (
					body AuthenticateForbiddenResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
				}
				err = ValidateAuthenticateForbiddenResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
				}
				return nil, NewAuthenticateForbidden(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("oidc", "authenticate", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body AuthenticateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
			}
			err = ValidateAuthenticateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
			}
			return nil, NewAuthenticateUnauthorized(&body)
		case http.StatusNotFound:
			var (
				body AuthenticateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
			}
			err = ValidateAuthenticateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
			}
			return nil, NewAuthenticateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AuthenticateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "authenticate", err)
			}
			err = ValidateAuthenticateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oidc", "authenticate", err)
			}
			return nil, NewAuthenticateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oidc", "authenticate", resp.StatusCode, string(body))
		}
	}
}
