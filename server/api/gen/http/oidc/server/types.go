// Code generated by goa v3.2.4, DO NOT EDIT.
//
// oidc HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	oidc "github.com/fieldkit/cloud/server/api/gen/oidc"
	goa "goa.design/goa/v3/pkg"
)

// AuthenticateResponseBody is the type of the "oidc" service "authenticate"
// endpoint HTTP response body.
type AuthenticateResponseBody struct {
	Location string `form:"location" json:"location" xml:"location"`
	Token    string `form:"token" json:"token" xml:"token"`
	Header   string `form:"header" json:"header" xml:"header"`
}

// RequireUnauthorizedResponseBody is the type of the "oidc" service "require"
// endpoint HTTP response body for the "unauthorized" error.
type RequireUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RequireForbiddenResponseBody is the type of the "oidc" service "require"
// endpoint HTTP response body for the "forbidden" error.
type RequireForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RequireNotFoundResponseBody is the type of the "oidc" service "require"
// endpoint HTTP response body for the "not-found" error.
type RequireNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RequireBadRequestResponseBody is the type of the "oidc" service "require"
// endpoint HTTP response body for the "bad-request" error.
type RequireBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateUserUnverifiedResponseBody is the type of the "oidc" service
// "authenticate" endpoint HTTP response body for the "user-unverified" error.
type AuthenticateUserUnverifiedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateForbiddenResponseBody is the type of the "oidc" service
// "authenticate" endpoint HTTP response body for the "forbidden" error.
type AuthenticateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateUnauthorizedResponseBody is the type of the "oidc" service
// "authenticate" endpoint HTTP response body for the "unauthorized" error.
type AuthenticateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateNotFoundResponseBody is the type of the "oidc" service
// "authenticate" endpoint HTTP response body for the "not-found" error.
type AuthenticateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateBadRequestResponseBody is the type of the "oidc" service
// "authenticate" endpoint HTTP response body for the "bad-request" error.
type AuthenticateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewAuthenticateResponseBody builds the HTTP response body from the result of
// the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateResponseBody(res *oidc.AuthenticateResult) *AuthenticateResponseBody {
	body := &AuthenticateResponseBody{
		Location: res.Location,
		Token:    res.Token,
		Header:   res.Header,
	}
	return body
}

// NewRequireUnauthorizedResponseBody builds the HTTP response body from the
// result of the "require" endpoint of the "oidc" service.
func NewRequireUnauthorizedResponseBody(res *goa.ServiceError) *RequireUnauthorizedResponseBody {
	body := &RequireUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRequireForbiddenResponseBody builds the HTTP response body from the
// result of the "require" endpoint of the "oidc" service.
func NewRequireForbiddenResponseBody(res *goa.ServiceError) *RequireForbiddenResponseBody {
	body := &RequireForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRequireNotFoundResponseBody builds the HTTP response body from the result
// of the "require" endpoint of the "oidc" service.
func NewRequireNotFoundResponseBody(res *goa.ServiceError) *RequireNotFoundResponseBody {
	body := &RequireNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRequireBadRequestResponseBody builds the HTTP response body from the
// result of the "require" endpoint of the "oidc" service.
func NewRequireBadRequestResponseBody(res *goa.ServiceError) *RequireBadRequestResponseBody {
	body := &RequireBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateUserUnverifiedResponseBody builds the HTTP response body from
// the result of the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateUserUnverifiedResponseBody(res *goa.ServiceError) *AuthenticateUserUnverifiedResponseBody {
	body := &AuthenticateUserUnverifiedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateForbiddenResponseBody builds the HTTP response body from the
// result of the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateForbiddenResponseBody(res *goa.ServiceError) *AuthenticateForbiddenResponseBody {
	body := &AuthenticateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateUnauthorizedResponseBody(res *goa.ServiceError) *AuthenticateUnauthorizedResponseBody {
	body := &AuthenticateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateNotFoundResponseBody builds the HTTP response body from the
// result of the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateNotFoundResponseBody(res *goa.ServiceError) *AuthenticateNotFoundResponseBody {
	body := &AuthenticateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateBadRequestResponseBody builds the HTTP response body from the
// result of the "authenticate" endpoint of the "oidc" service.
func NewAuthenticateBadRequestResponseBody(res *goa.ServiceError) *AuthenticateBadRequestResponseBody {
	body := &AuthenticateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRequirePayload builds a oidc service require endpoint payload.
func NewRequirePayload(token *string) *oidc.RequirePayload {
	v := &oidc.RequirePayload{}
	v.Token = token

	return v
}

// NewAuthenticatePayload builds a oidc service authenticate endpoint payload.
func NewAuthenticatePayload(state string, sessionState string, code string) *oidc.AuthenticatePayload {
	v := &oidc.AuthenticatePayload{}
	v.State = state
	v.SessionState = sessionState
	v.Code = code

	return v
}
