// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
	goa "goa.design/goa/v3/pkg"
)

// DeviceLayoutResponseBody is the type of the "information" service "device
// layout" endpoint HTTP response body.
type DeviceLayoutResponseBody struct {
	Configurations []*StationConfigurationResponseBody `form:"configurations,omitempty" json:"configurations,omitempty" xml:"configurations,omitempty"`
}

// DeviceLayoutBadRequestResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "bad-request" error.
type DeviceLayoutBadRequestResponseBody string

// DeviceLayoutForbiddenResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "forbidden" error.
type DeviceLayoutForbiddenResponseBody string

// DeviceLayoutNotFoundResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "not-found" error.
type DeviceLayoutNotFoundResponseBody string

// DeviceLayoutUnauthorizedResponseBody is the type of the "information"
// service "device layout" endpoint HTTP response body for the "unauthorized"
// error.
type DeviceLayoutUnauthorizedResponseBody string

// StationConfigurationResponseBody is used to define fields on response body
// types.
type StationConfigurationResponseBody struct {
	ID   *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Time *int64 `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// NewDeviceLayoutResponseViewOK builds a "information" service "device layout"
// endpoint result from a HTTP "OK" response.
func NewDeviceLayoutResponseViewOK(body *DeviceLayoutResponseBody) *informationviews.DeviceLayoutResponseView {
	v := &informationviews.DeviceLayoutResponseView{}
	v.Configurations = make([]*informationviews.StationConfigurationView, len(body.Configurations))
	for i, val := range body.Configurations {
		v.Configurations[i] = unmarshalStationConfigurationResponseBodyToInformationviewsStationConfigurationView(val)
	}

	return v
}

// NewDeviceLayoutBadRequest builds a information service device layout
// endpoint bad-request error.
func NewDeviceLayoutBadRequest(body DeviceLayoutBadRequestResponseBody) information.BadRequest {
	v := information.BadRequest(body)
	return v
}

// NewDeviceLayoutForbidden builds a information service device layout endpoint
// forbidden error.
func NewDeviceLayoutForbidden(body DeviceLayoutForbiddenResponseBody) information.Forbidden {
	v := information.Forbidden(body)
	return v
}

// NewDeviceLayoutNotFound builds a information service device layout endpoint
// not-found error.
func NewDeviceLayoutNotFound(body DeviceLayoutNotFoundResponseBody) information.NotFound {
	v := information.NotFound(body)
	return v
}

// NewDeviceLayoutUnauthorized builds a information service device layout
// endpoint unauthorized error.
func NewDeviceLayoutUnauthorized(body DeviceLayoutUnauthorizedResponseBody) information.Unauthorized {
	v := information.Unauthorized(body)
	return v
}

// ValidateStationConfigurationResponseBody runs the validations defined on
// StationConfigurationResponseBody
func ValidateStationConfigurationResponseBody(body *StationConfigurationResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	return
}
