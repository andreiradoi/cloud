// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildDeviceLayoutRequest instantiates a HTTP request object with method and
// path set to call the "information" service "device layout" endpoint
func (c *Client) BuildDeviceLayoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deviceID string
	)
	{
		p, ok := v.(*information.DeviceLayoutPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("information", "device layout", "*information.DeviceLayoutPayload", v)
		}
		deviceID = p.DeviceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeviceLayoutInformationPath(deviceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("information", "device layout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeviceLayoutRequest returns an encoder for requests sent to the
// information device layout server.
func EncodeDeviceLayoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*information.DeviceLayoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("information", "device layout", "*information.DeviceLayoutPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeviceLayoutResponse returns a decoder for responses returned by the
// information device layout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeviceLayoutResponse may return the following errors:
//	- "bad-request" (type information.BadRequest): http.StatusBadRequest
//	- "forbidden" (type information.Forbidden): http.StatusForbidden
//	- "not-found" (type information.NotFound): http.StatusNotFound
//	- "unauthorized" (type information.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeDeviceLayoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeviceLayoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			p := NewDeviceLayoutResponseViewOK(&body)
			view := "default"
			vres := &informationviews.DeviceLayoutResponse{Projected: p, View: view}
			if err = informationviews.ValidateDeviceLayoutResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			res := information.NewDeviceLayoutResponse(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body DeviceLayoutBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutBadRequest(body)
		case http.StatusForbidden:
			var (
				body DeviceLayoutForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutForbidden(body)
		case http.StatusNotFound:
			var (
				body DeviceLayoutNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutNotFound(body)
		case http.StatusUnauthorized:
			var (
				body DeviceLayoutUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("information", "device layout", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStationConfigurationResponseBodyToInformationviewsStationConfigurationView
// builds a value of type *informationviews.StationConfigurationView from a
// value of type *StationConfigurationResponseBody.
func unmarshalStationConfigurationResponseBodyToInformationviewsStationConfigurationView(v *StationConfigurationResponseBody) *informationviews.StationConfigurationView {
	res := &informationviews.StationConfigurationView{
		ID:   v.ID,
		Time: v.Time,
	}

	return res
}
