// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
)

// DeviceLayoutResponseBody is the type of the "information" service "device
// layout" endpoint HTTP response body.
type DeviceLayoutResponseBody struct {
	Configurations []*StationConfigurationResponseBody     `form:"configurations" json:"configurations" xml:"configurations"`
	Sensors        map[string][]*StationSensorResponseBody `form:"sensors" json:"sensors" xml:"sensors"`
}

// DeviceLayoutBadRequestResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "bad-request" error.
type DeviceLayoutBadRequestResponseBody string

// DeviceLayoutForbiddenResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "forbidden" error.
type DeviceLayoutForbiddenResponseBody string

// DeviceLayoutNotFoundResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "not-found" error.
type DeviceLayoutNotFoundResponseBody string

// DeviceLayoutUnauthorizedResponseBody is the type of the "information"
// service "device layout" endpoint HTTP response body for the "unauthorized"
// error.
type DeviceLayoutUnauthorizedResponseBody string

// FirmwareStatisticsBadRequestResponseBody is the type of the "information"
// service "firmware statistics" endpoint HTTP response body for the
// "bad-request" error.
type FirmwareStatisticsBadRequestResponseBody string

// FirmwareStatisticsForbiddenResponseBody is the type of the "information"
// service "firmware statistics" endpoint HTTP response body for the
// "forbidden" error.
type FirmwareStatisticsForbiddenResponseBody string

// FirmwareStatisticsNotFoundResponseBody is the type of the "information"
// service "firmware statistics" endpoint HTTP response body for the
// "not-found" error.
type FirmwareStatisticsNotFoundResponseBody string

// FirmwareStatisticsUnauthorizedResponseBody is the type of the "information"
// service "firmware statistics" endpoint HTTP response body for the
// "unauthorized" error.
type FirmwareStatisticsUnauthorizedResponseBody string

// StationConfigurationResponseBody is used to define fields on response body
// types.
type StationConfigurationResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	Time         int64                        `form:"time" json:"time" xml:"time"`
	ProvisionID  int64                        `form:"provisionId" json:"provisionId" xml:"provisionId"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	SourceID     *int32                       `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Modules      []*StationModuleResponseBody `form:"modules" json:"modules" xml:"modules"`
}

// StationModuleResponseBody is used to define fields on response body types.
type StationModuleResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	HardwareID   *string                      `form:"hardwareId,omitempty" json:"hardwareId,omitempty" xml:"hardwareId,omitempty"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	Name         string                       `form:"name" json:"name" xml:"name"`
	Position     int32                        `form:"position" json:"position" xml:"position"`
	Flags        int32                        `form:"flags" json:"flags" xml:"flags"`
	Internal     bool                         `form:"internal" json:"internal" xml:"internal"`
	FullKey      string                       `form:"fullKey" json:"fullKey" xml:"fullKey"`
	Sensors      []*StationSensorResponseBody `form:"sensors" json:"sensors" xml:"sensors"`
}

// StationSensorResponseBody is used to define fields on response body types.
type StationSensorResponseBody struct {
	Name          string                     `form:"name" json:"name" xml:"name"`
	UnitOfMeasure string                     `form:"unitOfMeasure" json:"unitOfMeasure" xml:"unitOfMeasure"`
	Reading       *SensorReadingResponseBody `form:"reading,omitempty" json:"reading,omitempty" xml:"reading,omitempty"`
	Key           string                     `form:"key" json:"key" xml:"key"`
	FullKey       string                     `form:"fullKey" json:"fullKey" xml:"fullKey"`
	Ranges        []*SensorRangeResponseBody `form:"ranges" json:"ranges" xml:"ranges"`
}

// SensorReadingResponseBody is used to define fields on response body types.
type SensorReadingResponseBody struct {
	Last float32 `form:"last" json:"last" xml:"last"`
	Time int64   `form:"time" json:"time" xml:"time"`
}

// SensorRangeResponseBody is used to define fields on response body types.
type SensorRangeResponseBody struct {
	Minimum float32 `form:"minimum" json:"minimum" xml:"minimum"`
	Maximum float32 `form:"maximum" json:"maximum" xml:"maximum"`
}

// NewDeviceLayoutResponseBody builds the HTTP response body from the result of
// the "device layout" endpoint of the "information" service.
func NewDeviceLayoutResponseBody(res *informationviews.DeviceLayoutResponseView) *DeviceLayoutResponseBody {
	body := &DeviceLayoutResponseBody{}
	if res.Configurations != nil {
		body.Configurations = make([]*StationConfigurationResponseBody, len(res.Configurations))
		for i, val := range res.Configurations {
			body.Configurations[i] = marshalInformationviewsStationConfigurationViewToStationConfigurationResponseBody(val)
		}
	}
	if res.Sensors != nil {
		body.Sensors = make(map[string][]*StationSensorResponseBody, len(res.Sensors))
		for key, val := range res.Sensors {
			tk := key
			tv := make([]*StationSensorResponseBody, len(val))
			for i, val := range val {
				tv[i] = marshalInformationviewsStationSensorViewToStationSensorResponseBody(val)
			}
			body.Sensors[tk] = tv
		}
	}
	return body
}

// NewDeviceLayoutBadRequestResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutBadRequestResponseBody(res information.BadRequest) DeviceLayoutBadRequestResponseBody {
	body := DeviceLayoutBadRequestResponseBody(res)
	return body
}

// NewDeviceLayoutForbiddenResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutForbiddenResponseBody(res information.Forbidden) DeviceLayoutForbiddenResponseBody {
	body := DeviceLayoutForbiddenResponseBody(res)
	return body
}

// NewDeviceLayoutNotFoundResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutNotFoundResponseBody(res information.NotFound) DeviceLayoutNotFoundResponseBody {
	body := DeviceLayoutNotFoundResponseBody(res)
	return body
}

// NewDeviceLayoutUnauthorizedResponseBody builds the HTTP response body from
// the result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutUnauthorizedResponseBody(res information.Unauthorized) DeviceLayoutUnauthorizedResponseBody {
	body := DeviceLayoutUnauthorizedResponseBody(res)
	return body
}

// NewFirmwareStatisticsBadRequestResponseBody builds the HTTP response body
// from the result of the "firmware statistics" endpoint of the "information"
// service.
func NewFirmwareStatisticsBadRequestResponseBody(res information.BadRequest) FirmwareStatisticsBadRequestResponseBody {
	body := FirmwareStatisticsBadRequestResponseBody(res)
	return body
}

// NewFirmwareStatisticsForbiddenResponseBody builds the HTTP response body
// from the result of the "firmware statistics" endpoint of the "information"
// service.
func NewFirmwareStatisticsForbiddenResponseBody(res information.Forbidden) FirmwareStatisticsForbiddenResponseBody {
	body := FirmwareStatisticsForbiddenResponseBody(res)
	return body
}

// NewFirmwareStatisticsNotFoundResponseBody builds the HTTP response body from
// the result of the "firmware statistics" endpoint of the "information"
// service.
func NewFirmwareStatisticsNotFoundResponseBody(res information.NotFound) FirmwareStatisticsNotFoundResponseBody {
	body := FirmwareStatisticsNotFoundResponseBody(res)
	return body
}

// NewFirmwareStatisticsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "firmware statistics" endpoint of the "information"
// service.
func NewFirmwareStatisticsUnauthorizedResponseBody(res information.Unauthorized) FirmwareStatisticsUnauthorizedResponseBody {
	body := FirmwareStatisticsUnauthorizedResponseBody(res)
	return body
}

// NewDeviceLayoutPayload builds a information service device layout endpoint
// payload.
func NewDeviceLayoutPayload(deviceID string, auth string) *information.DeviceLayoutPayload {
	v := &information.DeviceLayoutPayload{}
	v.DeviceID = deviceID
	v.Auth = auth

	return v
}

// NewFirmwareStatisticsPayload builds a information service firmware
// statistics endpoint payload.
func NewFirmwareStatisticsPayload(auth string) *information.FirmwareStatisticsPayload {
	v := &information.FirmwareStatisticsPayload{}
	v.Auth = auth

	return v
}
