// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
)

// DeviceLayoutResponseBody is the type of the "information" service "device
// layout" endpoint HTTP response body.
type DeviceLayoutResponseBody struct {
	Configurations []*StationConfigurationResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
}

// DeviceLayoutBadRequestResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "bad-request" error.
type DeviceLayoutBadRequestResponseBody string

// DeviceLayoutForbiddenResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "forbidden" error.
type DeviceLayoutForbiddenResponseBody string

// DeviceLayoutNotFoundResponseBody is the type of the "information" service
// "device layout" endpoint HTTP response body for the "not-found" error.
type DeviceLayoutNotFoundResponseBody string

// DeviceLayoutUnauthorizedResponseBody is the type of the "information"
// service "device layout" endpoint HTTP response body for the "unauthorized"
// error.
type DeviceLayoutUnauthorizedResponseBody string

// StationConfigurationResponseBody is used to define fields on response body
// types.
type StationConfigurationResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	Time         int64                        `form:"time" json:"time" xml:"time"`
	ProvisionID  int64                        `form:"provision_id" json:"provision_id" xml:"provision_id"`
	MetaRecordID *int64                       `form:"meta_record_id,omitempty" json:"meta_record_id,omitempty" xml:"meta_record_id,omitempty"`
	SourceID     *int32                       `form:"source_id,omitempty" json:"source_id,omitempty" xml:"source_id,omitempty"`
	Modules      []*StationModuleResponseBody `form:"modules" json:"modules" xml:"modules"`
}

// StationModuleResponseBody is used to define fields on response body types.
type StationModuleResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	HardwareID   *string                      `form:"hardware_id,omitempty" json:"hardware_id,omitempty" xml:"hardware_id,omitempty"`
	MetaRecordID *int64                       `form:"meta_record_id,omitempty" json:"meta_record_id,omitempty" xml:"meta_record_id,omitempty"`
	Name         string                       `form:"name" json:"name" xml:"name"`
	Position     int32                        `form:"position" json:"position" xml:"position"`
	Flags        int32                        `form:"flags" json:"flags" xml:"flags"`
	Internal     bool                         `form:"internal" json:"internal" xml:"internal"`
	Sensors      []*StationSensorResponseBody `form:"sensors" json:"sensors" xml:"sensors"`
}

// StationSensorResponseBody is used to define fields on response body types.
type StationSensorResponseBody struct {
	Name          string                     `form:"name" json:"name" xml:"name"`
	UnitOfMeasure string                     `form:"unit_of_measure" json:"unit_of_measure" xml:"unit_of_measure"`
	Reading       *SensorReadingResponseBody `form:"reading,omitempty" json:"reading,omitempty" xml:"reading,omitempty"`
}

// SensorReadingResponseBody is used to define fields on response body types.
type SensorReadingResponseBody struct {
	Last float32 `form:"last" json:"last" xml:"last"`
	Time int64   `form:"time" json:"time" xml:"time"`
}

// NewDeviceLayoutResponseBody builds the HTTP response body from the result of
// the "device layout" endpoint of the "information" service.
func NewDeviceLayoutResponseBody(res *informationviews.DeviceLayoutResponseView) *DeviceLayoutResponseBody {
	body := &DeviceLayoutResponseBody{}
	if res.Configurations != nil {
		body.Configurations = make([]*StationConfigurationResponseBody, len(res.Configurations))
		for i, val := range res.Configurations {
			body.Configurations[i] = marshalInformationviewsStationConfigurationViewToStationConfigurationResponseBody(val)
		}
	}
	return body
}

// NewDeviceLayoutBadRequestResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutBadRequestResponseBody(res information.BadRequest) DeviceLayoutBadRequestResponseBody {
	body := DeviceLayoutBadRequestResponseBody(res)
	return body
}

// NewDeviceLayoutForbiddenResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutForbiddenResponseBody(res information.Forbidden) DeviceLayoutForbiddenResponseBody {
	body := DeviceLayoutForbiddenResponseBody(res)
	return body
}

// NewDeviceLayoutNotFoundResponseBody builds the HTTP response body from the
// result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutNotFoundResponseBody(res information.NotFound) DeviceLayoutNotFoundResponseBody {
	body := DeviceLayoutNotFoundResponseBody(res)
	return body
}

// NewDeviceLayoutUnauthorizedResponseBody builds the HTTP response body from
// the result of the "device layout" endpoint of the "information" service.
func NewDeviceLayoutUnauthorizedResponseBody(res information.Unauthorized) DeviceLayoutUnauthorizedResponseBody {
	body := DeviceLayoutUnauthorizedResponseBody(res)
	return body
}

// NewDeviceLayoutPayload builds a information service device layout endpoint
// payload.
func NewDeviceLayoutPayload(deviceID string, auth string) *information.DeviceLayoutPayload {
	v := &information.DeviceLayoutPayload{}
	v.DeviceID = deviceID
	v.Auth = auth

	return v
}
