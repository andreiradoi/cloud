// Code generated by goa v3.1.2, DO NOT EDIT.
//
// csv HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"fmt"
	"strconv"

	csv "github.com/fieldkit/cloud/server/api/gen/csv"
)

// BuildExportPayload builds the payload for the csv export endpoint from CLI
// flags.
func BuildExportPayload(csvExportStart string, csvExportEnd string, csvExportStations string, csvExportSensors string, csvExportResolution string, csvExportAggregate string, csvExportComplete string, csvExportTail string, csvExportAuth string) (*csv.ExportPayload, error) {
	var err error
	var start *int64
	{
		if csvExportStart != "" {
			val, err := strconv.ParseInt(csvExportStart, 10, 64)
			start = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for start, must be INT64")
			}
		}
	}
	var end *int64
	{
		if csvExportEnd != "" {
			val, err := strconv.ParseInt(csvExportEnd, 10, 64)
			end = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for end, must be INT64")
			}
		}
	}
	var stations *string
	{
		if csvExportStations != "" {
			stations = &csvExportStations
		}
	}
	var sensors *string
	{
		if csvExportSensors != "" {
			sensors = &csvExportSensors
		}
	}
	var resolution *int32
	{
		if csvExportResolution != "" {
			var v int64
			v, err = strconv.ParseInt(csvExportResolution, 10, 32)
			val := int32(v)
			resolution = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for resolution, must be INT32")
			}
		}
	}
	var aggregate *string
	{
		if csvExportAggregate != "" {
			aggregate = &csvExportAggregate
		}
	}
	var complete *bool
	{
		if csvExportComplete != "" {
			var val bool
			val, err = strconv.ParseBool(csvExportComplete)
			complete = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for complete, must be BOOL")
			}
		}
	}
	var tail *int32
	{
		if csvExportTail != "" {
			var v int64
			v, err = strconv.ParseInt(csvExportTail, 10, 32)
			val := int32(v)
			tail = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for tail, must be INT32")
			}
		}
	}
	var auth string
	{
		auth = csvExportAuth
	}
	v := &csv.ExportPayload{}
	v.Start = start
	v.End = end
	v.Stations = stations
	v.Sensors = sensors
	v.Resolution = resolution
	v.Aggregate = aggregate
	v.Complete = complete
	v.Tail = tail
	v.Auth = auth

	return v, nil
}

// BuildDownloadPayload builds the payload for the csv download endpoint from
// CLI flags.
func BuildDownloadPayload(csvDownloadID string, csvDownloadAuth string) (*csv.DownloadPayload, error) {
	var id string
	{
		id = csvDownloadID
	}
	var auth string
	{
		auth = csvDownloadAuth
	}
	v := &csv.DownloadPayload{}
	v.ID = id
	v.Auth = auth

	return v, nil
}
