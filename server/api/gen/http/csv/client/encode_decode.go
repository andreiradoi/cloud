// Code generated by goa v3.1.2, DO NOT EDIT.
//
// csv HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"

	csv "github.com/fieldkit/cloud/server/api/gen/csv"
	csvviews "github.com/fieldkit/cloud/server/api/gen/csv/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildExportRequest instantiates a HTTP request object with method and path
// set to call the "csv" service "export" endpoint
func (c *Client) BuildExportRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ExportCsvPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("csv", "export", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeExportRequest returns an encoder for requests sent to the csv export
// server.
func EncodeExportRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*csv.ExportPayload)
		if !ok {
			return goahttp.ErrInvalidType("csv", "export", "*csv.ExportPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.Start != nil {
			values.Add("start", fmt.Sprintf("%v", *p.Start))
		}
		if p.End != nil {
			values.Add("end", fmt.Sprintf("%v", *p.End))
		}
		if p.Stations != nil {
			values.Add("stations", *p.Stations)
		}
		if p.Sensors != nil {
			values.Add("sensors", *p.Sensors)
		}
		if p.Resolution != nil {
			values.Add("resolution", fmt.Sprintf("%v", *p.Resolution))
		}
		if p.Aggregate != nil {
			values.Add("aggregate", *p.Aggregate)
		}
		if p.Complete != nil {
			values.Add("complete", fmt.Sprintf("%v", *p.Complete))
		}
		if p.Tail != nil {
			values.Add("tail", fmt.Sprintf("%v", *p.Tail))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeExportResponse returns a decoder for responses returned by the csv
// export endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeExportResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeExportResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ExportResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "export", err)
			}
			err = ValidateExportResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "export", err)
			}
			res := NewExportResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ExportUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "export", err)
			}
			err = ValidateExportUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "export", err)
			}
			return nil, NewExportUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ExportForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "export", err)
			}
			err = ValidateExportForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "export", err)
			}
			return nil, NewExportForbidden(&body)
		case http.StatusNotFound:
			var (
				body ExportNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "export", err)
			}
			err = ValidateExportNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "export", err)
			}
			return nil, NewExportNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ExportBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "export", err)
			}
			err = ValidateExportBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "export", err)
			}
			return nil, NewExportBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("csv", "export", resp.StatusCode, string(body))
		}
	}
}

// BuildListMineRequest instantiates a HTTP request object with method and path
// set to call the "csv" service "list mine" endpoint
func (c *Client) BuildListMineRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMineCsvPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("csv", "list mine", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMineRequest returns an encoder for requests sent to the csv list
// mine server.
func EncodeListMineRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*csv.ListMinePayload)
		if !ok {
			return goahttp.ErrInvalidType("csv", "list mine", "*csv.ListMinePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeListMineResponse returns a decoder for responses returned by the csv
// list mine endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListMineResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListMineResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMineResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "list mine", err)
			}
			p := NewListMineUserExportsOK(&body)
			view := "default"
			vres := &csvviews.UserExports{Projected: p, View: view}
			if err = csvviews.ValidateUserExports(vres); err != nil {
				return nil, goahttp.ErrValidationError("csv", "list mine", err)
			}
			res := csv.NewUserExports(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListMineUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "list mine", err)
			}
			err = ValidateListMineUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "list mine", err)
			}
			return nil, NewListMineUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListMineForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "list mine", err)
			}
			err = ValidateListMineForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "list mine", err)
			}
			return nil, NewListMineForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListMineNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "list mine", err)
			}
			err = ValidateListMineNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "list mine", err)
			}
			return nil, NewListMineNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListMineBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "list mine", err)
			}
			err = ValidateListMineBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "list mine", err)
			}
			return nil, NewListMineBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("csv", "list mine", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "csv" service "status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*csv.StatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("csv", "status", "*csv.StatusPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusCsvPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("csv", "status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStatusRequest returns an encoder for requests sent to the csv status
// server.
func EncodeStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*csv.StatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("csv", "status", "*csv.StatusPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeStatusResponse returns a decoder for responses returned by the csv
// status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeStatusResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "status", err)
			}
			p := NewStatusExportStatusOK(&body)
			view := "default"
			vres := &csvviews.ExportStatus{Projected: p, View: view}
			if err = csvviews.ValidateExportStatus(vres); err != nil {
				return nil, goahttp.ErrValidationError("csv", "status", err)
			}
			res := csv.NewExportStatus(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body StatusUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "status", err)
			}
			err = ValidateStatusUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "status", err)
			}
			return nil, NewStatusUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body StatusForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "status", err)
			}
			err = ValidateStatusForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "status", err)
			}
			return nil, NewStatusForbidden(&body)
		case http.StatusNotFound:
			var (
				body StatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "status", err)
			}
			err = ValidateStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "status", err)
			}
			return nil, NewStatusNotFound(&body)
		case http.StatusBadRequest:
			var (
				body StatusBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "status", err)
			}
			err = ValidateStatusBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "status", err)
			}
			return nil, NewStatusBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("csv", "status", resp.StatusCode, string(body))
		}
	}
}

// BuildDownloadRequest instantiates a HTTP request object with method and path
// set to call the "csv" service "download" endpoint
func (c *Client) BuildDownloadRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*csv.DownloadPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("csv", "download", "*csv.DownloadPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadCsvPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("csv", "download", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDownloadRequest returns an encoder for requests sent to the csv
// download server.
func EncodeDownloadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*csv.DownloadPayload)
		if !ok {
			return goahttp.ErrInvalidType("csv", "download", "*csv.DownloadPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDownloadResponse returns a decoder for responses returned by the csv
// download endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDownloadResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDownloadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				length      int64
				contentType string
				err         error
			)
			{
				lengthRaw := resp.Header.Get("Content-Length")
				if lengthRaw == "" {
					return nil, goahttp.ErrValidationError("csv", "download", goa.MissingFieldError("Content-Length", "header"))
				}
				v, err2 := strconv.ParseInt(lengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("length", lengthRaw, "integer"))
				}
				length = v
			}
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Content-Type", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "download", err)
			}
			res := NewDownloadResultOK(length, contentType)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DownloadUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "download", err)
			}
			err = ValidateDownloadUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "download", err)
			}
			return nil, NewDownloadUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DownloadForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "download", err)
			}
			err = ValidateDownloadForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "download", err)
			}
			return nil, NewDownloadForbidden(&body)
		case http.StatusNotFound:
			var (
				body DownloadNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "download", err)
			}
			err = ValidateDownloadNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "download", err)
			}
			return nil, NewDownloadNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DownloadBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("csv", "download", err)
			}
			err = ValidateDownloadBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("csv", "download", err)
			}
			return nil, NewDownloadBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("csv", "download", resp.StatusCode, string(body))
		}
	}
}

// unmarshalExportStatusResponseBodyToCsvviewsExportStatusView builds a value
// of type *csvviews.ExportStatusView from a value of type
// *ExportStatusResponseBody.
func unmarshalExportStatusResponseBodyToCsvviewsExportStatusView(v *ExportStatusResponseBody) *csvviews.ExportStatusView {
	res := &csvviews.ExportStatusView{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		CompletedAt: v.CompletedAt,
		Progress:    v.Progress,
		URL:         v.URL,
		Kind:        v.Kind,
		Args:        v.Args,
	}

	return res
}
