// Code generated by goa v3.1.2, DO NOT EDIT.
//
// csv HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	csv "github.com/fieldkit/cloud/server/api/gen/csv"
	csvviews "github.com/fieldkit/cloud/server/api/gen/csv/views"
	goa "goa.design/goa/v3/pkg"
)

// ExportResponseBody is the type of the "csv" service "export" endpoint HTTP
// response body.
type ExportResponseBody struct {
	Location string `form:"location" json:"location" xml:"location"`
}

// StatusResponseBody is the type of the "csv" service "status" endpoint HTTP
// response body.
type StatusResponseBody struct {
	ID          int64       `form:"id" json:"id" xml:"id"`
	Progress    float32     `form:"progress" json:"progress" xml:"progress"`
	URL         *string     `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Args        interface{} `form:"args" json:"args" xml:"args"`
	CreatedAt   int64       `form:"createdAt" json:"createdAt" xml:"createdAt"`
	CompletedAt *int64      `form:"completedAt,omitempty" json:"completedAt,omitempty" xml:"completedAt,omitempty"`
}

// ExportUnauthorizedResponseBody is the type of the "csv" service "export"
// endpoint HTTP response body for the "unauthorized" error.
type ExportUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExportForbiddenResponseBody is the type of the "csv" service "export"
// endpoint HTTP response body for the "forbidden" error.
type ExportForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExportNotFoundResponseBody is the type of the "csv" service "export"
// endpoint HTTP response body for the "not-found" error.
type ExportNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExportBadRequestResponseBody is the type of the "csv" service "export"
// endpoint HTTP response body for the "bad-request" error.
type ExportBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusUnauthorizedResponseBody is the type of the "csv" service "status"
// endpoint HTTP response body for the "unauthorized" error.
type StatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusForbiddenResponseBody is the type of the "csv" service "status"
// endpoint HTTP response body for the "forbidden" error.
type StatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusNotFoundResponseBody is the type of the "csv" service "status"
// endpoint HTTP response body for the "not-found" error.
type StatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusBadRequestResponseBody is the type of the "csv" service "status"
// endpoint HTTP response body for the "bad-request" error.
type StatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadUnauthorizedResponseBody is the type of the "csv" service "download"
// endpoint HTTP response body for the "unauthorized" error.
type DownloadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadForbiddenResponseBody is the type of the "csv" service "download"
// endpoint HTTP response body for the "forbidden" error.
type DownloadForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadNotFoundResponseBody is the type of the "csv" service "download"
// endpoint HTTP response body for the "not-found" error.
type DownloadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadBadRequestResponseBody is the type of the "csv" service "download"
// endpoint HTTP response body for the "bad-request" error.
type DownloadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewExportResponseBody builds the HTTP response body from the result of the
// "export" endpoint of the "csv" service.
func NewExportResponseBody(res *csv.ExportResult) *ExportResponseBody {
	body := &ExportResponseBody{
		Location: res.Location,
	}
	return body
}

// NewStatusResponseBody builds the HTTP response body from the result of the
// "status" endpoint of the "csv" service.
func NewStatusResponseBody(res *csvviews.ExportStatusView) *StatusResponseBody {
	body := &StatusResponseBody{
		ID:          *res.ID,
		CreatedAt:   *res.CreatedAt,
		CompletedAt: res.CompletedAt,
		Progress:    *res.Progress,
		URL:         res.URL,
		Args:        res.Args,
	}
	return body
}

// NewExportUnauthorizedResponseBody builds the HTTP response body from the
// result of the "export" endpoint of the "csv" service.
func NewExportUnauthorizedResponseBody(res *goa.ServiceError) *ExportUnauthorizedResponseBody {
	body := &ExportUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExportForbiddenResponseBody builds the HTTP response body from the result
// of the "export" endpoint of the "csv" service.
func NewExportForbiddenResponseBody(res *goa.ServiceError) *ExportForbiddenResponseBody {
	body := &ExportForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExportNotFoundResponseBody builds the HTTP response body from the result
// of the "export" endpoint of the "csv" service.
func NewExportNotFoundResponseBody(res *goa.ServiceError) *ExportNotFoundResponseBody {
	body := &ExportNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExportBadRequestResponseBody builds the HTTP response body from the
// result of the "export" endpoint of the "csv" service.
func NewExportBadRequestResponseBody(res *goa.ServiceError) *ExportBadRequestResponseBody {
	body := &ExportBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusUnauthorizedResponseBody builds the HTTP response body from the
// result of the "status" endpoint of the "csv" service.
func NewStatusUnauthorizedResponseBody(res *goa.ServiceError) *StatusUnauthorizedResponseBody {
	body := &StatusUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusForbiddenResponseBody builds the HTTP response body from the result
// of the "status" endpoint of the "csv" service.
func NewStatusForbiddenResponseBody(res *goa.ServiceError) *StatusForbiddenResponseBody {
	body := &StatusForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusNotFoundResponseBody builds the HTTP response body from the result
// of the "status" endpoint of the "csv" service.
func NewStatusNotFoundResponseBody(res *goa.ServiceError) *StatusNotFoundResponseBody {
	body := &StatusNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusBadRequestResponseBody builds the HTTP response body from the
// result of the "status" endpoint of the "csv" service.
func NewStatusBadRequestResponseBody(res *goa.ServiceError) *StatusBadRequestResponseBody {
	body := &StatusBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadUnauthorizedResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "csv" service.
func NewDownloadUnauthorizedResponseBody(res *goa.ServiceError) *DownloadUnauthorizedResponseBody {
	body := &DownloadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadForbiddenResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "csv" service.
func NewDownloadForbiddenResponseBody(res *goa.ServiceError) *DownloadForbiddenResponseBody {
	body := &DownloadForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadNotFoundResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "csv" service.
func NewDownloadNotFoundResponseBody(res *goa.ServiceError) *DownloadNotFoundResponseBody {
	body := &DownloadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadBadRequestResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "csv" service.
func NewDownloadBadRequestResponseBody(res *goa.ServiceError) *DownloadBadRequestResponseBody {
	body := &DownloadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExportPayload builds a csv service export endpoint payload.
func NewExportPayload(start *int64, end *int64, stations *string, sensors *string, resolution *int32, aggregate *string, complete *bool, tail *int32, auth string) *csv.ExportPayload {
	v := &csv.ExportPayload{}
	v.Start = start
	v.End = end
	v.Stations = stations
	v.Sensors = sensors
	v.Resolution = resolution
	v.Aggregate = aggregate
	v.Complete = complete
	v.Tail = tail
	v.Auth = auth

	return v
}

// NewStatusPayload builds a csv service status endpoint payload.
func NewStatusPayload(id string, auth string) *csv.StatusPayload {
	v := &csv.StatusPayload{}
	v.ID = id
	v.Auth = auth

	return v
}

// NewDownloadPayload builds a csv service download endpoint payload.
func NewDownloadPayload(id string, auth string) *csv.DownloadPayload {
	v := &csv.DownloadPayload{}
	v.ID = id
	v.Auth = auth

	return v
}
