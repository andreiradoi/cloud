// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"unicode/utf8"

	project "github.com/fieldkit/cloud/server/api/gen/project"
	projectviews "github.com/fieldkit/cloud/server/api/gen/project/views"
	goa "goa.design/goa/v3/pkg"
)

// AddUpdateRequestBody is the type of the "project" service "add update"
// endpoint HTTP request body.
type AddUpdateRequestBody struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// ModifyUpdateRequestBody is the type of the "project" service "modify update"
// endpoint HTTP request body.
type ModifyUpdateRequestBody struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// AddRequestBody is the type of the "project" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Goal        *string `form:"goal,omitempty" json:"goal,omitempty" xml:"goal,omitempty"`
	Location    *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	Tags        *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Private     *bool   `form:"private,omitempty" json:"private,omitempty" xml:"private,omitempty"`
	StartTime   *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime     *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
}

// UpdateRequestBody is the type of the "project" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Goal        *string `form:"goal,omitempty" json:"goal,omitempty" xml:"goal,omitempty"`
	Location    *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	Tags        *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Private     *bool   `form:"private,omitempty" json:"private,omitempty" xml:"private,omitempty"`
	StartTime   *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime     *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
}

// InviteRequestBody is the type of the "project" service "invite" endpoint
// HTTP request body.
type InviteRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Role  *int32  `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// RemoveUserRequestBody is the type of the "project" service "remove user"
// endpoint HTTP request body.
type RemoveUserRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// AddUpdateResponseBody is the type of the "project" service "add update"
// endpoint HTTP response body.
type AddUpdateResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Body string `form:"body" json:"body" xml:"body"`
}

// ModifyUpdateResponseBody is the type of the "project" service "modify
// update" endpoint HTTP response body.
type ModifyUpdateResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Body string `form:"body" json:"body" xml:"body"`
}

// InvitesResponseBody is the type of the "project" service "invites" endpoint
// HTTP response body.
type InvitesResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending" json:"pending" xml:"pending"`
}

// LookupInviteResponseBody is the type of the "project" service "lookup
// invite" endpoint HTTP response body.
type LookupInviteResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending" json:"pending" xml:"pending"`
}

// AddResponseBody is the type of the "project" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	ID                int32   `form:"id" json:"id" xml:"id"`
	Name              string  `form:"name" json:"name" xml:"name"`
	Slug              string  `form:"slug" json:"slug" xml:"slug"`
	Description       string  `form:"description" json:"description" xml:"description"`
	Goal              string  `form:"goal" json:"goal" xml:"goal"`
	Location          string  `form:"location" json:"location" xml:"location"`
	Tags              string  `form:"tags" json:"tags" xml:"tags"`
	Private           bool    `form:"private" json:"private" xml:"private"`
	StartTime         *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime           *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	Photo             *string `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	ReadOnly          bool    `form:"readOnly" json:"readOnly" xml:"readOnly"`
	NumberOfFollowers int32   `form:"numberOfFollowers" json:"numberOfFollowers" xml:"numberOfFollowers"`
}

// UpdateResponseBody is the type of the "project" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	ID                int32   `form:"id" json:"id" xml:"id"`
	Name              string  `form:"name" json:"name" xml:"name"`
	Slug              string  `form:"slug" json:"slug" xml:"slug"`
	Description       string  `form:"description" json:"description" xml:"description"`
	Goal              string  `form:"goal" json:"goal" xml:"goal"`
	Location          string  `form:"location" json:"location" xml:"location"`
	Tags              string  `form:"tags" json:"tags" xml:"tags"`
	Private           bool    `form:"private" json:"private" xml:"private"`
	StartTime         *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime           *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	Photo             *string `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	ReadOnly          bool    `form:"readOnly" json:"readOnly" xml:"readOnly"`
	NumberOfFollowers int32   `form:"numberOfFollowers" json:"numberOfFollowers" xml:"numberOfFollowers"`
}

// GetResponseBody is the type of the "project" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID                int32   `form:"id" json:"id" xml:"id"`
	Name              string  `form:"name" json:"name" xml:"name"`
	Slug              string  `form:"slug" json:"slug" xml:"slug"`
	Description       string  `form:"description" json:"description" xml:"description"`
	Goal              string  `form:"goal" json:"goal" xml:"goal"`
	Location          string  `form:"location" json:"location" xml:"location"`
	Tags              string  `form:"tags" json:"tags" xml:"tags"`
	Private           bool    `form:"private" json:"private" xml:"private"`
	StartTime         *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime           *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	Photo             *string `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	ReadOnly          bool    `form:"readOnly" json:"readOnly" xml:"readOnly"`
	NumberOfFollowers int32   `form:"numberOfFollowers" json:"numberOfFollowers" xml:"numberOfFollowers"`
}

// ListCommunityResponseBody is the type of the "project" service "list
// community" endpoint HTTP response body.
type ListCommunityResponseBody struct {
	Projects ProjectResponseBodyCollection `form:"projects" json:"projects" xml:"projects"`
}

// ListMineResponseBody is the type of the "project" service "list mine"
// endpoint HTTP response body.
type ListMineResponseBody struct {
	Projects ProjectResponseBodyCollection `form:"projects" json:"projects" xml:"projects"`
}

// AddUpdateBadRequestResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "bad-request" error.
type AddUpdateBadRequestResponseBody string

// AddUpdateForbiddenResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "forbidden" error.
type AddUpdateForbiddenResponseBody string

// AddUpdateNotFoundResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "not-found" error.
type AddUpdateNotFoundResponseBody string

// AddUpdateUnauthorizedResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "unauthorized" error.
type AddUpdateUnauthorizedResponseBody string

// DeleteUpdateBadRequestResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "bad-request" error.
type DeleteUpdateBadRequestResponseBody string

// DeleteUpdateForbiddenResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "forbidden" error.
type DeleteUpdateForbiddenResponseBody string

// DeleteUpdateNotFoundResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "not-found" error.
type DeleteUpdateNotFoundResponseBody string

// DeleteUpdateUnauthorizedResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "unauthorized" error.
type DeleteUpdateUnauthorizedResponseBody string

// ModifyUpdateBadRequestResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "bad-request" error.
type ModifyUpdateBadRequestResponseBody string

// ModifyUpdateForbiddenResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "forbidden" error.
type ModifyUpdateForbiddenResponseBody string

// ModifyUpdateNotFoundResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "not-found" error.
type ModifyUpdateNotFoundResponseBody string

// ModifyUpdateUnauthorizedResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "unauthorized" error.
type ModifyUpdateUnauthorizedResponseBody string

// InvitesBadRequestResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "bad-request" error.
type InvitesBadRequestResponseBody string

// InvitesForbiddenResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "forbidden" error.
type InvitesForbiddenResponseBody string

// InvitesNotFoundResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "not-found" error.
type InvitesNotFoundResponseBody string

// InvitesUnauthorizedResponseBody is the type of the "project" service
// "invites" endpoint HTTP response body for the "unauthorized" error.
type InvitesUnauthorizedResponseBody string

// LookupInviteBadRequestResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "bad-request" error.
type LookupInviteBadRequestResponseBody string

// LookupInviteForbiddenResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "forbidden" error.
type LookupInviteForbiddenResponseBody string

// LookupInviteNotFoundResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "not-found" error.
type LookupInviteNotFoundResponseBody string

// LookupInviteUnauthorizedResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "unauthorized" error.
type LookupInviteUnauthorizedResponseBody string

// AcceptInviteBadRequestResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "bad-request" error.
type AcceptInviteBadRequestResponseBody string

// AcceptInviteForbiddenResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "forbidden" error.
type AcceptInviteForbiddenResponseBody string

// AcceptInviteNotFoundResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "not-found" error.
type AcceptInviteNotFoundResponseBody string

// AcceptInviteUnauthorizedResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "unauthorized" error.
type AcceptInviteUnauthorizedResponseBody string

// RejectInviteBadRequestResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "bad-request" error.
type RejectInviteBadRequestResponseBody string

// RejectInviteForbiddenResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "forbidden" error.
type RejectInviteForbiddenResponseBody string

// RejectInviteNotFoundResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "not-found" error.
type RejectInviteNotFoundResponseBody string

// RejectInviteUnauthorizedResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "unauthorized" error.
type RejectInviteUnauthorizedResponseBody string

// AddBadRequestResponseBody is the type of the "project" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody string

// AddForbiddenResponseBody is the type of the "project" service "add" endpoint
// HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody string

// AddNotFoundResponseBody is the type of the "project" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody string

// AddUnauthorizedResponseBody is the type of the "project" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody string

// UpdateBadRequestResponseBody is the type of the "project" service "update"
// endpoint HTTP response body for the "bad-request" error.
type UpdateBadRequestResponseBody string

// UpdateForbiddenResponseBody is the type of the "project" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody string

// UpdateNotFoundResponseBody is the type of the "project" service "update"
// endpoint HTTP response body for the "not-found" error.
type UpdateNotFoundResponseBody string

// UpdateUnauthorizedResponseBody is the type of the "project" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody string

// GetBadRequestResponseBody is the type of the "project" service "get"
// endpoint HTTP response body for the "bad-request" error.
type GetBadRequestResponseBody string

// GetForbiddenResponseBody is the type of the "project" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody string

// GetNotFoundResponseBody is the type of the "project" service "get" endpoint
// HTTP response body for the "not-found" error.
type GetNotFoundResponseBody string

// GetUnauthorizedResponseBody is the type of the "project" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody string

// ListCommunityBadRequestResponseBody is the type of the "project" service
// "list community" endpoint HTTP response body for the "bad-request" error.
type ListCommunityBadRequestResponseBody string

// ListCommunityForbiddenResponseBody is the type of the "project" service
// "list community" endpoint HTTP response body for the "forbidden" error.
type ListCommunityForbiddenResponseBody string

// ListCommunityNotFoundResponseBody is the type of the "project" service "list
// community" endpoint HTTP response body for the "not-found" error.
type ListCommunityNotFoundResponseBody string

// ListCommunityUnauthorizedResponseBody is the type of the "project" service
// "list community" endpoint HTTP response body for the "unauthorized" error.
type ListCommunityUnauthorizedResponseBody string

// ListMineBadRequestResponseBody is the type of the "project" service "list
// mine" endpoint HTTP response body for the "bad-request" error.
type ListMineBadRequestResponseBody string

// ListMineForbiddenResponseBody is the type of the "project" service "list
// mine" endpoint HTTP response body for the "forbidden" error.
type ListMineForbiddenResponseBody string

// ListMineNotFoundResponseBody is the type of the "project" service "list
// mine" endpoint HTTP response body for the "not-found" error.
type ListMineNotFoundResponseBody string

// ListMineUnauthorizedResponseBody is the type of the "project" service "list
// mine" endpoint HTTP response body for the "unauthorized" error.
type ListMineUnauthorizedResponseBody string

// InviteBadRequestResponseBody is the type of the "project" service "invite"
// endpoint HTTP response body for the "bad-request" error.
type InviteBadRequestResponseBody string

// InviteForbiddenResponseBody is the type of the "project" service "invite"
// endpoint HTTP response body for the "forbidden" error.
type InviteForbiddenResponseBody string

// InviteNotFoundResponseBody is the type of the "project" service "invite"
// endpoint HTTP response body for the "not-found" error.
type InviteNotFoundResponseBody string

// InviteUnauthorizedResponseBody is the type of the "project" service "invite"
// endpoint HTTP response body for the "unauthorized" error.
type InviteUnauthorizedResponseBody string

// RemoveUserBadRequestResponseBody is the type of the "project" service
// "remove user" endpoint HTTP response body for the "bad-request" error.
type RemoveUserBadRequestResponseBody string

// RemoveUserForbiddenResponseBody is the type of the "project" service "remove
// user" endpoint HTTP response body for the "forbidden" error.
type RemoveUserForbiddenResponseBody string

// RemoveUserNotFoundResponseBody is the type of the "project" service "remove
// user" endpoint HTTP response body for the "not-found" error.
type RemoveUserNotFoundResponseBody string

// RemoveUserUnauthorizedResponseBody is the type of the "project" service
// "remove user" endpoint HTTP response body for the "unauthorized" error.
type RemoveUserUnauthorizedResponseBody string

// AddStationBadRequestResponseBody is the type of the "project" service "add
// station" endpoint HTTP response body for the "bad-request" error.
type AddStationBadRequestResponseBody string

// AddStationForbiddenResponseBody is the type of the "project" service "add
// station" endpoint HTTP response body for the "forbidden" error.
type AddStationForbiddenResponseBody string

// AddStationNotFoundResponseBody is the type of the "project" service "add
// station" endpoint HTTP response body for the "not-found" error.
type AddStationNotFoundResponseBody string

// AddStationUnauthorizedResponseBody is the type of the "project" service "add
// station" endpoint HTTP response body for the "unauthorized" error.
type AddStationUnauthorizedResponseBody string

// RemoveStationBadRequestResponseBody is the type of the "project" service
// "remove station" endpoint HTTP response body for the "bad-request" error.
type RemoveStationBadRequestResponseBody string

// RemoveStationForbiddenResponseBody is the type of the "project" service
// "remove station" endpoint HTTP response body for the "forbidden" error.
type RemoveStationForbiddenResponseBody string

// RemoveStationNotFoundResponseBody is the type of the "project" service
// "remove station" endpoint HTTP response body for the "not-found" error.
type RemoveStationNotFoundResponseBody string

// RemoveStationUnauthorizedResponseBody is the type of the "project" service
// "remove station" endpoint HTTP response body for the "unauthorized" error.
type RemoveStationUnauthorizedResponseBody string

// DeleteBadRequestResponseBody is the type of the "project" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody string

// DeleteForbiddenResponseBody is the type of the "project" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody string

// DeleteNotFoundResponseBody is the type of the "project" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody string

// DeleteUnauthorizedResponseBody is the type of the "project" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody string

// UploadMediaBadRequestResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "bad-request" error.
type UploadMediaBadRequestResponseBody string

// UploadMediaForbiddenResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "forbidden" error.
type UploadMediaForbiddenResponseBody string

// UploadMediaNotFoundResponseBody is the type of the "project" service "upload
// media" endpoint HTTP response body for the "not-found" error.
type UploadMediaNotFoundResponseBody string

// UploadMediaUnauthorizedResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "unauthorized" error.
type UploadMediaUnauthorizedResponseBody string

// DownloadMediaBadRequestResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "bad-request" error.
type DownloadMediaBadRequestResponseBody string

// DownloadMediaForbiddenResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "forbidden" error.
type DownloadMediaForbiddenResponseBody string

// DownloadMediaNotFoundResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "not-found" error.
type DownloadMediaNotFoundResponseBody string

// DownloadMediaUnauthorizedResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "unauthorized" error.
type DownloadMediaUnauthorizedResponseBody string

// PendingInviteResponseBody is used to define fields on response body types.
type PendingInviteResponseBody struct {
	ID      int64                       `form:"id" json:"id" xml:"id"`
	Project *ProjectSummaryResponseBody `form:"project" json:"project" xml:"project"`
	Time    int64                       `form:"time" json:"time" xml:"time"`
	Role    int32                       `form:"role" json:"role" xml:"role"`
}

// ProjectSummaryResponseBody is used to define fields on response body types.
type ProjectSummaryResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// ProjectResponseBodyCollection is used to define fields on response body
// types.
type ProjectResponseBodyCollection []*ProjectResponseBody

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	ID                int32   `form:"id" json:"id" xml:"id"`
	Name              string  `form:"name" json:"name" xml:"name"`
	Slug              string  `form:"slug" json:"slug" xml:"slug"`
	Description       string  `form:"description" json:"description" xml:"description"`
	Goal              string  `form:"goal" json:"goal" xml:"goal"`
	Location          string  `form:"location" json:"location" xml:"location"`
	Tags              string  `form:"tags" json:"tags" xml:"tags"`
	Private           bool    `form:"private" json:"private" xml:"private"`
	StartTime         *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	EndTime           *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	Photo             *string `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	ReadOnly          bool    `form:"readOnly" json:"readOnly" xml:"readOnly"`
	NumberOfFollowers int32   `form:"numberOfFollowers" json:"numberOfFollowers" xml:"numberOfFollowers"`
}

// NewAddUpdateResponseBody builds the HTTP response body from the result of
// the "add update" endpoint of the "project" service.
func NewAddUpdateResponseBody(res *projectviews.ProjectUpdateView) *AddUpdateResponseBody {
	body := &AddUpdateResponseBody{
		ID:   *res.ID,
		Body: *res.Body,
	}
	return body
}

// NewModifyUpdateResponseBody builds the HTTP response body from the result of
// the "modify update" endpoint of the "project" service.
func NewModifyUpdateResponseBody(res *projectviews.ProjectUpdateView) *ModifyUpdateResponseBody {
	body := &ModifyUpdateResponseBody{
		ID:   *res.ID,
		Body: *res.Body,
	}
	return body
}

// NewInvitesResponseBody builds the HTTP response body from the result of the
// "invites" endpoint of the "project" service.
func NewInvitesResponseBody(res *projectviews.PendingInvitesView) *InvitesResponseBody {
	body := &InvitesResponseBody{}
	if res.Pending != nil {
		body.Pending = make([]*PendingInviteResponseBody, len(res.Pending))
		for i, val := range res.Pending {
			body.Pending[i] = marshalProjectviewsPendingInviteViewToPendingInviteResponseBody(val)
		}
	}
	return body
}

// NewLookupInviteResponseBody builds the HTTP response body from the result of
// the "lookup invite" endpoint of the "project" service.
func NewLookupInviteResponseBody(res *projectviews.PendingInvitesView) *LookupInviteResponseBody {
	body := &LookupInviteResponseBody{}
	if res.Pending != nil {
		body.Pending = make([]*PendingInviteResponseBody, len(res.Pending))
		for i, val := range res.Pending {
			body.Pending[i] = marshalProjectviewsPendingInviteViewToPendingInviteResponseBody(val)
		}
	}
	return body
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "project" service.
func NewAddResponseBody(res *projectviews.ProjectView) *AddResponseBody {
	body := &AddResponseBody{
		ID:                *res.ID,
		Name:              *res.Name,
		Slug:              *res.Slug,
		Description:       *res.Description,
		Goal:              *res.Goal,
		Location:          *res.Location,
		Tags:              *res.Tags,
		Private:           *res.Private,
		StartTime:         res.StartTime,
		EndTime:           res.EndTime,
		Photo:             res.Photo,
		ReadOnly:          *res.ReadOnly,
		NumberOfFollowers: *res.NumberOfFollowers,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "project" service.
func NewUpdateResponseBody(res *projectviews.ProjectView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:                *res.ID,
		Name:              *res.Name,
		Slug:              *res.Slug,
		Description:       *res.Description,
		Goal:              *res.Goal,
		Location:          *res.Location,
		Tags:              *res.Tags,
		Private:           *res.Private,
		StartTime:         res.StartTime,
		EndTime:           res.EndTime,
		Photo:             res.Photo,
		ReadOnly:          *res.ReadOnly,
		NumberOfFollowers: *res.NumberOfFollowers,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "project" service.
func NewGetResponseBody(res *projectviews.ProjectView) *GetResponseBody {
	body := &GetResponseBody{
		ID:                *res.ID,
		Name:              *res.Name,
		Slug:              *res.Slug,
		Description:       *res.Description,
		Goal:              *res.Goal,
		Location:          *res.Location,
		Tags:              *res.Tags,
		Private:           *res.Private,
		StartTime:         res.StartTime,
		EndTime:           res.EndTime,
		Photo:             res.Photo,
		ReadOnly:          *res.ReadOnly,
		NumberOfFollowers: *res.NumberOfFollowers,
	}
	return body
}

// NewListCommunityResponseBody builds the HTTP response body from the result
// of the "list community" endpoint of the "project" service.
func NewListCommunityResponseBody(res *projectviews.ProjectsView) *ListCommunityResponseBody {
	body := &ListCommunityResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectviewsProjectViewToProjectResponseBody(val)
		}
	}
	return body
}

// NewListMineResponseBody builds the HTTP response body from the result of the
// "list mine" endpoint of the "project" service.
func NewListMineResponseBody(res *projectviews.ProjectsView) *ListMineResponseBody {
	body := &ListMineResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectviewsProjectViewToProjectResponseBody(val)
		}
	}
	return body
}

// NewAddUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateBadRequestResponseBody(res project.BadRequest) AddUpdateBadRequestResponseBody {
	body := AddUpdateBadRequestResponseBody(res)
	return body
}

// NewAddUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateForbiddenResponseBody(res project.Forbidden) AddUpdateForbiddenResponseBody {
	body := AddUpdateForbiddenResponseBody(res)
	return body
}

// NewAddUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateNotFoundResponseBody(res project.NotFound) AddUpdateNotFoundResponseBody {
	body := AddUpdateNotFoundResponseBody(res)
	return body
}

// NewAddUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateUnauthorizedResponseBody(res project.Unauthorized) AddUpdateUnauthorizedResponseBody {
	body := AddUpdateUnauthorizedResponseBody(res)
	return body
}

// NewDeleteUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateBadRequestResponseBody(res project.BadRequest) DeleteUpdateBadRequestResponseBody {
	body := DeleteUpdateBadRequestResponseBody(res)
	return body
}

// NewDeleteUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateForbiddenResponseBody(res project.Forbidden) DeleteUpdateForbiddenResponseBody {
	body := DeleteUpdateForbiddenResponseBody(res)
	return body
}

// NewDeleteUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateNotFoundResponseBody(res project.NotFound) DeleteUpdateNotFoundResponseBody {
	body := DeleteUpdateNotFoundResponseBody(res)
	return body
}

// NewDeleteUpdateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateUnauthorizedResponseBody(res project.Unauthorized) DeleteUpdateUnauthorizedResponseBody {
	body := DeleteUpdateUnauthorizedResponseBody(res)
	return body
}

// NewModifyUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateBadRequestResponseBody(res project.BadRequest) ModifyUpdateBadRequestResponseBody {
	body := ModifyUpdateBadRequestResponseBody(res)
	return body
}

// NewModifyUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateForbiddenResponseBody(res project.Forbidden) ModifyUpdateForbiddenResponseBody {
	body := ModifyUpdateForbiddenResponseBody(res)
	return body
}

// NewModifyUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateNotFoundResponseBody(res project.NotFound) ModifyUpdateNotFoundResponseBody {
	body := ModifyUpdateNotFoundResponseBody(res)
	return body
}

// NewModifyUpdateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateUnauthorizedResponseBody(res project.Unauthorized) ModifyUpdateUnauthorizedResponseBody {
	body := ModifyUpdateUnauthorizedResponseBody(res)
	return body
}

// NewInvitesBadRequestResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesBadRequestResponseBody(res project.BadRequest) InvitesBadRequestResponseBody {
	body := InvitesBadRequestResponseBody(res)
	return body
}

// NewInvitesForbiddenResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesForbiddenResponseBody(res project.Forbidden) InvitesForbiddenResponseBody {
	body := InvitesForbiddenResponseBody(res)
	return body
}

// NewInvitesNotFoundResponseBody builds the HTTP response body from the result
// of the "invites" endpoint of the "project" service.
func NewInvitesNotFoundResponseBody(res project.NotFound) InvitesNotFoundResponseBody {
	body := InvitesNotFoundResponseBody(res)
	return body
}

// NewInvitesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesUnauthorizedResponseBody(res project.Unauthorized) InvitesUnauthorizedResponseBody {
	body := InvitesUnauthorizedResponseBody(res)
	return body
}

// NewLookupInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteBadRequestResponseBody(res project.BadRequest) LookupInviteBadRequestResponseBody {
	body := LookupInviteBadRequestResponseBody(res)
	return body
}

// NewLookupInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteForbiddenResponseBody(res project.Forbidden) LookupInviteForbiddenResponseBody {
	body := LookupInviteForbiddenResponseBody(res)
	return body
}

// NewLookupInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteNotFoundResponseBody(res project.NotFound) LookupInviteNotFoundResponseBody {
	body := LookupInviteNotFoundResponseBody(res)
	return body
}

// NewLookupInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteUnauthorizedResponseBody(res project.Unauthorized) LookupInviteUnauthorizedResponseBody {
	body := LookupInviteUnauthorizedResponseBody(res)
	return body
}

// NewAcceptInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteBadRequestResponseBody(res project.BadRequest) AcceptInviteBadRequestResponseBody {
	body := AcceptInviteBadRequestResponseBody(res)
	return body
}

// NewAcceptInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteForbiddenResponseBody(res project.Forbidden) AcceptInviteForbiddenResponseBody {
	body := AcceptInviteForbiddenResponseBody(res)
	return body
}

// NewAcceptInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteNotFoundResponseBody(res project.NotFound) AcceptInviteNotFoundResponseBody {
	body := AcceptInviteNotFoundResponseBody(res)
	return body
}

// NewAcceptInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteUnauthorizedResponseBody(res project.Unauthorized) AcceptInviteUnauthorizedResponseBody {
	body := AcceptInviteUnauthorizedResponseBody(res)
	return body
}

// NewRejectInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteBadRequestResponseBody(res project.BadRequest) RejectInviteBadRequestResponseBody {
	body := RejectInviteBadRequestResponseBody(res)
	return body
}

// NewRejectInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteForbiddenResponseBody(res project.Forbidden) RejectInviteForbiddenResponseBody {
	body := RejectInviteForbiddenResponseBody(res)
	return body
}

// NewRejectInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteNotFoundResponseBody(res project.NotFound) RejectInviteNotFoundResponseBody {
	body := RejectInviteNotFoundResponseBody(res)
	return body
}

// NewRejectInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteUnauthorizedResponseBody(res project.Unauthorized) RejectInviteUnauthorizedResponseBody {
	body := RejectInviteUnauthorizedResponseBody(res)
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "project" service.
func NewAddBadRequestResponseBody(res project.BadRequest) AddBadRequestResponseBody {
	body := AddBadRequestResponseBody(res)
	return body
}

// NewAddForbiddenResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "project" service.
func NewAddForbiddenResponseBody(res project.Forbidden) AddForbiddenResponseBody {
	body := AddForbiddenResponseBody(res)
	return body
}

// NewAddNotFoundResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "project" service.
func NewAddNotFoundResponseBody(res project.NotFound) AddNotFoundResponseBody {
	body := AddNotFoundResponseBody(res)
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "project" service.
func NewAddUnauthorizedResponseBody(res project.Unauthorized) AddUnauthorizedResponseBody {
	body := AddUnauthorizedResponseBody(res)
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "project" service.
func NewUpdateBadRequestResponseBody(res project.BadRequest) UpdateBadRequestResponseBody {
	body := UpdateBadRequestResponseBody(res)
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "project" service.
func NewUpdateForbiddenResponseBody(res project.Forbidden) UpdateForbiddenResponseBody {
	body := UpdateForbiddenResponseBody(res)
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "project" service.
func NewUpdateNotFoundResponseBody(res project.NotFound) UpdateNotFoundResponseBody {
	body := UpdateNotFoundResponseBody(res)
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "project" service.
func NewUpdateUnauthorizedResponseBody(res project.Unauthorized) UpdateUnauthorizedResponseBody {
	body := UpdateUnauthorizedResponseBody(res)
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "project" service.
func NewGetBadRequestResponseBody(res project.BadRequest) GetBadRequestResponseBody {
	body := GetBadRequestResponseBody(res)
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "project" service.
func NewGetForbiddenResponseBody(res project.Forbidden) GetForbiddenResponseBody {
	body := GetForbiddenResponseBody(res)
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "project" service.
func NewGetNotFoundResponseBody(res project.NotFound) GetNotFoundResponseBody {
	body := GetNotFoundResponseBody(res)
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "project" service.
func NewGetUnauthorizedResponseBody(res project.Unauthorized) GetUnauthorizedResponseBody {
	body := GetUnauthorizedResponseBody(res)
	return body
}

// NewListCommunityBadRequestResponseBody builds the HTTP response body from
// the result of the "list community" endpoint of the "project" service.
func NewListCommunityBadRequestResponseBody(res project.BadRequest) ListCommunityBadRequestResponseBody {
	body := ListCommunityBadRequestResponseBody(res)
	return body
}

// NewListCommunityForbiddenResponseBody builds the HTTP response body from the
// result of the "list community" endpoint of the "project" service.
func NewListCommunityForbiddenResponseBody(res project.Forbidden) ListCommunityForbiddenResponseBody {
	body := ListCommunityForbiddenResponseBody(res)
	return body
}

// NewListCommunityNotFoundResponseBody builds the HTTP response body from the
// result of the "list community" endpoint of the "project" service.
func NewListCommunityNotFoundResponseBody(res project.NotFound) ListCommunityNotFoundResponseBody {
	body := ListCommunityNotFoundResponseBody(res)
	return body
}

// NewListCommunityUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list community" endpoint of the "project" service.
func NewListCommunityUnauthorizedResponseBody(res project.Unauthorized) ListCommunityUnauthorizedResponseBody {
	body := ListCommunityUnauthorizedResponseBody(res)
	return body
}

// NewListMineBadRequestResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "project" service.
func NewListMineBadRequestResponseBody(res project.BadRequest) ListMineBadRequestResponseBody {
	body := ListMineBadRequestResponseBody(res)
	return body
}

// NewListMineForbiddenResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "project" service.
func NewListMineForbiddenResponseBody(res project.Forbidden) ListMineForbiddenResponseBody {
	body := ListMineForbiddenResponseBody(res)
	return body
}

// NewListMineNotFoundResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "project" service.
func NewListMineNotFoundResponseBody(res project.NotFound) ListMineNotFoundResponseBody {
	body := ListMineNotFoundResponseBody(res)
	return body
}

// NewListMineUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "project" service.
func NewListMineUnauthorizedResponseBody(res project.Unauthorized) ListMineUnauthorizedResponseBody {
	body := ListMineUnauthorizedResponseBody(res)
	return body
}

// NewInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "invite" endpoint of the "project" service.
func NewInviteBadRequestResponseBody(res project.BadRequest) InviteBadRequestResponseBody {
	body := InviteBadRequestResponseBody(res)
	return body
}

// NewInviteForbiddenResponseBody builds the HTTP response body from the result
// of the "invite" endpoint of the "project" service.
func NewInviteForbiddenResponseBody(res project.Forbidden) InviteForbiddenResponseBody {
	body := InviteForbiddenResponseBody(res)
	return body
}

// NewInviteNotFoundResponseBody builds the HTTP response body from the result
// of the "invite" endpoint of the "project" service.
func NewInviteNotFoundResponseBody(res project.NotFound) InviteNotFoundResponseBody {
	body := InviteNotFoundResponseBody(res)
	return body
}

// NewInviteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "invite" endpoint of the "project" service.
func NewInviteUnauthorizedResponseBody(res project.Unauthorized) InviteUnauthorizedResponseBody {
	body := InviteUnauthorizedResponseBody(res)
	return body
}

// NewRemoveUserBadRequestResponseBody builds the HTTP response body from the
// result of the "remove user" endpoint of the "project" service.
func NewRemoveUserBadRequestResponseBody(res project.BadRequest) RemoveUserBadRequestResponseBody {
	body := RemoveUserBadRequestResponseBody(res)
	return body
}

// NewRemoveUserForbiddenResponseBody builds the HTTP response body from the
// result of the "remove user" endpoint of the "project" service.
func NewRemoveUserForbiddenResponseBody(res project.Forbidden) RemoveUserForbiddenResponseBody {
	body := RemoveUserForbiddenResponseBody(res)
	return body
}

// NewRemoveUserNotFoundResponseBody builds the HTTP response body from the
// result of the "remove user" endpoint of the "project" service.
func NewRemoveUserNotFoundResponseBody(res project.NotFound) RemoveUserNotFoundResponseBody {
	body := RemoveUserNotFoundResponseBody(res)
	return body
}

// NewRemoveUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "remove user" endpoint of the "project" service.
func NewRemoveUserUnauthorizedResponseBody(res project.Unauthorized) RemoveUserUnauthorizedResponseBody {
	body := RemoveUserUnauthorizedResponseBody(res)
	return body
}

// NewAddStationBadRequestResponseBody builds the HTTP response body from the
// result of the "add station" endpoint of the "project" service.
func NewAddStationBadRequestResponseBody(res project.BadRequest) AddStationBadRequestResponseBody {
	body := AddStationBadRequestResponseBody(res)
	return body
}

// NewAddStationForbiddenResponseBody builds the HTTP response body from the
// result of the "add station" endpoint of the "project" service.
func NewAddStationForbiddenResponseBody(res project.Forbidden) AddStationForbiddenResponseBody {
	body := AddStationForbiddenResponseBody(res)
	return body
}

// NewAddStationNotFoundResponseBody builds the HTTP response body from the
// result of the "add station" endpoint of the "project" service.
func NewAddStationNotFoundResponseBody(res project.NotFound) AddStationNotFoundResponseBody {
	body := AddStationNotFoundResponseBody(res)
	return body
}

// NewAddStationUnauthorizedResponseBody builds the HTTP response body from the
// result of the "add station" endpoint of the "project" service.
func NewAddStationUnauthorizedResponseBody(res project.Unauthorized) AddStationUnauthorizedResponseBody {
	body := AddStationUnauthorizedResponseBody(res)
	return body
}

// NewRemoveStationBadRequestResponseBody builds the HTTP response body from
// the result of the "remove station" endpoint of the "project" service.
func NewRemoveStationBadRequestResponseBody(res project.BadRequest) RemoveStationBadRequestResponseBody {
	body := RemoveStationBadRequestResponseBody(res)
	return body
}

// NewRemoveStationForbiddenResponseBody builds the HTTP response body from the
// result of the "remove station" endpoint of the "project" service.
func NewRemoveStationForbiddenResponseBody(res project.Forbidden) RemoveStationForbiddenResponseBody {
	body := RemoveStationForbiddenResponseBody(res)
	return body
}

// NewRemoveStationNotFoundResponseBody builds the HTTP response body from the
// result of the "remove station" endpoint of the "project" service.
func NewRemoveStationNotFoundResponseBody(res project.NotFound) RemoveStationNotFoundResponseBody {
	body := RemoveStationNotFoundResponseBody(res)
	return body
}

// NewRemoveStationUnauthorizedResponseBody builds the HTTP response body from
// the result of the "remove station" endpoint of the "project" service.
func NewRemoveStationUnauthorizedResponseBody(res project.Unauthorized) RemoveStationUnauthorizedResponseBody {
	body := RemoveStationUnauthorizedResponseBody(res)
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "project" service.
func NewDeleteBadRequestResponseBody(res project.BadRequest) DeleteBadRequestResponseBody {
	body := DeleteBadRequestResponseBody(res)
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "project" service.
func NewDeleteForbiddenResponseBody(res project.Forbidden) DeleteForbiddenResponseBody {
	body := DeleteForbiddenResponseBody(res)
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "project" service.
func NewDeleteNotFoundResponseBody(res project.NotFound) DeleteNotFoundResponseBody {
	body := DeleteNotFoundResponseBody(res)
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "project" service.
func NewDeleteUnauthorizedResponseBody(res project.Unauthorized) DeleteUnauthorizedResponseBody {
	body := DeleteUnauthorizedResponseBody(res)
	return body
}

// NewUploadMediaBadRequestResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaBadRequestResponseBody(res project.BadRequest) UploadMediaBadRequestResponseBody {
	body := UploadMediaBadRequestResponseBody(res)
	return body
}

// NewUploadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaForbiddenResponseBody(res project.Forbidden) UploadMediaForbiddenResponseBody {
	body := UploadMediaForbiddenResponseBody(res)
	return body
}

// NewUploadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaNotFoundResponseBody(res project.NotFound) UploadMediaNotFoundResponseBody {
	body := UploadMediaNotFoundResponseBody(res)
	return body
}

// NewUploadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "upload media" endpoint of the "project" service.
func NewUploadMediaUnauthorizedResponseBody(res project.Unauthorized) UploadMediaUnauthorizedResponseBody {
	body := UploadMediaUnauthorizedResponseBody(res)
	return body
}

// NewDownloadMediaBadRequestResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "project" service.
func NewDownloadMediaBadRequestResponseBody(res project.BadRequest) DownloadMediaBadRequestResponseBody {
	body := DownloadMediaBadRequestResponseBody(res)
	return body
}

// NewDownloadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "project" service.
func NewDownloadMediaForbiddenResponseBody(res project.Forbidden) DownloadMediaForbiddenResponseBody {
	body := DownloadMediaForbiddenResponseBody(res)
	return body
}

// NewDownloadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "project" service.
func NewDownloadMediaNotFoundResponseBody(res project.NotFound) DownloadMediaNotFoundResponseBody {
	body := DownloadMediaNotFoundResponseBody(res)
	return body
}

// NewDownloadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "project" service.
func NewDownloadMediaUnauthorizedResponseBody(res project.Unauthorized) DownloadMediaUnauthorizedResponseBody {
	body := DownloadMediaUnauthorizedResponseBody(res)
	return body
}

// NewAddUpdatePayload builds a project service add update endpoint payload.
func NewAddUpdatePayload(body *AddUpdateRequestBody, projectID int32, auth string) *project.AddUpdatePayload {
	v := &project.AddUpdatePayload{
		Body: *body.Body,
	}
	v.ProjectID = projectID
	v.Auth = auth

	return v
}

// NewDeleteUpdatePayload builds a project service delete update endpoint
// payload.
func NewDeleteUpdatePayload(projectID int32, updateID int64, auth string) *project.DeleteUpdatePayload {
	v := &project.DeleteUpdatePayload{}
	v.ProjectID = projectID
	v.UpdateID = updateID
	v.Auth = auth

	return v
}

// NewModifyUpdatePayload builds a project service modify update endpoint
// payload.
func NewModifyUpdatePayload(body *ModifyUpdateRequestBody, projectID int32, updateID int64, auth string) *project.ModifyUpdatePayload {
	v := &project.ModifyUpdatePayload{
		Body: *body.Body,
	}
	v.ProjectID = projectID
	v.UpdateID = updateID
	v.Auth = auth

	return v
}

// NewInvitesPayload builds a project service invites endpoint payload.
func NewInvitesPayload(auth string) *project.InvitesPayload {
	v := &project.InvitesPayload{}
	v.Auth = auth

	return v
}

// NewLookupInvitePayload builds a project service lookup invite endpoint
// payload.
func NewLookupInvitePayload(token string, auth string) *project.LookupInvitePayload {
	v := &project.LookupInvitePayload{}
	v.Token = token
	v.Auth = auth

	return v
}

// NewAcceptInvitePayload builds a project service accept invite endpoint
// payload.
func NewAcceptInvitePayload(id int64, token *string, auth string) *project.AcceptInvitePayload {
	v := &project.AcceptInvitePayload{}
	v.ID = id
	v.Token = token
	v.Auth = auth

	return v
}

// NewRejectInvitePayload builds a project service reject invite endpoint
// payload.
func NewRejectInvitePayload(id int64, token *string, auth string) *project.RejectInvitePayload {
	v := &project.RejectInvitePayload{}
	v.ID = id
	v.Token = token
	v.Auth = auth

	return v
}

// NewAddPayload builds a project service add endpoint payload.
func NewAddPayload(body *AddRequestBody, auth string) *project.AddPayload {
	v := &project.AddProjectFields{
		Name:        *body.Name,
		Slug:        *body.Slug,
		Description: *body.Description,
		Goal:        body.Goal,
		Location:    body.Location,
		Tags:        body.Tags,
		Private:     body.Private,
		StartTime:   body.StartTime,
		EndTime:     body.EndTime,
	}
	res := &project.AddPayload{
		Project: v,
	}
	res.Auth = auth

	return res
}

// NewUpdatePayload builds a project service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, projectID int32, auth string) *project.UpdatePayload {
	v := &project.AddProjectFields{
		Name:        *body.Name,
		Slug:        *body.Slug,
		Description: *body.Description,
		Goal:        body.Goal,
		Location:    body.Location,
		Tags:        body.Tags,
		Private:     body.Private,
		StartTime:   body.StartTime,
		EndTime:     body.EndTime,
	}
	res := &project.UpdatePayload{
		Project: v,
	}
	res.ProjectID = projectID
	res.Auth = auth

	return res
}

// NewGetPayload builds a project service get endpoint payload.
func NewGetPayload(projectID int32, auth *string) *project.GetPayload {
	v := &project.GetPayload{}
	v.ProjectID = projectID
	v.Auth = auth

	return v
}

// NewListCommunityPayload builds a project service list community endpoint
// payload.
func NewListCommunityPayload(auth *string) *project.ListCommunityPayload {
	v := &project.ListCommunityPayload{}
	v.Auth = auth

	return v
}

// NewListMinePayload builds a project service list mine endpoint payload.
func NewListMinePayload(auth string) *project.ListMinePayload {
	v := &project.ListMinePayload{}
	v.Auth = auth

	return v
}

// NewInvitePayload builds a project service invite endpoint payload.
func NewInvitePayload(body *InviteRequestBody, projectID int32, auth string) *project.InvitePayload {
	v := &project.InviteUserFields{
		Email: *body.Email,
		Role:  *body.Role,
	}
	res := &project.InvitePayload{
		Invite: v,
	}
	res.ProjectID = projectID
	res.Auth = auth

	return res
}

// NewRemoveUserPayload builds a project service remove user endpoint payload.
func NewRemoveUserPayload(body *RemoveUserRequestBody, projectID int32, auth string) *project.RemoveUserPayload {
	v := &project.RemoveUserFields{
		Email: *body.Email,
	}
	res := &project.RemoveUserPayload{
		Remove: v,
	}
	res.ProjectID = projectID
	res.Auth = auth

	return res
}

// NewAddStationPayload builds a project service add station endpoint payload.
func NewAddStationPayload(projectID int32, stationID int32, auth string) *project.AddStationPayload {
	v := &project.AddStationPayload{}
	v.ProjectID = projectID
	v.StationID = stationID
	v.Auth = auth

	return v
}

// NewRemoveStationPayload builds a project service remove station endpoint
// payload.
func NewRemoveStationPayload(projectID int32, stationID int32, auth string) *project.RemoveStationPayload {
	v := &project.RemoveStationPayload{}
	v.ProjectID = projectID
	v.StationID = stationID
	v.Auth = auth

	return v
}

// NewDeletePayload builds a project service delete endpoint payload.
func NewDeletePayload(projectID int32, auth string) *project.DeletePayload {
	v := &project.DeletePayload{}
	v.ProjectID = projectID
	v.Auth = auth

	return v
}

// NewUploadMediaPayload builds a project service upload media endpoint payload.
func NewUploadMediaPayload(projectID int32, contentType string, contentLength int64, auth string) *project.UploadMediaPayload {
	v := &project.UploadMediaPayload{}
	v.ProjectID = projectID
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.Auth = auth

	return v
}

// NewDownloadMediaPayload builds a project service download media endpoint
// payload.
func NewDownloadMediaPayload(projectID int32) *project.DownloadMediaPayload {
	v := &project.DownloadMediaPayload{}
	v.ProjectID = projectID

	return v
}

// ValidateAddUpdateRequestBody runs the validations defined on Add
// UpdateRequestBody
func ValidateAddUpdateRequestBody(body *AddUpdateRequestBody) (err error) {
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}

// ValidateModifyUpdateRequestBody runs the validations defined on Modify
// UpdateRequestBody
func ValidateModifyUpdateRequestBody(body *ModifyUpdateRequestBody) (err error) {
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[[:alnum:]]+(-[[:alnum:]]+)*$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[[:alnum:]]+(-[[:alnum:]]+)*$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}

// ValidateInviteRequestBody runs the validations defined on InviteRequestBody
func ValidateInviteRequestBody(body *InviteRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateRemoveUserRequestBody runs the validations defined on Remove
// UserRequestBody
func ValidateRemoveUserRequestBody(body *RemoveUserRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}
