// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	project "github.com/fieldkit/cloud/server/api/gen/project"
	projectviews "github.com/fieldkit/cloud/server/api/gen/project/views"
	goa "goa.design/goa/v3/pkg"
)

// AddUpdateRequestBody is the type of the "project" service "add update"
// endpoint HTTP request body.
type AddUpdateRequestBody struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// ModifyUpdateRequestBody is the type of the "project" service "modify update"
// endpoint HTTP request body.
type ModifyUpdateRequestBody struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// AddUpdateResponseBody is the type of the "project" service "add update"
// endpoint HTTP response body.
type AddUpdateResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Body string `form:"body" json:"body" xml:"body"`
}

// ModifyUpdateResponseBody is the type of the "project" service "modify
// update" endpoint HTTP response body.
type ModifyUpdateResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Body string `form:"body" json:"body" xml:"body"`
}

// InvitesResponseBody is the type of the "project" service "invites" endpoint
// HTTP response body.
type InvitesResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending" json:"pending" xml:"pending"`
}

// LookupInviteResponseBody is the type of the "project" service "lookup
// invite" endpoint HTTP response body.
type LookupInviteResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending" json:"pending" xml:"pending"`
}

// AddUpdateBadRequestResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "bad-request" error.
type AddUpdateBadRequestResponseBody string

// AddUpdateForbiddenResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "forbidden" error.
type AddUpdateForbiddenResponseBody string

// AddUpdateNotFoundResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "not-found" error.
type AddUpdateNotFoundResponseBody string

// AddUpdateUnauthorizedResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "unauthorized" error.
type AddUpdateUnauthorizedResponseBody string

// DeleteUpdateBadRequestResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "bad-request" error.
type DeleteUpdateBadRequestResponseBody string

// DeleteUpdateForbiddenResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "forbidden" error.
type DeleteUpdateForbiddenResponseBody string

// DeleteUpdateNotFoundResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "not-found" error.
type DeleteUpdateNotFoundResponseBody string

// DeleteUpdateUnauthorizedResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "unauthorized" error.
type DeleteUpdateUnauthorizedResponseBody string

// ModifyUpdateBadRequestResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "bad-request" error.
type ModifyUpdateBadRequestResponseBody string

// ModifyUpdateForbiddenResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "forbidden" error.
type ModifyUpdateForbiddenResponseBody string

// ModifyUpdateNotFoundResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "not-found" error.
type ModifyUpdateNotFoundResponseBody string

// ModifyUpdateUnauthorizedResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "unauthorized" error.
type ModifyUpdateUnauthorizedResponseBody string

// InvitesBadRequestResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "bad-request" error.
type InvitesBadRequestResponseBody string

// InvitesForbiddenResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "forbidden" error.
type InvitesForbiddenResponseBody string

// InvitesNotFoundResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "not-found" error.
type InvitesNotFoundResponseBody string

// InvitesUnauthorizedResponseBody is the type of the "project" service
// "invites" endpoint HTTP response body for the "unauthorized" error.
type InvitesUnauthorizedResponseBody string

// LookupInviteBadRequestResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "bad-request" error.
type LookupInviteBadRequestResponseBody string

// LookupInviteForbiddenResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "forbidden" error.
type LookupInviteForbiddenResponseBody string

// LookupInviteNotFoundResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "not-found" error.
type LookupInviteNotFoundResponseBody string

// LookupInviteUnauthorizedResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "unauthorized" error.
type LookupInviteUnauthorizedResponseBody string

// AcceptInviteBadRequestResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "bad-request" error.
type AcceptInviteBadRequestResponseBody string

// AcceptInviteForbiddenResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "forbidden" error.
type AcceptInviteForbiddenResponseBody string

// AcceptInviteNotFoundResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "not-found" error.
type AcceptInviteNotFoundResponseBody string

// AcceptInviteUnauthorizedResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "unauthorized" error.
type AcceptInviteUnauthorizedResponseBody string

// RejectInviteBadRequestResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "bad-request" error.
type RejectInviteBadRequestResponseBody string

// RejectInviteForbiddenResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "forbidden" error.
type RejectInviteForbiddenResponseBody string

// RejectInviteNotFoundResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "not-found" error.
type RejectInviteNotFoundResponseBody string

// RejectInviteUnauthorizedResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "unauthorized" error.
type RejectInviteUnauthorizedResponseBody string

// UploadMediaBadRequestResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "bad-request" error.
type UploadMediaBadRequestResponseBody string

// UploadMediaForbiddenResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "forbidden" error.
type UploadMediaForbiddenResponseBody string

// UploadMediaNotFoundResponseBody is the type of the "project" service "upload
// media" endpoint HTTP response body for the "not-found" error.
type UploadMediaNotFoundResponseBody string

// UploadMediaUnauthorizedResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "unauthorized" error.
type UploadMediaUnauthorizedResponseBody string

// DownloadMediaBadRequestResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "bad-request" error.
type DownloadMediaBadRequestResponseBody string

// DownloadMediaForbiddenResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "forbidden" error.
type DownloadMediaForbiddenResponseBody string

// DownloadMediaNotFoundResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "not-found" error.
type DownloadMediaNotFoundResponseBody string

// DownloadMediaUnauthorizedResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "unauthorized" error.
type DownloadMediaUnauthorizedResponseBody string

// PendingInviteResponseBody is used to define fields on response body types.
type PendingInviteResponseBody struct {
	ID      int64                       `form:"id" json:"id" xml:"id"`
	Project *ProjectSummaryResponseBody `form:"project" json:"project" xml:"project"`
	Time    int64                       `form:"time" json:"time" xml:"time"`
	Role    int32                       `form:"role" json:"role" xml:"role"`
}

// ProjectSummaryResponseBody is used to define fields on response body types.
type ProjectSummaryResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// NewAddUpdateResponseBody builds the HTTP response body from the result of
// the "add update" endpoint of the "project" service.
func NewAddUpdateResponseBody(res *projectviews.ProjectUpdateView) *AddUpdateResponseBody {
	body := &AddUpdateResponseBody{
		ID:   *res.ID,
		Body: *res.Body,
	}
	return body
}

// NewModifyUpdateResponseBody builds the HTTP response body from the result of
// the "modify update" endpoint of the "project" service.
func NewModifyUpdateResponseBody(res *projectviews.ProjectUpdateView) *ModifyUpdateResponseBody {
	body := &ModifyUpdateResponseBody{
		ID:   *res.ID,
		Body: *res.Body,
	}
	return body
}

// NewInvitesResponseBody builds the HTTP response body from the result of the
// "invites" endpoint of the "project" service.
func NewInvitesResponseBody(res *projectviews.PendingInvitesView) *InvitesResponseBody {
	body := &InvitesResponseBody{}
	if res.Pending != nil {
		body.Pending = make([]*PendingInviteResponseBody, len(res.Pending))
		for i, val := range res.Pending {
			body.Pending[i] = marshalProjectviewsPendingInviteViewToPendingInviteResponseBody(val)
		}
	}
	return body
}

// NewLookupInviteResponseBody builds the HTTP response body from the result of
// the "lookup invite" endpoint of the "project" service.
func NewLookupInviteResponseBody(res *projectviews.PendingInvitesView) *LookupInviteResponseBody {
	body := &LookupInviteResponseBody{}
	if res.Pending != nil {
		body.Pending = make([]*PendingInviteResponseBody, len(res.Pending))
		for i, val := range res.Pending {
			body.Pending[i] = marshalProjectviewsPendingInviteViewToPendingInviteResponseBody(val)
		}
	}
	return body
}

// NewAddUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateBadRequestResponseBody(res project.BadRequest) AddUpdateBadRequestResponseBody {
	body := AddUpdateBadRequestResponseBody(res)
	return body
}

// NewAddUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateForbiddenResponseBody(res project.Forbidden) AddUpdateForbiddenResponseBody {
	body := AddUpdateForbiddenResponseBody(res)
	return body
}

// NewAddUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateNotFoundResponseBody(res project.NotFound) AddUpdateNotFoundResponseBody {
	body := AddUpdateNotFoundResponseBody(res)
	return body
}

// NewAddUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "add update" endpoint of the "project" service.
func NewAddUpdateUnauthorizedResponseBody(res project.Unauthorized) AddUpdateUnauthorizedResponseBody {
	body := AddUpdateUnauthorizedResponseBody(res)
	return body
}

// NewDeleteUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateBadRequestResponseBody(res project.BadRequest) DeleteUpdateBadRequestResponseBody {
	body := DeleteUpdateBadRequestResponseBody(res)
	return body
}

// NewDeleteUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateForbiddenResponseBody(res project.Forbidden) DeleteUpdateForbiddenResponseBody {
	body := DeleteUpdateForbiddenResponseBody(res)
	return body
}

// NewDeleteUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateNotFoundResponseBody(res project.NotFound) DeleteUpdateNotFoundResponseBody {
	body := DeleteUpdateNotFoundResponseBody(res)
	return body
}

// NewDeleteUpdateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete update" endpoint of the "project" service.
func NewDeleteUpdateUnauthorizedResponseBody(res project.Unauthorized) DeleteUpdateUnauthorizedResponseBody {
	body := DeleteUpdateUnauthorizedResponseBody(res)
	return body
}

// NewModifyUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateBadRequestResponseBody(res project.BadRequest) ModifyUpdateBadRequestResponseBody {
	body := ModifyUpdateBadRequestResponseBody(res)
	return body
}

// NewModifyUpdateForbiddenResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateForbiddenResponseBody(res project.Forbidden) ModifyUpdateForbiddenResponseBody {
	body := ModifyUpdateForbiddenResponseBody(res)
	return body
}

// NewModifyUpdateNotFoundResponseBody builds the HTTP response body from the
// result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateNotFoundResponseBody(res project.NotFound) ModifyUpdateNotFoundResponseBody {
	body := ModifyUpdateNotFoundResponseBody(res)
	return body
}

// NewModifyUpdateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "modify update" endpoint of the "project" service.
func NewModifyUpdateUnauthorizedResponseBody(res project.Unauthorized) ModifyUpdateUnauthorizedResponseBody {
	body := ModifyUpdateUnauthorizedResponseBody(res)
	return body
}

// NewInvitesBadRequestResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesBadRequestResponseBody(res project.BadRequest) InvitesBadRequestResponseBody {
	body := InvitesBadRequestResponseBody(res)
	return body
}

// NewInvitesForbiddenResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesForbiddenResponseBody(res project.Forbidden) InvitesForbiddenResponseBody {
	body := InvitesForbiddenResponseBody(res)
	return body
}

// NewInvitesNotFoundResponseBody builds the HTTP response body from the result
// of the "invites" endpoint of the "project" service.
func NewInvitesNotFoundResponseBody(res project.NotFound) InvitesNotFoundResponseBody {
	body := InvitesNotFoundResponseBody(res)
	return body
}

// NewInvitesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "invites" endpoint of the "project" service.
func NewInvitesUnauthorizedResponseBody(res project.Unauthorized) InvitesUnauthorizedResponseBody {
	body := InvitesUnauthorizedResponseBody(res)
	return body
}

// NewLookupInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteBadRequestResponseBody(res project.BadRequest) LookupInviteBadRequestResponseBody {
	body := LookupInviteBadRequestResponseBody(res)
	return body
}

// NewLookupInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteForbiddenResponseBody(res project.Forbidden) LookupInviteForbiddenResponseBody {
	body := LookupInviteForbiddenResponseBody(res)
	return body
}

// NewLookupInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteNotFoundResponseBody(res project.NotFound) LookupInviteNotFoundResponseBody {
	body := LookupInviteNotFoundResponseBody(res)
	return body
}

// NewLookupInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "lookup invite" endpoint of the "project" service.
func NewLookupInviteUnauthorizedResponseBody(res project.Unauthorized) LookupInviteUnauthorizedResponseBody {
	body := LookupInviteUnauthorizedResponseBody(res)
	return body
}

// NewAcceptInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteBadRequestResponseBody(res project.BadRequest) AcceptInviteBadRequestResponseBody {
	body := AcceptInviteBadRequestResponseBody(res)
	return body
}

// NewAcceptInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteForbiddenResponseBody(res project.Forbidden) AcceptInviteForbiddenResponseBody {
	body := AcceptInviteForbiddenResponseBody(res)
	return body
}

// NewAcceptInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteNotFoundResponseBody(res project.NotFound) AcceptInviteNotFoundResponseBody {
	body := AcceptInviteNotFoundResponseBody(res)
	return body
}

// NewAcceptInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "accept invite" endpoint of the "project" service.
func NewAcceptInviteUnauthorizedResponseBody(res project.Unauthorized) AcceptInviteUnauthorizedResponseBody {
	body := AcceptInviteUnauthorizedResponseBody(res)
	return body
}

// NewRejectInviteBadRequestResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteBadRequestResponseBody(res project.BadRequest) RejectInviteBadRequestResponseBody {
	body := RejectInviteBadRequestResponseBody(res)
	return body
}

// NewRejectInviteForbiddenResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteForbiddenResponseBody(res project.Forbidden) RejectInviteForbiddenResponseBody {
	body := RejectInviteForbiddenResponseBody(res)
	return body
}

// NewRejectInviteNotFoundResponseBody builds the HTTP response body from the
// result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteNotFoundResponseBody(res project.NotFound) RejectInviteNotFoundResponseBody {
	body := RejectInviteNotFoundResponseBody(res)
	return body
}

// NewRejectInviteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "reject invite" endpoint of the "project" service.
func NewRejectInviteUnauthorizedResponseBody(res project.Unauthorized) RejectInviteUnauthorizedResponseBody {
	body := RejectInviteUnauthorizedResponseBody(res)
	return body
}

// NewUploadMediaBadRequestResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaBadRequestResponseBody(res project.BadRequest) UploadMediaBadRequestResponseBody {
	body := UploadMediaBadRequestResponseBody(res)
	return body
}

// NewUploadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaForbiddenResponseBody(res project.Forbidden) UploadMediaForbiddenResponseBody {
	body := UploadMediaForbiddenResponseBody(res)
	return body
}

// NewUploadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "project" service.
func NewUploadMediaNotFoundResponseBody(res project.NotFound) UploadMediaNotFoundResponseBody {
	body := UploadMediaNotFoundResponseBody(res)
	return body
}

// NewUploadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "upload media" endpoint of the "project" service.
func NewUploadMediaUnauthorizedResponseBody(res project.Unauthorized) UploadMediaUnauthorizedResponseBody {
	body := UploadMediaUnauthorizedResponseBody(res)
	return body
}

// NewDownloadMediaBadRequestResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "project" service.
func NewDownloadMediaBadRequestResponseBody(res project.BadRequest) DownloadMediaBadRequestResponseBody {
	body := DownloadMediaBadRequestResponseBody(res)
	return body
}

// NewDownloadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "project" service.
func NewDownloadMediaForbiddenResponseBody(res project.Forbidden) DownloadMediaForbiddenResponseBody {
	body := DownloadMediaForbiddenResponseBody(res)
	return body
}

// NewDownloadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "project" service.
func NewDownloadMediaNotFoundResponseBody(res project.NotFound) DownloadMediaNotFoundResponseBody {
	body := DownloadMediaNotFoundResponseBody(res)
	return body
}

// NewDownloadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "project" service.
func NewDownloadMediaUnauthorizedResponseBody(res project.Unauthorized) DownloadMediaUnauthorizedResponseBody {
	body := DownloadMediaUnauthorizedResponseBody(res)
	return body
}

// NewAddUpdatePayload builds a project service add update endpoint payload.
func NewAddUpdatePayload(body *AddUpdateRequestBody, projectID int32, auth string) *project.AddUpdatePayload {
	v := &project.AddUpdatePayload{
		Body: *body.Body,
	}
	v.ProjectID = projectID
	v.Auth = auth

	return v
}

// NewDeleteUpdatePayload builds a project service delete update endpoint
// payload.
func NewDeleteUpdatePayload(projectID int32, updateID int64, auth string) *project.DeleteUpdatePayload {
	v := &project.DeleteUpdatePayload{}
	v.ProjectID = projectID
	v.UpdateID = updateID
	v.Auth = auth

	return v
}

// NewModifyUpdatePayload builds a project service modify update endpoint
// payload.
func NewModifyUpdatePayload(body *ModifyUpdateRequestBody, projectID int32, updateID int64, auth string) *project.ModifyUpdatePayload {
	v := &project.ModifyUpdatePayload{
		Body: *body.Body,
	}
	v.ProjectID = projectID
	v.UpdateID = updateID
	v.Auth = auth

	return v
}

// NewInvitesPayload builds a project service invites endpoint payload.
func NewInvitesPayload(auth string) *project.InvitesPayload {
	v := &project.InvitesPayload{}
	v.Auth = auth

	return v
}

// NewLookupInvitePayload builds a project service lookup invite endpoint
// payload.
func NewLookupInvitePayload(token string, auth string) *project.LookupInvitePayload {
	v := &project.LookupInvitePayload{}
	v.Token = token
	v.Auth = auth

	return v
}

// NewAcceptInvitePayload builds a project service accept invite endpoint
// payload.
func NewAcceptInvitePayload(id int64, token *string, auth string) *project.AcceptInvitePayload {
	v := &project.AcceptInvitePayload{}
	v.ID = id
	v.Token = token
	v.Auth = auth

	return v
}

// NewRejectInvitePayload builds a project service reject invite endpoint
// payload.
func NewRejectInvitePayload(id int64, token *string, auth string) *project.RejectInvitePayload {
	v := &project.RejectInvitePayload{}
	v.ID = id
	v.Token = token
	v.Auth = auth

	return v
}

// NewUploadMediaPayload builds a project service upload media endpoint payload.
func NewUploadMediaPayload(projectID int32, contentType string, contentLength int64, auth string) *project.UploadMediaPayload {
	v := &project.UploadMediaPayload{}
	v.ProjectID = projectID
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.Auth = auth

	return v
}

// NewDownloadMediaPayload builds a project service download media endpoint
// payload.
func NewDownloadMediaPayload(projectID int32) *project.DownloadMediaPayload {
	v := &project.DownloadMediaPayload{}
	v.ProjectID = projectID

	return v
}

// ValidateAddUpdateRequestBody runs the validations defined on Add
// UpdateRequestBody
func ValidateAddUpdateRequestBody(body *AddUpdateRequestBody) (err error) {
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}

// ValidateModifyUpdateRequestBody runs the validations defined on Modify
// UpdateRequestBody
func ValidateModifyUpdateRequestBody(body *ModifyUpdateRequestBody) (err error) {
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}
