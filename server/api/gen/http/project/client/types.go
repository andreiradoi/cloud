// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	project "github.com/fieldkit/cloud/server/api/gen/project"
	projectviews "github.com/fieldkit/cloud/server/api/gen/project/views"
	goa "goa.design/goa/v3/pkg"
)

// AddUpdateRequestBody is the type of the "project" service "add update"
// endpoint HTTP request body.
type AddUpdateRequestBody struct {
	Body string `form:"body" json:"body" xml:"body"`
}

// ModifyUpdateRequestBody is the type of the "project" service "modify update"
// endpoint HTTP request body.
type ModifyUpdateRequestBody struct {
	Body string `form:"body" json:"body" xml:"body"`
}

// AddUpdateResponseBody is the type of the "project" service "add update"
// endpoint HTTP response body.
type AddUpdateResponseBody struct {
	ID        *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Body      *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	CreatedAt *int64  `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// ModifyUpdateResponseBody is the type of the "project" service "modify
// update" endpoint HTTP response body.
type ModifyUpdateResponseBody struct {
	ID        *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Body      *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	CreatedAt *int64  `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// InvitesResponseBody is the type of the "project" service "invites" endpoint
// HTTP response body.
type InvitesResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending,omitempty" json:"pending,omitempty" xml:"pending,omitempty"`
}

// LookupInviteResponseBody is the type of the "project" service "lookup
// invite" endpoint HTTP response body.
type LookupInviteResponseBody struct {
	Pending []*PendingInviteResponseBody `form:"pending,omitempty" json:"pending,omitempty" xml:"pending,omitempty"`
}

// AddUpdateBadRequestResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "bad-request" error.
type AddUpdateBadRequestResponseBody string

// AddUpdateForbiddenResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "forbidden" error.
type AddUpdateForbiddenResponseBody string

// AddUpdateNotFoundResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "not-found" error.
type AddUpdateNotFoundResponseBody string

// AddUpdateUnauthorizedResponseBody is the type of the "project" service "add
// update" endpoint HTTP response body for the "unauthorized" error.
type AddUpdateUnauthorizedResponseBody string

// DeleteUpdateBadRequestResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "bad-request" error.
type DeleteUpdateBadRequestResponseBody string

// DeleteUpdateForbiddenResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "forbidden" error.
type DeleteUpdateForbiddenResponseBody string

// DeleteUpdateNotFoundResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "not-found" error.
type DeleteUpdateNotFoundResponseBody string

// DeleteUpdateUnauthorizedResponseBody is the type of the "project" service
// "delete update" endpoint HTTP response body for the "unauthorized" error.
type DeleteUpdateUnauthorizedResponseBody string

// ModifyUpdateBadRequestResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "bad-request" error.
type ModifyUpdateBadRequestResponseBody string

// ModifyUpdateForbiddenResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "forbidden" error.
type ModifyUpdateForbiddenResponseBody string

// ModifyUpdateNotFoundResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "not-found" error.
type ModifyUpdateNotFoundResponseBody string

// ModifyUpdateUnauthorizedResponseBody is the type of the "project" service
// "modify update" endpoint HTTP response body for the "unauthorized" error.
type ModifyUpdateUnauthorizedResponseBody string

// InvitesBadRequestResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "bad-request" error.
type InvitesBadRequestResponseBody string

// InvitesForbiddenResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "forbidden" error.
type InvitesForbiddenResponseBody string

// InvitesNotFoundResponseBody is the type of the "project" service "invites"
// endpoint HTTP response body for the "not-found" error.
type InvitesNotFoundResponseBody string

// InvitesUnauthorizedResponseBody is the type of the "project" service
// "invites" endpoint HTTP response body for the "unauthorized" error.
type InvitesUnauthorizedResponseBody string

// LookupInviteBadRequestResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "bad-request" error.
type LookupInviteBadRequestResponseBody string

// LookupInviteForbiddenResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "forbidden" error.
type LookupInviteForbiddenResponseBody string

// LookupInviteNotFoundResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "not-found" error.
type LookupInviteNotFoundResponseBody string

// LookupInviteUnauthorizedResponseBody is the type of the "project" service
// "lookup invite" endpoint HTTP response body for the "unauthorized" error.
type LookupInviteUnauthorizedResponseBody string

// AcceptInviteBadRequestResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "bad-request" error.
type AcceptInviteBadRequestResponseBody string

// AcceptInviteForbiddenResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "forbidden" error.
type AcceptInviteForbiddenResponseBody string

// AcceptInviteNotFoundResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "not-found" error.
type AcceptInviteNotFoundResponseBody string

// AcceptInviteUnauthorizedResponseBody is the type of the "project" service
// "accept invite" endpoint HTTP response body for the "unauthorized" error.
type AcceptInviteUnauthorizedResponseBody string

// RejectInviteBadRequestResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "bad-request" error.
type RejectInviteBadRequestResponseBody string

// RejectInviteForbiddenResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "forbidden" error.
type RejectInviteForbiddenResponseBody string

// RejectInviteNotFoundResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "not-found" error.
type RejectInviteNotFoundResponseBody string

// RejectInviteUnauthorizedResponseBody is the type of the "project" service
// "reject invite" endpoint HTTP response body for the "unauthorized" error.
type RejectInviteUnauthorizedResponseBody string

// UploadMediaBadRequestResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "bad-request" error.
type UploadMediaBadRequestResponseBody string

// UploadMediaForbiddenResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "forbidden" error.
type UploadMediaForbiddenResponseBody string

// UploadMediaNotFoundResponseBody is the type of the "project" service "upload
// media" endpoint HTTP response body for the "not-found" error.
type UploadMediaNotFoundResponseBody string

// UploadMediaUnauthorizedResponseBody is the type of the "project" service
// "upload media" endpoint HTTP response body for the "unauthorized" error.
type UploadMediaUnauthorizedResponseBody string

// DownloadMediaBadRequestResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "bad-request" error.
type DownloadMediaBadRequestResponseBody string

// DownloadMediaForbiddenResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "forbidden" error.
type DownloadMediaForbiddenResponseBody string

// DownloadMediaNotFoundResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "not-found" error.
type DownloadMediaNotFoundResponseBody string

// DownloadMediaUnauthorizedResponseBody is the type of the "project" service
// "download media" endpoint HTTP response body for the "unauthorized" error.
type DownloadMediaUnauthorizedResponseBody string

// PendingInviteResponseBody is used to define fields on response body types.
type PendingInviteResponseBody struct {
	ID      *int64                      `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Project *ProjectSummaryResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	Time    *int64                      `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	Role    *int32                      `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// ProjectSummaryResponseBody is used to define fields on response body types.
type ProjectSummaryResponseBody struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewAddUpdateRequestBody builds the HTTP request body from the payload of the
// "add update" endpoint of the "project" service.
func NewAddUpdateRequestBody(p *project.AddUpdatePayload) *AddUpdateRequestBody {
	body := &AddUpdateRequestBody{
		Body: p.Body,
	}
	return body
}

// NewModifyUpdateRequestBody builds the HTTP request body from the payload of
// the "modify update" endpoint of the "project" service.
func NewModifyUpdateRequestBody(p *project.ModifyUpdatePayload) *ModifyUpdateRequestBody {
	body := &ModifyUpdateRequestBody{
		Body: p.Body,
	}
	return body
}

// NewAddUpdateProjectUpdateOK builds a "project" service "add update" endpoint
// result from a HTTP "OK" response.
func NewAddUpdateProjectUpdateOK(body *AddUpdateResponseBody) *projectviews.ProjectUpdateView {
	v := &projectviews.ProjectUpdateView{
		ID:        body.ID,
		Body:      body.Body,
		CreatedAt: body.CreatedAt,
	}

	return v
}

// NewAddUpdateBadRequest builds a project service add update endpoint
// bad-request error.
func NewAddUpdateBadRequest(body AddUpdateBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewAddUpdateForbidden builds a project service add update endpoint forbidden
// error.
func NewAddUpdateForbidden(body AddUpdateForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewAddUpdateNotFound builds a project service add update endpoint not-found
// error.
func NewAddUpdateNotFound(body AddUpdateNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewAddUpdateUnauthorized builds a project service add update endpoint
// unauthorized error.
func NewAddUpdateUnauthorized(body AddUpdateUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewDeleteUpdateBadRequest builds a project service delete update endpoint
// bad-request error.
func NewDeleteUpdateBadRequest(body DeleteUpdateBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewDeleteUpdateForbidden builds a project service delete update endpoint
// forbidden error.
func NewDeleteUpdateForbidden(body DeleteUpdateForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewDeleteUpdateNotFound builds a project service delete update endpoint
// not-found error.
func NewDeleteUpdateNotFound(body DeleteUpdateNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewDeleteUpdateUnauthorized builds a project service delete update endpoint
// unauthorized error.
func NewDeleteUpdateUnauthorized(body DeleteUpdateUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewModifyUpdateProjectUpdateOK builds a "project" service "modify update"
// endpoint result from a HTTP "OK" response.
func NewModifyUpdateProjectUpdateOK(body *ModifyUpdateResponseBody) *projectviews.ProjectUpdateView {
	v := &projectviews.ProjectUpdateView{
		ID:        body.ID,
		Body:      body.Body,
		CreatedAt: body.CreatedAt,
	}

	return v
}

// NewModifyUpdateBadRequest builds a project service modify update endpoint
// bad-request error.
func NewModifyUpdateBadRequest(body ModifyUpdateBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewModifyUpdateForbidden builds a project service modify update endpoint
// forbidden error.
func NewModifyUpdateForbidden(body ModifyUpdateForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewModifyUpdateNotFound builds a project service modify update endpoint
// not-found error.
func NewModifyUpdateNotFound(body ModifyUpdateNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewModifyUpdateUnauthorized builds a project service modify update endpoint
// unauthorized error.
func NewModifyUpdateUnauthorized(body ModifyUpdateUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewInvitesPendingInvitesOK builds a "project" service "invites" endpoint
// result from a HTTP "OK" response.
func NewInvitesPendingInvitesOK(body *InvitesResponseBody) *projectviews.PendingInvitesView {
	v := &projectviews.PendingInvitesView{}
	v.Pending = make([]*projectviews.PendingInviteView, len(body.Pending))
	for i, val := range body.Pending {
		v.Pending[i] = unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView(val)
	}

	return v
}

// NewInvitesBadRequest builds a project service invites endpoint bad-request
// error.
func NewInvitesBadRequest(body InvitesBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewInvitesForbidden builds a project service invites endpoint forbidden
// error.
func NewInvitesForbidden(body InvitesForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewInvitesNotFound builds a project service invites endpoint not-found error.
func NewInvitesNotFound(body InvitesNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewInvitesUnauthorized builds a project service invites endpoint
// unauthorized error.
func NewInvitesUnauthorized(body InvitesUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewLookupInvitePendingInvitesOK builds a "project" service "lookup invite"
// endpoint result from a HTTP "OK" response.
func NewLookupInvitePendingInvitesOK(body *LookupInviteResponseBody) *projectviews.PendingInvitesView {
	v := &projectviews.PendingInvitesView{}
	v.Pending = make([]*projectviews.PendingInviteView, len(body.Pending))
	for i, val := range body.Pending {
		v.Pending[i] = unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView(val)
	}

	return v
}

// NewLookupInviteBadRequest builds a project service lookup invite endpoint
// bad-request error.
func NewLookupInviteBadRequest(body LookupInviteBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewLookupInviteForbidden builds a project service lookup invite endpoint
// forbidden error.
func NewLookupInviteForbidden(body LookupInviteForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewLookupInviteNotFound builds a project service lookup invite endpoint
// not-found error.
func NewLookupInviteNotFound(body LookupInviteNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewLookupInviteUnauthorized builds a project service lookup invite endpoint
// unauthorized error.
func NewLookupInviteUnauthorized(body LookupInviteUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewAcceptInviteBadRequest builds a project service accept invite endpoint
// bad-request error.
func NewAcceptInviteBadRequest(body AcceptInviteBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewAcceptInviteForbidden builds a project service accept invite endpoint
// forbidden error.
func NewAcceptInviteForbidden(body AcceptInviteForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewAcceptInviteNotFound builds a project service accept invite endpoint
// not-found error.
func NewAcceptInviteNotFound(body AcceptInviteNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewAcceptInviteUnauthorized builds a project service accept invite endpoint
// unauthorized error.
func NewAcceptInviteUnauthorized(body AcceptInviteUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewRejectInviteBadRequest builds a project service reject invite endpoint
// bad-request error.
func NewRejectInviteBadRequest(body RejectInviteBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewRejectInviteForbidden builds a project service reject invite endpoint
// forbidden error.
func NewRejectInviteForbidden(body RejectInviteForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewRejectInviteNotFound builds a project service reject invite endpoint
// not-found error.
func NewRejectInviteNotFound(body RejectInviteNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewRejectInviteUnauthorized builds a project service reject invite endpoint
// unauthorized error.
func NewRejectInviteUnauthorized(body RejectInviteUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewUploadMediaBadRequest builds a project service upload media endpoint
// bad-request error.
func NewUploadMediaBadRequest(body UploadMediaBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewUploadMediaForbidden builds a project service upload media endpoint
// forbidden error.
func NewUploadMediaForbidden(body UploadMediaForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewUploadMediaNotFound builds a project service upload media endpoint
// not-found error.
func NewUploadMediaNotFound(body UploadMediaNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewUploadMediaUnauthorized builds a project service upload media endpoint
// unauthorized error.
func NewUploadMediaUnauthorized(body UploadMediaUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// NewDownloadMediaResultOK builds a "project" service "download media"
// endpoint result from a HTTP "OK" response.
func NewDownloadMediaResultOK(length int64, contentType string) *project.DownloadMediaResult {
	v := &project.DownloadMediaResult{}
	v.Length = length
	v.ContentType = contentType

	return v
}

// NewDownloadMediaBadRequest builds a project service download media endpoint
// bad-request error.
func NewDownloadMediaBadRequest(body DownloadMediaBadRequestResponseBody) project.BadRequest {
	v := project.BadRequest(body)
	return v
}

// NewDownloadMediaForbidden builds a project service download media endpoint
// forbidden error.
func NewDownloadMediaForbidden(body DownloadMediaForbiddenResponseBody) project.Forbidden {
	v := project.Forbidden(body)
	return v
}

// NewDownloadMediaNotFound builds a project service download media endpoint
// not-found error.
func NewDownloadMediaNotFound(body DownloadMediaNotFoundResponseBody) project.NotFound {
	v := project.NotFound(body)
	return v
}

// NewDownloadMediaUnauthorized builds a project service download media
// endpoint unauthorized error.
func NewDownloadMediaUnauthorized(body DownloadMediaUnauthorizedResponseBody) project.Unauthorized {
	v := project.Unauthorized(body)
	return v
}

// ValidatePendingInviteResponseBody runs the validations defined on
// PendingInviteResponseBody
func ValidatePendingInviteResponseBody(body *PendingInviteResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	if body.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Project != nil {
		if err2 := ValidateProjectSummaryResponseBody(body.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectSummaryResponseBody runs the validations defined on
// ProjectSummaryResponseBody
func ValidateProjectSummaryResponseBody(body *ProjectSummaryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
