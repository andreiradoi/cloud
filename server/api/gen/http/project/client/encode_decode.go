// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strconv"

	project "github.com/fieldkit/cloud/server/api/gen/project"
	projectviews "github.com/fieldkit/cloud/server/api/gen/project/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildAddUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "add update" endpoint
func (c *Client) BuildAddUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.AddUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "add update", "*project.AddUpdatePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddUpdateProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddUpdateRequest returns an encoder for requests sent to the project
// add update server.
func EncodeAddUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add update", "*project.AddUpdatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewAddUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "add update", err)
		}
		return nil
	}
}

// DecodeAddUpdateResponse returns a decoder for responses returned by the
// project add update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddUpdateResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAddUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddUpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			p := NewAddUpdateProjectUpdateOK(&body)
			view := "default"
			vres := &projectviews.ProjectUpdate{Projected: p, View: view}
			if err = projectviews.ValidateProjectUpdate(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			res := project.NewProjectUpdate(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			return nil, NewAddUpdateBadRequest(body)
		case http.StatusForbidden:
			var (
				body AddUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			return nil, NewAddUpdateForbidden(body)
		case http.StatusNotFound:
			var (
				body AddUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			return nil, NewAddUpdateNotFound(body)
		case http.StatusUnauthorized:
			var (
				body AddUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			return nil, NewAddUpdateUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "delete update" endpoint
func (c *Client) BuildDeleteUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		updateID  int64
	)
	{
		p, ok := v.(*project.DeleteUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "delete update", "*project.DeleteUpdatePayload", v)
		}
		projectID = p.ProjectID
		updateID = p.UpdateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUpdateProjectPath(projectID, updateID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "delete update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUpdateRequest returns an encoder for requests sent to the
// project delete update server.
func EncodeDeleteUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.DeleteUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "delete update", "*project.DeleteUpdatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeleteUpdateResponse returns a decoder for responses returned by the
// project delete update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteUpdateResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateBadRequest(body)
		case http.StatusForbidden:
			var (
				body DeleteUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateForbidden(body)
		case http.StatusNotFound:
			var (
				body DeleteUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateNotFound(body)
		case http.StatusUnauthorized:
			var (
				body DeleteUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "delete update", resp.StatusCode, string(body))
		}
	}
}

// BuildModifyUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "modify update" endpoint
func (c *Client) BuildModifyUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		updateID  int64
	)
	{
		p, ok := v.(*project.ModifyUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "modify update", "*project.ModifyUpdatePayload", v)
		}
		projectID = p.ProjectID
		updateID = p.UpdateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ModifyUpdateProjectPath(projectID, updateID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "modify update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeModifyUpdateRequest returns an encoder for requests sent to the
// project modify update server.
func EncodeModifyUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ModifyUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "modify update", "*project.ModifyUpdatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewModifyUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "modify update", err)
		}
		return nil
	}
}

// DecodeModifyUpdateResponse returns a decoder for responses returned by the
// project modify update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeModifyUpdateResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeModifyUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ModifyUpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			p := NewModifyUpdateProjectUpdateOK(&body)
			view := "default"
			vres := &projectviews.ProjectUpdate{Projected: p, View: view}
			if err = projectviews.ValidateProjectUpdate(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			res := project.NewProjectUpdate(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ModifyUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			return nil, NewModifyUpdateBadRequest(body)
		case http.StatusForbidden:
			var (
				body ModifyUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			return nil, NewModifyUpdateForbidden(body)
		case http.StatusNotFound:
			var (
				body ModifyUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			return nil, NewModifyUpdateNotFound(body)
		case http.StatusUnauthorized:
			var (
				body ModifyUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			return nil, NewModifyUpdateUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "modify update", resp.StatusCode, string(body))
		}
	}
}

// BuildInvitesRequest instantiates a HTTP request object with method and path
// set to call the "project" service "invites" endpoint
func (c *Client) BuildInvitesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InvitesProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "invites", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInvitesRequest returns an encoder for requests sent to the project
// invites server.
func EncodeInvitesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.InvitesPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "invites", "*project.InvitesPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeInvitesResponse returns a decoder for responses returned by the
// project invites endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeInvitesResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeInvitesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InvitesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			p := NewInvitesPendingInvitesOK(&body)
			view := "default"
			vres := &projectviews.PendingInvites{Projected: p, View: view}
			if err = projectviews.ValidatePendingInvites(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			res := project.NewPendingInvites(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body InvitesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			return nil, NewInvitesBadRequest(body)
		case http.StatusForbidden:
			var (
				body InvitesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			return nil, NewInvitesForbidden(body)
		case http.StatusNotFound:
			var (
				body InvitesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			return nil, NewInvitesNotFound(body)
		case http.StatusUnauthorized:
			var (
				body InvitesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			return nil, NewInvitesUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "invites", resp.StatusCode, string(body))
		}
	}
}

// BuildLookupInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "lookup invite" endpoint
func (c *Client) BuildLookupInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*project.LookupInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "lookup invite", "*project.LookupInvitePayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LookupInviteProjectPath(token)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "lookup invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLookupInviteRequest returns an encoder for requests sent to the
// project lookup invite server.
func EncodeLookupInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.LookupInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "lookup invite", "*project.LookupInvitePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeLookupInviteResponse returns a decoder for responses returned by the
// project lookup invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeLookupInviteResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeLookupInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LookupInviteResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			p := NewLookupInvitePendingInvitesOK(&body)
			view := "default"
			vres := &projectviews.PendingInvites{Projected: p, View: view}
			if err = projectviews.ValidatePendingInvites(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			res := project.NewPendingInvites(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body LookupInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteBadRequest(body)
		case http.StatusForbidden:
			var (
				body LookupInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteForbidden(body)
		case http.StatusNotFound:
			var (
				body LookupInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteNotFound(body)
		case http.StatusUnauthorized:
			var (
				body LookupInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "lookup invite", resp.StatusCode, string(body))
		}
	}
}

// BuildAcceptInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "accept invite" endpoint
func (c *Client) BuildAcceptInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*project.AcceptInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "accept invite", "*project.AcceptInvitePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AcceptInviteProjectPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "accept invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAcceptInviteRequest returns an encoder for requests sent to the
// project accept invite server.
func EncodeAcceptInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AcceptInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "accept invite", "*project.AcceptInvitePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.Token != nil {
			values.Add("token", *p.Token)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAcceptInviteResponse returns a decoder for responses returned by the
// project accept invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAcceptInviteResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAcceptInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body AcceptInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteBadRequest(body)
		case http.StatusForbidden:
			var (
				body AcceptInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteForbidden(body)
		case http.StatusNotFound:
			var (
				body AcceptInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteNotFound(body)
		case http.StatusUnauthorized:
			var (
				body AcceptInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "accept invite", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "reject invite" endpoint
func (c *Client) BuildRejectInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*project.RejectInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "reject invite", "*project.RejectInvitePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectInviteProjectPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "reject invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRejectInviteRequest returns an encoder for requests sent to the
// project reject invite server.
func EncodeRejectInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RejectInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "reject invite", "*project.RejectInvitePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.Token != nil {
			values.Add("token", *p.Token)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRejectInviteResponse returns a decoder for responses returned by the
// project reject invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRejectInviteResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRejectInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RejectInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			return nil, NewRejectInviteBadRequest(body)
		case http.StatusForbidden:
			var (
				body RejectInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			return nil, NewRejectInviteForbidden(body)
		case http.StatusNotFound:
			var (
				body RejectInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			return nil, NewRejectInviteNotFound(body)
		case http.StatusUnauthorized:
			var (
				body RejectInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			return nil, NewRejectInviteUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "reject invite", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "project" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddProjectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the project add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add", "*project.AddPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the project
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			p := NewAddProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			return nil, NewAddBadRequest(body)
		case http.StatusForbidden:
			var (
				body AddForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			return nil, NewAddForbidden(body)
		case http.StatusNotFound:
			var (
				body AddNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			return nil, NewAddNotFound(body)
		case http.StatusUnauthorized:
			var (
				body AddUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			return nil, NewAddUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "project" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "update", "*project.UpdatePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProjectPath(projectID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the project
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "update", "*project.UpdatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the project
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			p := NewUpdateProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			return nil, NewUpdateBadRequest(body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			return nil, NewUpdateForbidden(body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			return nil, NewUpdateNotFound(body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			return nil, NewUpdateUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "project" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "get", "*project.GetPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProjectPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the project get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "get", "*project.GetPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the project
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			p := NewGetProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			return nil, NewGetBadRequest(body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			return nil, NewGetForbidden(body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			return nil, NewGetNotFound(body)
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			return nil, NewGetUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildListCommunityRequest instantiates a HTTP request object with method and
// path set to call the "project" service "list community" endpoint
func (c *Client) BuildListCommunityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCommunityProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "list community", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListCommunityRequest returns an encoder for requests sent to the
// project list community server.
func EncodeListCommunityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ListCommunityPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "list community", "*project.ListCommunityPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeListCommunityResponse returns a decoder for responses returned by the
// project list community endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListCommunityResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeListCommunityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListCommunityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			p := NewListCommunityProjectsOK(&body)
			view := "default"
			vres := &projectviews.Projects{Projected: p, View: view}
			if err = projectviews.ValidateProjects(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			res := project.NewProjects(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListCommunityBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			return nil, NewListCommunityBadRequest(body)
		case http.StatusForbidden:
			var (
				body ListCommunityForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			return nil, NewListCommunityForbidden(body)
		case http.StatusNotFound:
			var (
				body ListCommunityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			return nil, NewListCommunityNotFound(body)
		case http.StatusUnauthorized:
			var (
				body ListCommunityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			return nil, NewListCommunityUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "list community", resp.StatusCode, string(body))
		}
	}
}

// BuildListMineRequest instantiates a HTTP request object with method and path
// set to call the "project" service "list mine" endpoint
func (c *Client) BuildListMineRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMineProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "list mine", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMineRequest returns an encoder for requests sent to the project
// list mine server.
func EncodeListMineRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ListMinePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "list mine", "*project.ListMinePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeListMineResponse returns a decoder for responses returned by the
// project list mine endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListMineResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeListMineResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMineResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			p := NewListMineProjectsOK(&body)
			view := "default"
			vres := &projectviews.Projects{Projected: p, View: view}
			if err = projectviews.ValidateProjects(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			res := project.NewProjects(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListMineBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			return nil, NewListMineBadRequest(body)
		case http.StatusForbidden:
			var (
				body ListMineForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			return nil, NewListMineForbidden(body)
		case http.StatusNotFound:
			var (
				body ListMineNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			return nil, NewListMineNotFound(body)
		case http.StatusUnauthorized:
			var (
				body ListMineUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			return nil, NewListMineUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "list mine", resp.StatusCode, string(body))
		}
	}
}

// BuildInviteRequest instantiates a HTTP request object with method and path
// set to call the "project" service "invite" endpoint
func (c *Client) BuildInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.InvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "invite", "*project.InvitePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InviteProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInviteRequest returns an encoder for requests sent to the project
// invite server.
func EncodeInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.InvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "invite", "*project.InvitePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewInviteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "invite", err)
		}
		return nil
	}
}

// DecodeInviteResponse returns a decoder for responses returned by the project
// invite endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeInviteResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body InviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			return nil, NewInviteBadRequest(body)
		case http.StatusForbidden:
			var (
				body InviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			return nil, NewInviteForbidden(body)
		case http.StatusNotFound:
			var (
				body InviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			return nil, NewInviteNotFound(body)
		case http.StatusUnauthorized:
			var (
				body InviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			return nil, NewInviteUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "invite", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveUserRequest instantiates a HTTP request object with method and
// path set to call the "project" service "remove user" endpoint
func (c *Client) BuildRemoveUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.RemoveUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "remove user", "*project.RemoveUserPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveUserProjectPath(projectID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "remove user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveUserRequest returns an encoder for requests sent to the project
// remove user server.
func EncodeRemoveUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RemoveUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "remove user", "*project.RemoveUserPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewRemoveUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "remove user", err)
		}
		return nil
	}
}

// DecodeRemoveUserResponse returns a decoder for responses returned by the
// project remove user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeRemoveUserResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRemoveUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RemoveUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			return nil, NewRemoveUserBadRequest(body)
		case http.StatusForbidden:
			var (
				body RemoveUserForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			return nil, NewRemoveUserForbidden(body)
		case http.StatusNotFound:
			var (
				body RemoveUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			return nil, NewRemoveUserNotFound(body)
		case http.StatusUnauthorized:
			var (
				body RemoveUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			return nil, NewRemoveUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "remove user", resp.StatusCode, string(body))
		}
	}
}

// BuildAddStationRequest instantiates a HTTP request object with method and
// path set to call the "project" service "add station" endpoint
func (c *Client) BuildAddStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		stationID int32
	)
	{
		p, ok := v.(*project.AddStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "add station", "*project.AddStationPayload", v)
		}
		projectID = p.ProjectID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddStationProjectPath(projectID, stationID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddStationRequest returns an encoder for requests sent to the project
// add station server.
func EncodeAddStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add station", "*project.AddStationPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeAddStationResponse returns a decoder for responses returned by the
// project add station endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddStationResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeAddStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body AddStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			return nil, NewAddStationBadRequest(body)
		case http.StatusForbidden:
			var (
				body AddStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			return nil, NewAddStationForbidden(body)
		case http.StatusNotFound:
			var (
				body AddStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			return nil, NewAddStationNotFound(body)
		case http.StatusUnauthorized:
			var (
				body AddStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			return nil, NewAddStationUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add station", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveStationRequest instantiates a HTTP request object with method and
// path set to call the "project" service "remove station" endpoint
func (c *Client) BuildRemoveStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		stationID int32
	)
	{
		p, ok := v.(*project.RemoveStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "remove station", "*project.RemoveStationPayload", v)
		}
		projectID = p.ProjectID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveStationProjectPath(projectID, stationID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "remove station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveStationRequest returns an encoder for requests sent to the
// project remove station server.
func EncodeRemoveStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RemoveStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "remove station", "*project.RemoveStationPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeRemoveStationResponse returns a decoder for responses returned by the
// project remove station endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRemoveStationResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeRemoveStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RemoveStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			return nil, NewRemoveStationBadRequest(body)
		case http.StatusForbidden:
			var (
				body RemoveStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			return nil, NewRemoveStationForbidden(body)
		case http.StatusNotFound:
			var (
				body RemoveStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			return nil, NewRemoveStationNotFound(body)
		case http.StatusUnauthorized:
			var (
				body RemoveStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			return nil, NewRemoveStationUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "remove station", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "project" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "delete", "*project.DeletePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProjectPath(projectID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the project
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "delete", "*project.DeletePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the project
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			return nil, NewDeleteBadRequest(body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			return nil, NewDeleteForbidden(body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			return nil, NewDeleteNotFound(body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			return nil, NewDeleteUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadMediaRequest instantiates a HTTP request object with method and
// path set to call the "project" service "upload media" endpoint
func (c *Client) BuildUploadMediaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		body      io.Reader
	)
	{
		rd, ok := v.(*project.UploadMediaRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "upload media", "project.UploadMediaRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadMediaProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "upload media", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadMediaRequest returns an encoder for requests sent to the project
// upload media server.
func EncodeUploadMediaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*project.UploadMediaRequestData)
		if !ok {
			return goahttp.ErrInvalidType("project", "upload media", "*project.UploadMediaRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeUploadMediaResponse returns a decoder for responses returned by the
// project upload media endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUploadMediaResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeUploadMediaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UploadMediaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload media", err)
			}
			return nil, NewUploadMediaBadRequest(body)
		case http.StatusForbidden:
			var (
				body UploadMediaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload media", err)
			}
			return nil, NewUploadMediaForbidden(body)
		case http.StatusNotFound:
			var (
				body UploadMediaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload media", err)
			}
			return nil, NewUploadMediaNotFound(body)
		case http.StatusUnauthorized:
			var (
				body UploadMediaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload media", err)
			}
			return nil, NewUploadMediaUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "upload media", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadMediaStreamPayload creates a streaming endpoint request payload
// from the method payload and the path to the file to be streamed
func BuildUploadMediaStreamPayload(payload interface{}, fpath string) (*project.UploadMediaRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &project.UploadMediaRequestData{
		Payload: payload.(*project.UploadMediaPayload),
		Body:    f,
	}, nil
}

// BuildDownloadMediaRequest instantiates a HTTP request object with method and
// path set to call the "project" service "download media" endpoint
func (c *Client) BuildDownloadMediaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.DownloadMediaPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "download media", "*project.DownloadMediaPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadMediaProjectPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "download media", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDownloadMediaResponse returns a decoder for responses returned by the
// project download media endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDownloadMediaResponse may return the following errors:
//	- "bad-request" (type project.BadRequest): http.StatusBadRequest
//	- "forbidden" (type project.Forbidden): http.StatusForbidden
//	- "not-found" (type project.NotFound): http.StatusNotFound
//	- "unauthorized" (type project.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeDownloadMediaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				length      int64
				contentType string
				err         error
			)
			{
				lengthRaw := resp.Header.Get("Content-Length")
				if lengthRaw == "" {
					return nil, goahttp.ErrValidationError("project", "download media", goa.MissingFieldError("Content-Length", "header"))
				}
				v, err2 := strconv.ParseInt(lengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("length", lengthRaw, "integer"))
				}
				length = v
			}
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Content-Type", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "download media", err)
			}
			res := NewDownloadMediaResultOK(length, contentType)
			return res, nil
		case http.StatusBadRequest:
			var (
				body DownloadMediaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download media", err)
			}
			return nil, NewDownloadMediaBadRequest(body)
		case http.StatusForbidden:
			var (
				body DownloadMediaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download media", err)
			}
			return nil, NewDownloadMediaForbidden(body)
		case http.StatusNotFound:
			var (
				body DownloadMediaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download media", err)
			}
			return nil, NewDownloadMediaNotFound(body)
		case http.StatusUnauthorized:
			var (
				body DownloadMediaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download media", err)
			}
			return nil, NewDownloadMediaUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "download media", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView builds a
// value of type *projectviews.PendingInviteView from a value of type
// *PendingInviteResponseBody.
func unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView(v *PendingInviteResponseBody) *projectviews.PendingInviteView {
	res := &projectviews.PendingInviteView{
		ID:   v.ID,
		Time: v.Time,
		Role: v.Role,
	}
	res.Project = unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView(v.Project)

	return res
}

// unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView builds a
// value of type *projectviews.ProjectSummaryView from a value of type
// *ProjectSummaryResponseBody.
func unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView(v *ProjectSummaryResponseBody) *projectviews.ProjectSummaryView {
	res := &projectviews.ProjectSummaryView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalProjectResponseBodyToProjectviewsProjectView builds a value of type
// *projectviews.ProjectView from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectviewsProjectView(v *ProjectResponseBody) *projectviews.ProjectView {
	res := &projectviews.ProjectView{
		ID:                v.ID,
		Name:              v.Name,
		Slug:              v.Slug,
		Description:       v.Description,
		Goal:              v.Goal,
		Location:          v.Location,
		Tags:              v.Tags,
		Private:           v.Private,
		StartTime:         v.StartTime,
		EndTime:           v.EndTime,
		Photo:             v.Photo,
		ReadOnly:          v.ReadOnly,
		NumberOfFollowers: v.NumberOfFollowers,
	}

	return res
}
