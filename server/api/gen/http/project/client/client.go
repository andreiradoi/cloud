// Code generated by goa v3.1.2, DO NOT EDIT.
//
// project client HTTP transport
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the project service endpoint HTTP clients.
type Client struct {
	// AddUpdate Doer is the HTTP client used to make requests to the add update
	// endpoint.
	AddUpdateDoer goahttp.Doer

	// DeleteUpdate Doer is the HTTP client used to make requests to the delete
	// update endpoint.
	DeleteUpdateDoer goahttp.Doer

	// ModifyUpdate Doer is the HTTP client used to make requests to the modify
	// update endpoint.
	ModifyUpdateDoer goahttp.Doer

	// Invites Doer is the HTTP client used to make requests to the invites
	// endpoint.
	InvitesDoer goahttp.Doer

	// LookupInvite Doer is the HTTP client used to make requests to the lookup
	// invite endpoint.
	LookupInviteDoer goahttp.Doer

	// AcceptInvite Doer is the HTTP client used to make requests to the accept
	// invite endpoint.
	AcceptInviteDoer goahttp.Doer

	// RejectInvite Doer is the HTTP client used to make requests to the reject
	// invite endpoint.
	RejectInviteDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the project service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddUpdateDoer:       doer,
		DeleteUpdateDoer:    doer,
		ModifyUpdateDoer:    doer,
		InvitesDoer:         doer,
		LookupInviteDoer:    doer,
		AcceptInviteDoer:    doer,
		RejectInviteDoer:    doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// AddUpdate returns an endpoint that makes HTTP requests to the project
// service add update server.
func (c *Client) AddUpdate() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddUpdateRequest(c.encoder)
		decodeResponse = DecodeAddUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddUpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "add update", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUpdate returns an endpoint that makes HTTP requests to the project
// service delete update server.
func (c *Client) DeleteUpdate() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteUpdateRequest(c.encoder)
		decodeResponse = DecodeDeleteUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "delete update", err)
		}
		return decodeResponse(resp)
	}
}

// ModifyUpdate returns an endpoint that makes HTTP requests to the project
// service modify update server.
func (c *Client) ModifyUpdate() goa.Endpoint {
	var (
		encodeRequest  = EncodeModifyUpdateRequest(c.encoder)
		decodeResponse = DecodeModifyUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildModifyUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ModifyUpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "modify update", err)
		}
		return decodeResponse(resp)
	}
}

// Invites returns an endpoint that makes HTTP requests to the project service
// invites server.
func (c *Client) Invites() goa.Endpoint {
	var (
		encodeRequest  = EncodeInvitesRequest(c.encoder)
		decodeResponse = DecodeInvitesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildInvitesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.InvitesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "invites", err)
		}
		return decodeResponse(resp)
	}
}

// LookupInvite returns an endpoint that makes HTTP requests to the project
// service lookup invite server.
func (c *Client) LookupInvite() goa.Endpoint {
	var (
		encodeRequest  = EncodeLookupInviteRequest(c.encoder)
		decodeResponse = DecodeLookupInviteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLookupInviteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LookupInviteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "lookup invite", err)
		}
		return decodeResponse(resp)
	}
}

// AcceptInvite returns an endpoint that makes HTTP requests to the project
// service accept invite server.
func (c *Client) AcceptInvite() goa.Endpoint {
	var (
		encodeRequest  = EncodeAcceptInviteRequest(c.encoder)
		decodeResponse = DecodeAcceptInviteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAcceptInviteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AcceptInviteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "accept invite", err)
		}
		return decodeResponse(resp)
	}
}

// RejectInvite returns an endpoint that makes HTTP requests to the project
// service reject invite server.
func (c *Client) RejectInvite() goa.Endpoint {
	var (
		encodeRequest  = EncodeRejectInviteRequest(c.encoder)
		decodeResponse = DecodeRejectInviteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRejectInviteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RejectInviteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project", "reject invite", err)
		}
		return decodeResponse(resp)
	}
}
