// Code generated by goa v3.1.2, DO NOT EDIT.
//
// ingestion HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"encoding/json"
	"fmt"

	ingestion "github.com/fieldkit/cloud/server/api/gen/ingestion"
)

// BuildProcessPendingPayload builds the payload for the ingestion process
// pending endpoint from CLI flags.
func BuildProcessPendingPayload(ingestionProcessPendingAuth string) (*ingestion.ProcessPendingPayload, error) {
	var auth string
	{
		auth = ingestionProcessPendingAuth
	}
	v := &ingestion.ProcessPendingPayload{}
	v.Auth = auth

	return v, nil
}

// BuildProcessStationPayload builds the payload for the ingestion process
// station endpoint from CLI flags.
func BuildProcessStationPayload(ingestionProcessStationBody string, ingestionProcessStationAuth string) (*ingestion.ProcessStationPayload, error) {
	var err error
	var body ProcessStationRequestBody
	{
		err = json.Unmarshal([]byte(ingestionProcessStationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"stationId\": 272327269\n   }'")
		}
	}
	var auth string
	{
		auth = ingestionProcessStationAuth
	}
	v := &ingestion.ProcessStationPayload{
		StationID: body.StationID,
	}
	v.Auth = auth

	return v, nil
}

// BuildProcessIngestionPayload builds the payload for the ingestion process
// ingestion endpoint from CLI flags.
func BuildProcessIngestionPayload(ingestionProcessIngestionBody string, ingestionProcessIngestionAuth string) (*ingestion.ProcessIngestionPayload, error) {
	var err error
	var body ProcessIngestionRequestBody
	{
		err = json.Unmarshal([]byte(ingestionProcessIngestionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ingestionId\": 8646877932906693598\n   }'")
		}
	}
	var auth string
	{
		auth = ingestionProcessIngestionAuth
	}
	v := &ingestion.ProcessIngestionPayload{
		IngestionID: body.IngestionID,
	}
	v.Auth = auth

	return v, nil
}

// BuildDeletePayload builds the payload for the ingestion delete endpoint from
// CLI flags.
func BuildDeletePayload(ingestionDeleteBody string, ingestionDeleteAuth string) (*ingestion.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(ingestionDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ingestionId\": 644836512396851225\n   }'")
		}
	}
	var auth string
	{
		auth = ingestionDeleteAuth
	}
	v := &ingestion.DeletePayload{
		IngestionID: body.IngestionID,
	}
	v.Auth = auth

	return v, nil
}
