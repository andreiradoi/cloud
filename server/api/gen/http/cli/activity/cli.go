// Code generated by goa v3.1.2, DO NOT EDIT.
//
// activity HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	activityc "github.com/fieldkit/cloud/server/api/gen/http/activity/client"
	firmwarec "github.com/fieldkit/cloud/server/api/gen/http/firmware/client"
	followingc "github.com/fieldkit/cloud/server/api/gen/http/following/client"
	informationc "github.com/fieldkit/cloud/server/api/gen/http/information/client"
	ingestionc "github.com/fieldkit/cloud/server/api/gen/http/ingestion/client"
	modulesc "github.com/fieldkit/cloud/server/api/gen/http/modules/client"
	notesc "github.com/fieldkit/cloud/server/api/gen/http/notes/client"
	projectc "github.com/fieldkit/cloud/server/api/gen/http/project/client"
	recordsc "github.com/fieldkit/cloud/server/api/gen/http/records/client"
	sensorc "github.com/fieldkit/cloud/server/api/gen/http/sensor/client"
	stationc "github.com/fieldkit/cloud/server/api/gen/http/station/client"
	tasksc "github.com/fieldkit/cloud/server/api/gen/http/tasks/client"
	testc "github.com/fieldkit/cloud/server/api/gen/http/test/client"
	userc "github.com/fieldkit/cloud/server/api/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `activity (station|project)
firmware (download|add|list|delete)
following (follow|unfollow|followers)
ingestion (process- pending|process- station|process- ingestion|delete)
modules meta
notes (update|get|media|upload)
project (add- update|delete- update|modify- update|invites|lookup- invite|accept- invite|reject- invite|add|update|get|list- community|list- mine|invite|remove- user|add- station|remove- station|delete|upload- media|download- media)
records (data|meta|resolved)
sensor (meta|data)
information (device- layout|firmware- statistics)
station (add|get|update|list- mine|list- project|photo)
tasks five
test (get|error|email)
user (roles|delete|upload- photo|download- photo|login|recovery- lookup|recovery|logout|refresh|send- validation|validate|add|update|change- password|get- current|list- by- project|issue- transmission- token|project- roles|admin- delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` activity station --id 8390865970516205144 --page 7018208357619660300 --auth "Facilis quasi aut placeat."` + "\n" +
		os.Args[0] + ` firmware download --firmware-id 87940682` + "\n" +
		os.Args[0] + ` following follow --id 2475358697457025226 --auth "Sint dolore consequatur tenetur aut minima minima."` + "\n" +
		os.Args[0] + ` ingestion process- pending --auth "Quia magni debitis."` + "\n" +
		os.Args[0] + ` modules meta` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		activityFlags = flag.NewFlagSet("activity", flag.ContinueOnError)

		activityStationFlags    = flag.NewFlagSet("station", flag.ExitOnError)
		activityStationIDFlag   = activityStationFlags.String("id", "REQUIRED", "")
		activityStationPageFlag = activityStationFlags.String("page", "", "")
		activityStationAuthFlag = activityStationFlags.String("auth", "", "")

		activityProjectFlags    = flag.NewFlagSet("project", flag.ExitOnError)
		activityProjectIDFlag   = activityProjectFlags.String("id", "REQUIRED", "")
		activityProjectPageFlag = activityProjectFlags.String("page", "", "")
		activityProjectAuthFlag = activityProjectFlags.String("auth", "", "")

		firmwareFlags = flag.NewFlagSet("firmware", flag.ContinueOnError)

		firmwareDownloadFlags          = flag.NewFlagSet("download", flag.ExitOnError)
		firmwareDownloadFirmwareIDFlag = firmwareDownloadFlags.String("firmware-id", "REQUIRED", "")

		firmwareAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		firmwareAddBodyFlag = firmwareAddFlags.String("body", "REQUIRED", "")
		firmwareAddAuthFlag = firmwareAddFlags.String("auth", "", "")

		firmwareListFlags        = flag.NewFlagSet("list", flag.ExitOnError)
		firmwareListModuleFlag   = firmwareListFlags.String("module", "", "")
		firmwareListProfileFlag  = firmwareListFlags.String("profile", "", "")
		firmwareListPageSizeFlag = firmwareListFlags.String("page-size", "", "")
		firmwareListPageFlag     = firmwareListFlags.String("page", "", "")
		firmwareListAuthFlag     = firmwareListFlags.String("auth", "", "")

		firmwareDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		firmwareDeleteFirmwareIDFlag = firmwareDeleteFlags.String("firmware-id", "REQUIRED", "")
		firmwareDeleteAuthFlag       = firmwareDeleteFlags.String("auth", "", "")

		followingFlags = flag.NewFlagSet("following", flag.ContinueOnError)

		followingFollowFlags    = flag.NewFlagSet("follow", flag.ExitOnError)
		followingFollowIDFlag   = followingFollowFlags.String("id", "REQUIRED", "")
		followingFollowAuthFlag = followingFollowFlags.String("auth", "", "")

		followingUnfollowFlags    = flag.NewFlagSet("unfollow", flag.ExitOnError)
		followingUnfollowIDFlag   = followingUnfollowFlags.String("id", "REQUIRED", "")
		followingUnfollowAuthFlag = followingUnfollowFlags.String("auth", "", "")

		followingFollowersFlags    = flag.NewFlagSet("followers", flag.ExitOnError)
		followingFollowersIDFlag   = followingFollowersFlags.String("id", "REQUIRED", "")
		followingFollowersPageFlag = followingFollowersFlags.String("page", "", "")

		ingestionFlags = flag.NewFlagSet("ingestion", flag.ContinueOnError)

		ingestionProcessPendingFlags    = flag.NewFlagSet("process- pending", flag.ExitOnError)
		ingestionProcessPendingAuthFlag = ingestionProcessPendingFlags.String("auth", "REQUIRED", "")

		ingestionProcessStationFlags          = flag.NewFlagSet("process- station", flag.ExitOnError)
		ingestionProcessStationStationIDFlag  = ingestionProcessStationFlags.String("station-id", "REQUIRED", "")
		ingestionProcessStationCompletelyFlag = ingestionProcessStationFlags.String("completely", "", "")
		ingestionProcessStationAuthFlag       = ingestionProcessStationFlags.String("auth", "REQUIRED", "")

		ingestionProcessIngestionFlags           = flag.NewFlagSet("process- ingestion", flag.ExitOnError)
		ingestionProcessIngestionIngestionIDFlag = ingestionProcessIngestionFlags.String("ingestion-id", "REQUIRED", "")
		ingestionProcessIngestionAuthFlag        = ingestionProcessIngestionFlags.String("auth", "REQUIRED", "")

		ingestionDeleteFlags           = flag.NewFlagSet("delete", flag.ExitOnError)
		ingestionDeleteIngestionIDFlag = ingestionDeleteFlags.String("ingestion-id", "REQUIRED", "")
		ingestionDeleteAuthFlag        = ingestionDeleteFlags.String("auth", "REQUIRED", "")

		modulesFlags = flag.NewFlagSet("modules", flag.ContinueOnError)

		modulesMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		notesFlags = flag.NewFlagSet("notes", flag.ContinueOnError)

		notesUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		notesUpdateBodyFlag      = notesUpdateFlags.String("body", "REQUIRED", "")
		notesUpdateStationIDFlag = notesUpdateFlags.String("station-id", "REQUIRED", "")
		notesUpdateAuthFlag      = notesUpdateFlags.String("auth", "REQUIRED", "")

		notesGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		notesGetStationIDFlag = notesGetFlags.String("station-id", "REQUIRED", "")
		notesGetAuthFlag      = notesGetFlags.String("auth", "REQUIRED", "")

		notesMediaFlags       = flag.NewFlagSet("media", flag.ExitOnError)
		notesMediaMediaIDFlag = notesMediaFlags.String("media-id", "REQUIRED", "")
		notesMediaAuthFlag    = notesMediaFlags.String("auth", "REQUIRED", "")

		notesUploadFlags             = flag.NewFlagSet("upload", flag.ExitOnError)
		notesUploadStationIDFlag     = notesUploadFlags.String("station-id", "REQUIRED", "")
		notesUploadKeyFlag           = notesUploadFlags.String("key", "REQUIRED", "")
		notesUploadContentTypeFlag   = notesUploadFlags.String("content-type", "REQUIRED", "")
		notesUploadContentLengthFlag = notesUploadFlags.String("content-length", "REQUIRED", "")
		notesUploadAuthFlag          = notesUploadFlags.String("auth", "REQUIRED", "")
		notesUploadStreamFlag        = notesUploadFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectFlags = flag.NewFlagSet("project", flag.ContinueOnError)

		projectAddUpdateFlags         = flag.NewFlagSet("add- update", flag.ExitOnError)
		projectAddUpdateBodyFlag      = projectAddUpdateFlags.String("body", "REQUIRED", "")
		projectAddUpdateProjectIDFlag = projectAddUpdateFlags.String("project-id", "REQUIRED", "")
		projectAddUpdateAuthFlag      = projectAddUpdateFlags.String("auth", "REQUIRED", "")

		projectDeleteUpdateFlags         = flag.NewFlagSet("delete- update", flag.ExitOnError)
		projectDeleteUpdateProjectIDFlag = projectDeleteUpdateFlags.String("project-id", "REQUIRED", "")
		projectDeleteUpdateUpdateIDFlag  = projectDeleteUpdateFlags.String("update-id", "REQUIRED", "")
		projectDeleteUpdateAuthFlag      = projectDeleteUpdateFlags.String("auth", "REQUIRED", "")

		projectModifyUpdateFlags         = flag.NewFlagSet("modify- update", flag.ExitOnError)
		projectModifyUpdateBodyFlag      = projectModifyUpdateFlags.String("body", "REQUIRED", "")
		projectModifyUpdateProjectIDFlag = projectModifyUpdateFlags.String("project-id", "REQUIRED", "")
		projectModifyUpdateUpdateIDFlag  = projectModifyUpdateFlags.String("update-id", "REQUIRED", "")
		projectModifyUpdateAuthFlag      = projectModifyUpdateFlags.String("auth", "REQUIRED", "")

		projectInvitesFlags    = flag.NewFlagSet("invites", flag.ExitOnError)
		projectInvitesAuthFlag = projectInvitesFlags.String("auth", "REQUIRED", "")

		projectLookupInviteFlags     = flag.NewFlagSet("lookup- invite", flag.ExitOnError)
		projectLookupInviteTokenFlag = projectLookupInviteFlags.String("token", "REQUIRED", "")
		projectLookupInviteAuthFlag  = projectLookupInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptInviteFlags     = flag.NewFlagSet("accept- invite", flag.ExitOnError)
		projectAcceptInviteIDFlag    = projectAcceptInviteFlags.String("id", "REQUIRED", "")
		projectAcceptInviteTokenFlag = projectAcceptInviteFlags.String("token", "", "")
		projectAcceptInviteAuthFlag  = projectAcceptInviteFlags.String("auth", "REQUIRED", "")

		projectRejectInviteFlags     = flag.NewFlagSet("reject- invite", flag.ExitOnError)
		projectRejectInviteIDFlag    = projectRejectInviteFlags.String("id", "REQUIRED", "")
		projectRejectInviteTokenFlag = projectRejectInviteFlags.String("token", "", "")
		projectRejectInviteAuthFlag  = projectRejectInviteFlags.String("auth", "REQUIRED", "")

		projectAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		projectAddBodyFlag = projectAddFlags.String("body", "REQUIRED", "")
		projectAddAuthFlag = projectAddFlags.String("auth", "REQUIRED", "")

		projectUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		projectUpdateBodyFlag      = projectUpdateFlags.String("body", "REQUIRED", "")
		projectUpdateProjectIDFlag = projectUpdateFlags.String("project-id", "REQUIRED", "")
		projectUpdateAuthFlag      = projectUpdateFlags.String("auth", "REQUIRED", "")

		projectGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		projectGetProjectIDFlag = projectGetFlags.String("project-id", "REQUIRED", "")
		projectGetAuthFlag      = projectGetFlags.String("auth", "", "")

		projectListCommunityFlags    = flag.NewFlagSet("list- community", flag.ExitOnError)
		projectListCommunityAuthFlag = projectListCommunityFlags.String("auth", "", "")

		projectListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		projectListMineAuthFlag = projectListMineFlags.String("auth", "REQUIRED", "")

		projectInviteFlags         = flag.NewFlagSet("invite", flag.ExitOnError)
		projectInviteBodyFlag      = projectInviteFlags.String("body", "REQUIRED", "")
		projectInviteProjectIDFlag = projectInviteFlags.String("project-id", "REQUIRED", "")
		projectInviteAuthFlag      = projectInviteFlags.String("auth", "REQUIRED", "")

		projectRemoveUserFlags         = flag.NewFlagSet("remove- user", flag.ExitOnError)
		projectRemoveUserBodyFlag      = projectRemoveUserFlags.String("body", "REQUIRED", "")
		projectRemoveUserProjectIDFlag = projectRemoveUserFlags.String("project-id", "REQUIRED", "")
		projectRemoveUserAuthFlag      = projectRemoveUserFlags.String("auth", "REQUIRED", "")

		projectAddStationFlags         = flag.NewFlagSet("add- station", flag.ExitOnError)
		projectAddStationProjectIDFlag = projectAddStationFlags.String("project-id", "REQUIRED", "")
		projectAddStationStationIDFlag = projectAddStationFlags.String("station-id", "REQUIRED", "")
		projectAddStationAuthFlag      = projectAddStationFlags.String("auth", "REQUIRED", "")

		projectRemoveStationFlags         = flag.NewFlagSet("remove- station", flag.ExitOnError)
		projectRemoveStationProjectIDFlag = projectRemoveStationFlags.String("project-id", "REQUIRED", "")
		projectRemoveStationStationIDFlag = projectRemoveStationFlags.String("station-id", "REQUIRED", "")
		projectRemoveStationAuthFlag      = projectRemoveStationFlags.String("auth", "REQUIRED", "")

		projectDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		projectDeleteProjectIDFlag = projectDeleteFlags.String("project-id", "REQUIRED", "")
		projectDeleteAuthFlag      = projectDeleteFlags.String("auth", "REQUIRED", "")

		projectUploadMediaFlags             = flag.NewFlagSet("upload- media", flag.ExitOnError)
		projectUploadMediaProjectIDFlag     = projectUploadMediaFlags.String("project-id", "REQUIRED", "")
		projectUploadMediaContentTypeFlag   = projectUploadMediaFlags.String("content-type", "REQUIRED", "")
		projectUploadMediaContentLengthFlag = projectUploadMediaFlags.String("content-length", "REQUIRED", "")
		projectUploadMediaAuthFlag          = projectUploadMediaFlags.String("auth", "REQUIRED", "")
		projectUploadMediaStreamFlag        = projectUploadMediaFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectDownloadMediaFlags         = flag.NewFlagSet("download- media", flag.ExitOnError)
		projectDownloadMediaProjectIDFlag = projectDownloadMediaFlags.String("project-id", "REQUIRED", "")

		recordsFlags = flag.NewFlagSet("records", flag.ContinueOnError)

		recordsDataFlags        = flag.NewFlagSet("data", flag.ExitOnError)
		recordsDataRecordIDFlag = recordsDataFlags.String("record-id", "REQUIRED", "")
		recordsDataAuthFlag     = recordsDataFlags.String("auth", "", "")

		recordsMetaFlags        = flag.NewFlagSet("meta", flag.ExitOnError)
		recordsMetaRecordIDFlag = recordsMetaFlags.String("record-id", "REQUIRED", "")
		recordsMetaAuthFlag     = recordsMetaFlags.String("auth", "", "")

		recordsResolvedFlags        = flag.NewFlagSet("resolved", flag.ExitOnError)
		recordsResolvedRecordIDFlag = recordsResolvedFlags.String("record-id", "REQUIRED", "")
		recordsResolvedAuthFlag     = recordsResolvedFlags.String("auth", "", "")

		sensorFlags = flag.NewFlagSet("sensor", flag.ContinueOnError)

		sensorMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		sensorDataFlags          = flag.NewFlagSet("data", flag.ExitOnError)
		sensorDataStartFlag      = sensorDataFlags.String("start", "", "")
		sensorDataEndFlag        = sensorDataFlags.String("end", "", "")
		sensorDataStationsFlag   = sensorDataFlags.String("stations", "", "")
		sensorDataSensorsFlag    = sensorDataFlags.String("sensors", "", "")
		sensorDataResolutionFlag = sensorDataFlags.String("resolution", "", "")
		sensorDataAggregateFlag  = sensorDataFlags.String("aggregate", "", "")
		sensorDataCompleteFlag   = sensorDataFlags.String("complete", "", "")
		sensorDataTailFlag       = sensorDataFlags.String("tail", "", "")
		sensorDataAuthFlag       = sensorDataFlags.String("auth", "REQUIRED", "")

		informationFlags = flag.NewFlagSet("information", flag.ContinueOnError)

		informationDeviceLayoutFlags        = flag.NewFlagSet("device- layout", flag.ExitOnError)
		informationDeviceLayoutDeviceIDFlag = informationDeviceLayoutFlags.String("device-id", "REQUIRED", "")
		informationDeviceLayoutAuthFlag     = informationDeviceLayoutFlags.String("auth", "REQUIRED", "")

		informationFirmwareStatisticsFlags    = flag.NewFlagSet("firmware- statistics", flag.ExitOnError)
		informationFirmwareStatisticsAuthFlag = informationFirmwareStatisticsFlags.String("auth", "REQUIRED", "")

		stationFlags = flag.NewFlagSet("station", flag.ContinueOnError)

		stationAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		stationAddBodyFlag = stationAddFlags.String("body", "REQUIRED", "")
		stationAddAuthFlag = stationAddFlags.String("auth", "REQUIRED", "")

		stationGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		stationGetIDFlag   = stationGetFlags.String("id", "REQUIRED", "")
		stationGetAuthFlag = stationGetFlags.String("auth", "REQUIRED", "")

		stationUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		stationUpdateBodyFlag = stationUpdateFlags.String("body", "REQUIRED", "")
		stationUpdateIDFlag   = stationUpdateFlags.String("id", "REQUIRED", "")
		stationUpdateAuthFlag = stationUpdateFlags.String("auth", "REQUIRED", "")

		stationListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		stationListMineAuthFlag = stationListMineFlags.String("auth", "REQUIRED", "")

		stationListProjectFlags    = flag.NewFlagSet("list- project", flag.ExitOnError)
		stationListProjectIDFlag   = stationListProjectFlags.String("id", "REQUIRED", "")
		stationListProjectAuthFlag = stationListProjectFlags.String("auth", "REQUIRED", "")

		stationPhotoFlags    = flag.NewFlagSet("photo", flag.ExitOnError)
		stationPhotoIDFlag   = stationPhotoFlags.String("id", "REQUIRED", "")
		stationPhotoAuthFlag = stationPhotoFlags.String("auth", "REQUIRED", "")

		tasksFlags = flag.NewFlagSet("tasks", flag.ContinueOnError)

		tasksFiveFlags = flag.NewFlagSet("five", flag.ExitOnError)

		testFlags = flag.NewFlagSet("test", flag.ContinueOnError)

		testGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		testGetIDFlag = testGetFlags.String("id", "REQUIRED", "")

		testErrorFlags = flag.NewFlagSet("error", flag.ExitOnError)

		testEmailFlags       = flag.NewFlagSet("email", flag.ExitOnError)
		testEmailAddressFlag = testEmailFlags.String("address", "REQUIRED", "")
		testEmailAuthFlag    = testEmailFlags.String("auth", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userRolesFlags    = flag.NewFlagSet("roles", flag.ExitOnError)
		userRolesAuthFlag = userRolesFlags.String("auth", "REQUIRED", "")

		userDeleteFlags      = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteUserIDFlag = userDeleteFlags.String("user-id", "REQUIRED", "")
		userDeleteAuthFlag   = userDeleteFlags.String("auth", "REQUIRED", "")

		userUploadPhotoFlags             = flag.NewFlagSet("upload- photo", flag.ExitOnError)
		userUploadPhotoContentTypeFlag   = userUploadPhotoFlags.String("content-type", "REQUIRED", "")
		userUploadPhotoContentLengthFlag = userUploadPhotoFlags.String("content-length", "REQUIRED", "")
		userUploadPhotoAuthFlag          = userUploadPhotoFlags.String("auth", "REQUIRED", "")
		userUploadPhotoStreamFlag        = userUploadPhotoFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		userDownloadPhotoFlags      = flag.NewFlagSet("download- photo", flag.ExitOnError)
		userDownloadPhotoUserIDFlag = userDownloadPhotoFlags.String("user-id", "REQUIRED", "")

		userLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		userLoginBodyFlag = userLoginFlags.String("body", "REQUIRED", "")

		userRecoveryLookupFlags    = flag.NewFlagSet("recovery- lookup", flag.ExitOnError)
		userRecoveryLookupBodyFlag = userRecoveryLookupFlags.String("body", "REQUIRED", "")

		userRecoveryFlags    = flag.NewFlagSet("recovery", flag.ExitOnError)
		userRecoveryBodyFlag = userRecoveryFlags.String("body", "REQUIRED", "")

		userLogoutFlags    = flag.NewFlagSet("logout", flag.ExitOnError)
		userLogoutAuthFlag = userLogoutFlags.String("auth", "REQUIRED", "")

		userRefreshFlags    = flag.NewFlagSet("refresh", flag.ExitOnError)
		userRefreshBodyFlag = userRefreshFlags.String("body", "REQUIRED", "")

		userSendValidationFlags      = flag.NewFlagSet("send- validation", flag.ExitOnError)
		userSendValidationUserIDFlag = userSendValidationFlags.String("user-id", "REQUIRED", "")

		userValidateFlags     = flag.NewFlagSet("validate", flag.ExitOnError)
		userValidateTokenFlag = userValidateFlags.String("token", "REQUIRED", "")

		userAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		userAddBodyFlag = userAddFlags.String("body", "REQUIRED", "")

		userUpdateFlags      = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag   = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateUserIDFlag = userUpdateFlags.String("user-id", "REQUIRED", "")
		userUpdateAuthFlag   = userUpdateFlags.String("auth", "REQUIRED", "")

		userChangePasswordFlags      = flag.NewFlagSet("change- password", flag.ExitOnError)
		userChangePasswordBodyFlag   = userChangePasswordFlags.String("body", "REQUIRED", "")
		userChangePasswordUserIDFlag = userChangePasswordFlags.String("user-id", "REQUIRED", "")
		userChangePasswordAuthFlag   = userChangePasswordFlags.String("auth", "REQUIRED", "")

		userGetCurrentFlags    = flag.NewFlagSet("get- current", flag.ExitOnError)
		userGetCurrentAuthFlag = userGetCurrentFlags.String("auth", "REQUIRED", "")

		userListByProjectFlags         = flag.NewFlagSet("list- by- project", flag.ExitOnError)
		userListByProjectProjectIDFlag = userListByProjectFlags.String("project-id", "REQUIRED", "")
		userListByProjectAuthFlag      = userListByProjectFlags.String("auth", "REQUIRED", "")

		userIssueTransmissionTokenFlags    = flag.NewFlagSet("issue- transmission- token", flag.ExitOnError)
		userIssueTransmissionTokenAuthFlag = userIssueTransmissionTokenFlags.String("auth", "REQUIRED", "")

		userProjectRolesFlags = flag.NewFlagSet("project- roles", flag.ExitOnError)

		userAdminDeleteFlags    = flag.NewFlagSet("admin- delete", flag.ExitOnError)
		userAdminDeleteBodyFlag = userAdminDeleteFlags.String("body", "REQUIRED", "")
		userAdminDeleteAuthFlag = userAdminDeleteFlags.String("auth", "REQUIRED", "")
	)
	activityFlags.Usage = activityUsage
	activityStationFlags.Usage = activityStationUsage
	activityProjectFlags.Usage = activityProjectUsage

	firmwareFlags.Usage = firmwareUsage
	firmwareDownloadFlags.Usage = firmwareDownloadUsage
	firmwareAddFlags.Usage = firmwareAddUsage
	firmwareListFlags.Usage = firmwareListUsage
	firmwareDeleteFlags.Usage = firmwareDeleteUsage

	followingFlags.Usage = followingUsage
	followingFollowFlags.Usage = followingFollowUsage
	followingUnfollowFlags.Usage = followingUnfollowUsage
	followingFollowersFlags.Usage = followingFollowersUsage

	ingestionFlags.Usage = ingestionUsage
	ingestionProcessPendingFlags.Usage = ingestionProcessPendingUsage
	ingestionProcessStationFlags.Usage = ingestionProcessStationUsage
	ingestionProcessIngestionFlags.Usage = ingestionProcessIngestionUsage
	ingestionDeleteFlags.Usage = ingestionDeleteUsage

	modulesFlags.Usage = modulesUsage
	modulesMetaFlags.Usage = modulesMetaUsage

	notesFlags.Usage = notesUsage
	notesUpdateFlags.Usage = notesUpdateUsage
	notesGetFlags.Usage = notesGetUsage
	notesMediaFlags.Usage = notesMediaUsage
	notesUploadFlags.Usage = notesUploadUsage

	projectFlags.Usage = projectUsage
	projectAddUpdateFlags.Usage = projectAddUpdateUsage
	projectDeleteUpdateFlags.Usage = projectDeleteUpdateUsage
	projectModifyUpdateFlags.Usage = projectModifyUpdateUsage
	projectInvitesFlags.Usage = projectInvitesUsage
	projectLookupInviteFlags.Usage = projectLookupInviteUsage
	projectAcceptInviteFlags.Usage = projectAcceptInviteUsage
	projectRejectInviteFlags.Usage = projectRejectInviteUsage
	projectAddFlags.Usage = projectAddUsage
	projectUpdateFlags.Usage = projectUpdateUsage
	projectGetFlags.Usage = projectGetUsage
	projectListCommunityFlags.Usage = projectListCommunityUsage
	projectListMineFlags.Usage = projectListMineUsage
	projectInviteFlags.Usage = projectInviteUsage
	projectRemoveUserFlags.Usage = projectRemoveUserUsage
	projectAddStationFlags.Usage = projectAddStationUsage
	projectRemoveStationFlags.Usage = projectRemoveStationUsage
	projectDeleteFlags.Usage = projectDeleteUsage
	projectUploadMediaFlags.Usage = projectUploadMediaUsage
	projectDownloadMediaFlags.Usage = projectDownloadMediaUsage

	recordsFlags.Usage = recordsUsage
	recordsDataFlags.Usage = recordsDataUsage
	recordsMetaFlags.Usage = recordsMetaUsage
	recordsResolvedFlags.Usage = recordsResolvedUsage

	sensorFlags.Usage = sensorUsage
	sensorMetaFlags.Usage = sensorMetaUsage
	sensorDataFlags.Usage = sensorDataUsage

	informationFlags.Usage = informationUsage
	informationDeviceLayoutFlags.Usage = informationDeviceLayoutUsage
	informationFirmwareStatisticsFlags.Usage = informationFirmwareStatisticsUsage

	stationFlags.Usage = stationUsage
	stationAddFlags.Usage = stationAddUsage
	stationGetFlags.Usage = stationGetUsage
	stationUpdateFlags.Usage = stationUpdateUsage
	stationListMineFlags.Usage = stationListMineUsage
	stationListProjectFlags.Usage = stationListProjectUsage
	stationPhotoFlags.Usage = stationPhotoUsage

	tasksFlags.Usage = tasksUsage
	tasksFiveFlags.Usage = tasksFiveUsage

	testFlags.Usage = testUsage
	testGetFlags.Usage = testGetUsage
	testErrorFlags.Usage = testErrorUsage
	testEmailFlags.Usage = testEmailUsage

	userFlags.Usage = userUsage
	userRolesFlags.Usage = userRolesUsage
	userDeleteFlags.Usage = userDeleteUsage
	userUploadPhotoFlags.Usage = userUploadPhotoUsage
	userDownloadPhotoFlags.Usage = userDownloadPhotoUsage
	userLoginFlags.Usage = userLoginUsage
	userRecoveryLookupFlags.Usage = userRecoveryLookupUsage
	userRecoveryFlags.Usage = userRecoveryUsage
	userLogoutFlags.Usage = userLogoutUsage
	userRefreshFlags.Usage = userRefreshUsage
	userSendValidationFlags.Usage = userSendValidationUsage
	userValidateFlags.Usage = userValidateUsage
	userAddFlags.Usage = userAddUsage
	userUpdateFlags.Usage = userUpdateUsage
	userChangePasswordFlags.Usage = userChangePasswordUsage
	userGetCurrentFlags.Usage = userGetCurrentUsage
	userListByProjectFlags.Usage = userListByProjectUsage
	userIssueTransmissionTokenFlags.Usage = userIssueTransmissionTokenUsage
	userProjectRolesFlags.Usage = userProjectRolesUsage
	userAdminDeleteFlags.Usage = userAdminDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "activity":
			svcf = activityFlags
		case "firmware":
			svcf = firmwareFlags
		case "following":
			svcf = followingFlags
		case "ingestion":
			svcf = ingestionFlags
		case "modules":
			svcf = modulesFlags
		case "notes":
			svcf = notesFlags
		case "project":
			svcf = projectFlags
		case "records":
			svcf = recordsFlags
		case "sensor":
			svcf = sensorFlags
		case "information":
			svcf = informationFlags
		case "station":
			svcf = stationFlags
		case "tasks":
			svcf = tasksFlags
		case "test":
			svcf = testFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "activity":
			switch epn {
			case "station":
				epf = activityStationFlags

			case "project":
				epf = activityProjectFlags

			}

		case "firmware":
			switch epn {
			case "download":
				epf = firmwareDownloadFlags

			case "add":
				epf = firmwareAddFlags

			case "list":
				epf = firmwareListFlags

			case "delete":
				epf = firmwareDeleteFlags

			}

		case "following":
			switch epn {
			case "follow":
				epf = followingFollowFlags

			case "unfollow":
				epf = followingUnfollowFlags

			case "followers":
				epf = followingFollowersFlags

			}

		case "ingestion":
			switch epn {
			case "process- pending":
				epf = ingestionProcessPendingFlags

			case "process- station":
				epf = ingestionProcessStationFlags

			case "process- ingestion":
				epf = ingestionProcessIngestionFlags

			case "delete":
				epf = ingestionDeleteFlags

			}

		case "modules":
			switch epn {
			case "meta":
				epf = modulesMetaFlags

			}

		case "notes":
			switch epn {
			case "update":
				epf = notesUpdateFlags

			case "get":
				epf = notesGetFlags

			case "media":
				epf = notesMediaFlags

			case "upload":
				epf = notesUploadFlags

			}

		case "project":
			switch epn {
			case "add- update":
				epf = projectAddUpdateFlags

			case "delete- update":
				epf = projectDeleteUpdateFlags

			case "modify- update":
				epf = projectModifyUpdateFlags

			case "invites":
				epf = projectInvitesFlags

			case "lookup- invite":
				epf = projectLookupInviteFlags

			case "accept- invite":
				epf = projectAcceptInviteFlags

			case "reject- invite":
				epf = projectRejectInviteFlags

			case "add":
				epf = projectAddFlags

			case "update":
				epf = projectUpdateFlags

			case "get":
				epf = projectGetFlags

			case "list- community":
				epf = projectListCommunityFlags

			case "list- mine":
				epf = projectListMineFlags

			case "invite":
				epf = projectInviteFlags

			case "remove- user":
				epf = projectRemoveUserFlags

			case "add- station":
				epf = projectAddStationFlags

			case "remove- station":
				epf = projectRemoveStationFlags

			case "delete":
				epf = projectDeleteFlags

			case "upload- media":
				epf = projectUploadMediaFlags

			case "download- media":
				epf = projectDownloadMediaFlags

			}

		case "records":
			switch epn {
			case "data":
				epf = recordsDataFlags

			case "meta":
				epf = recordsMetaFlags

			case "resolved":
				epf = recordsResolvedFlags

			}

		case "sensor":
			switch epn {
			case "meta":
				epf = sensorMetaFlags

			case "data":
				epf = sensorDataFlags

			}

		case "information":
			switch epn {
			case "device- layout":
				epf = informationDeviceLayoutFlags

			case "firmware- statistics":
				epf = informationFirmwareStatisticsFlags

			}

		case "station":
			switch epn {
			case "add":
				epf = stationAddFlags

			case "get":
				epf = stationGetFlags

			case "update":
				epf = stationUpdateFlags

			case "list- mine":
				epf = stationListMineFlags

			case "list- project":
				epf = stationListProjectFlags

			case "photo":
				epf = stationPhotoFlags

			}

		case "tasks":
			switch epn {
			case "five":
				epf = tasksFiveFlags

			}

		case "test":
			switch epn {
			case "get":
				epf = testGetFlags

			case "error":
				epf = testErrorFlags

			case "email":
				epf = testEmailFlags

			}

		case "user":
			switch epn {
			case "roles":
				epf = userRolesFlags

			case "delete":
				epf = userDeleteFlags

			case "upload- photo":
				epf = userUploadPhotoFlags

			case "download- photo":
				epf = userDownloadPhotoFlags

			case "login":
				epf = userLoginFlags

			case "recovery- lookup":
				epf = userRecoveryLookupFlags

			case "recovery":
				epf = userRecoveryFlags

			case "logout":
				epf = userLogoutFlags

			case "refresh":
				epf = userRefreshFlags

			case "send- validation":
				epf = userSendValidationFlags

			case "validate":
				epf = userValidateFlags

			case "add":
				epf = userAddFlags

			case "update":
				epf = userUpdateFlags

			case "change- password":
				epf = userChangePasswordFlags

			case "get- current":
				epf = userGetCurrentFlags

			case "list- by- project":
				epf = userListByProjectFlags

			case "issue- transmission- token":
				epf = userIssueTransmissionTokenFlags

			case "project- roles":
				epf = userProjectRolesFlags

			case "admin- delete":
				epf = userAdminDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "activity":
			c := activityc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "station":
				endpoint = c.Station()
				data, err = activityc.BuildStationPayload(*activityStationIDFlag, *activityStationPageFlag, *activityStationAuthFlag)
			case "project":
				endpoint = c.Project()
				data, err = activityc.BuildProjectPayload(*activityProjectIDFlag, *activityProjectPageFlag, *activityProjectAuthFlag)
			}
		case "firmware":
			c := firmwarec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "download":
				endpoint = c.Download()
				data, err = firmwarec.BuildDownloadPayload(*firmwareDownloadFirmwareIDFlag)
			case "add":
				endpoint = c.Add()
				data, err = firmwarec.BuildAddPayload(*firmwareAddBodyFlag, *firmwareAddAuthFlag)
			case "list":
				endpoint = c.List()
				data, err = firmwarec.BuildListPayload(*firmwareListModuleFlag, *firmwareListProfileFlag, *firmwareListPageSizeFlag, *firmwareListPageFlag, *firmwareListAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = firmwarec.BuildDeletePayload(*firmwareDeleteFirmwareIDFlag, *firmwareDeleteAuthFlag)
			}
		case "following":
			c := followingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "follow":
				endpoint = c.Follow()
				data, err = followingc.BuildFollowPayload(*followingFollowIDFlag, *followingFollowAuthFlag)
			case "unfollow":
				endpoint = c.Unfollow()
				data, err = followingc.BuildUnfollowPayload(*followingUnfollowIDFlag, *followingUnfollowAuthFlag)
			case "followers":
				endpoint = c.Followers()
				data, err = followingc.BuildFollowersPayload(*followingFollowersIDFlag, *followingFollowersPageFlag)
			}
		case "ingestion":
			c := ingestionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "process- pending":
				endpoint = c.ProcessPending()
				data, err = ingestionc.BuildProcessPendingPayload(*ingestionProcessPendingAuthFlag)
			case "process- station":
				endpoint = c.ProcessStation()
				data, err = ingestionc.BuildProcessStationPayload(*ingestionProcessStationStationIDFlag, *ingestionProcessStationCompletelyFlag, *ingestionProcessStationAuthFlag)
			case "process- ingestion":
				endpoint = c.ProcessIngestion()
				data, err = ingestionc.BuildProcessIngestionPayload(*ingestionProcessIngestionIngestionIDFlag, *ingestionProcessIngestionAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = ingestionc.BuildDeletePayload(*ingestionDeleteIngestionIDFlag, *ingestionDeleteAuthFlag)
			}
		case "modules":
			c := modulesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			}
		case "notes":
			c := notesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update":
				endpoint = c.Update()
				data, err = notesc.BuildUpdatePayload(*notesUpdateBodyFlag, *notesUpdateStationIDFlag, *notesUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = notesc.BuildGetPayload(*notesGetStationIDFlag, *notesGetAuthFlag)
			case "media":
				endpoint = c.Media()
				data, err = notesc.BuildMediaPayload(*notesMediaMediaIDFlag, *notesMediaAuthFlag)
			case "upload":
				endpoint = c.Upload()
				data, err = notesc.BuildUploadPayload(*notesUploadStationIDFlag, *notesUploadKeyFlag, *notesUploadContentTypeFlag, *notesUploadContentLengthFlag, *notesUploadAuthFlag)
				if err == nil {
					data, err = notesc.BuildUploadStreamPayload(data, *notesUploadStreamFlag)
				}
			}
		case "project":
			c := projectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add- update":
				endpoint = c.AddUpdate()
				data, err = projectc.BuildAddUpdatePayload(*projectAddUpdateBodyFlag, *projectAddUpdateProjectIDFlag, *projectAddUpdateAuthFlag)
			case "delete- update":
				endpoint = c.DeleteUpdate()
				data, err = projectc.BuildDeleteUpdatePayload(*projectDeleteUpdateProjectIDFlag, *projectDeleteUpdateUpdateIDFlag, *projectDeleteUpdateAuthFlag)
			case "modify- update":
				endpoint = c.ModifyUpdate()
				data, err = projectc.BuildModifyUpdatePayload(*projectModifyUpdateBodyFlag, *projectModifyUpdateProjectIDFlag, *projectModifyUpdateUpdateIDFlag, *projectModifyUpdateAuthFlag)
			case "invites":
				endpoint = c.Invites()
				data, err = projectc.BuildInvitesPayload(*projectInvitesAuthFlag)
			case "lookup- invite":
				endpoint = c.LookupInvite()
				data, err = projectc.BuildLookupInvitePayload(*projectLookupInviteTokenFlag, *projectLookupInviteAuthFlag)
			case "accept- invite":
				endpoint = c.AcceptInvite()
				data, err = projectc.BuildAcceptInvitePayload(*projectAcceptInviteIDFlag, *projectAcceptInviteTokenFlag, *projectAcceptInviteAuthFlag)
			case "reject- invite":
				endpoint = c.RejectInvite()
				data, err = projectc.BuildRejectInvitePayload(*projectRejectInviteIDFlag, *projectRejectInviteTokenFlag, *projectRejectInviteAuthFlag)
			case "add":
				endpoint = c.Add()
				data, err = projectc.BuildAddPayload(*projectAddBodyFlag, *projectAddAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = projectc.BuildUpdatePayload(*projectUpdateBodyFlag, *projectUpdateProjectIDFlag, *projectUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = projectc.BuildGetPayload(*projectGetProjectIDFlag, *projectGetAuthFlag)
			case "list- community":
				endpoint = c.ListCommunity()
				data, err = projectc.BuildListCommunityPayload(*projectListCommunityAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = projectc.BuildListMinePayload(*projectListMineAuthFlag)
			case "invite":
				endpoint = c.Invite()
				data, err = projectc.BuildInvitePayload(*projectInviteBodyFlag, *projectInviteProjectIDFlag, *projectInviteAuthFlag)
			case "remove- user":
				endpoint = c.RemoveUser()
				data, err = projectc.BuildRemoveUserPayload(*projectRemoveUserBodyFlag, *projectRemoveUserProjectIDFlag, *projectRemoveUserAuthFlag)
			case "add- station":
				endpoint = c.AddStation()
				data, err = projectc.BuildAddStationPayload(*projectAddStationProjectIDFlag, *projectAddStationStationIDFlag, *projectAddStationAuthFlag)
			case "remove- station":
				endpoint = c.RemoveStation()
				data, err = projectc.BuildRemoveStationPayload(*projectRemoveStationProjectIDFlag, *projectRemoveStationStationIDFlag, *projectRemoveStationAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = projectc.BuildDeletePayload(*projectDeleteProjectIDFlag, *projectDeleteAuthFlag)
			case "upload- media":
				endpoint = c.UploadMedia()
				data, err = projectc.BuildUploadMediaPayload(*projectUploadMediaProjectIDFlag, *projectUploadMediaContentTypeFlag, *projectUploadMediaContentLengthFlag, *projectUploadMediaAuthFlag)
				if err == nil {
					data, err = projectc.BuildUploadMediaStreamPayload(data, *projectUploadMediaStreamFlag)
				}
			case "download- media":
				endpoint = c.DownloadMedia()
				data, err = projectc.BuildDownloadMediaPayload(*projectDownloadMediaProjectIDFlag)
			}
		case "records":
			c := recordsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "data":
				endpoint = c.Data()
				data, err = recordsc.BuildDataPayload(*recordsDataRecordIDFlag, *recordsDataAuthFlag)
			case "meta":
				endpoint = c.Meta()
				data, err = recordsc.BuildMetaPayload(*recordsMetaRecordIDFlag, *recordsMetaAuthFlag)
			case "resolved":
				endpoint = c.Resolved()
				data, err = recordsc.BuildResolvedPayload(*recordsResolvedRecordIDFlag, *recordsResolvedAuthFlag)
			}
		case "sensor":
			c := sensorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			case "data":
				endpoint = c.Data()
				data, err = sensorc.BuildDataPayload(*sensorDataStartFlag, *sensorDataEndFlag, *sensorDataStationsFlag, *sensorDataSensorsFlag, *sensorDataResolutionFlag, *sensorDataAggregateFlag, *sensorDataCompleteFlag, *sensorDataTailFlag, *sensorDataAuthFlag)
			}
		case "information":
			c := informationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- layout":
				endpoint = c.DeviceLayout()
				data, err = informationc.BuildDeviceLayoutPayload(*informationDeviceLayoutDeviceIDFlag, *informationDeviceLayoutAuthFlag)
			case "firmware- statistics":
				endpoint = c.FirmwareStatistics()
				data, err = informationc.BuildFirmwareStatisticsPayload(*informationFirmwareStatisticsAuthFlag)
			}
		case "station":
			c := stationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = stationc.BuildAddPayload(*stationAddBodyFlag, *stationAddAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = stationc.BuildGetPayload(*stationGetIDFlag, *stationGetAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = stationc.BuildUpdatePayload(*stationUpdateBodyFlag, *stationUpdateIDFlag, *stationUpdateAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = stationc.BuildListMinePayload(*stationListMineAuthFlag)
			case "list- project":
				endpoint = c.ListProject()
				data, err = stationc.BuildListProjectPayload(*stationListProjectIDFlag, *stationListProjectAuthFlag)
			case "photo":
				endpoint = c.Photo()
				data, err = stationc.BuildPhotoPayload(*stationPhotoIDFlag, *stationPhotoAuthFlag)
			}
		case "tasks":
			c := tasksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "five":
				endpoint = c.Five()
				data = nil
			}
		case "test":
			c := testc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = testc.BuildGetPayload(*testGetIDFlag)
			case "error":
				endpoint = c.Error()
				data = nil
			case "email":
				endpoint = c.Email()
				data, err = testc.BuildEmailPayload(*testEmailAddressFlag, *testEmailAuthFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "roles":
				endpoint = c.Roles()
				data, err = userc.BuildRolesPayload(*userRolesAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteUserIDFlag, *userDeleteAuthFlag)
			case "upload- photo":
				endpoint = c.UploadPhoto()
				data, err = userc.BuildUploadPhotoPayload(*userUploadPhotoContentTypeFlag, *userUploadPhotoContentLengthFlag, *userUploadPhotoAuthFlag)
				if err == nil {
					data, err = userc.BuildUploadPhotoStreamPayload(data, *userUploadPhotoStreamFlag)
				}
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = userc.BuildDownloadPhotoPayload(*userDownloadPhotoUserIDFlag)
			case "login":
				endpoint = c.Login()
				data, err = userc.BuildLoginPayload(*userLoginBodyFlag)
			case "recovery- lookup":
				endpoint = c.RecoveryLookup()
				data, err = userc.BuildRecoveryLookupPayload(*userRecoveryLookupBodyFlag)
			case "recovery":
				endpoint = c.Recovery()
				data, err = userc.BuildRecoveryPayload(*userRecoveryBodyFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = userc.BuildLogoutPayload(*userLogoutAuthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = userc.BuildRefreshPayload(*userRefreshBodyFlag)
			case "send- validation":
				endpoint = c.SendValidation()
				data, err = userc.BuildSendValidationPayload(*userSendValidationUserIDFlag)
			case "validate":
				endpoint = c.Validate()
				data, err = userc.BuildValidatePayload(*userValidateTokenFlag)
			case "add":
				endpoint = c.Add()
				data, err = userc.BuildAddPayload(*userAddBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateUserIDFlag, *userUpdateAuthFlag)
			case "change- password":
				endpoint = c.ChangePassword()
				data, err = userc.BuildChangePasswordPayload(*userChangePasswordBodyFlag, *userChangePasswordUserIDFlag, *userChangePasswordAuthFlag)
			case "get- current":
				endpoint = c.GetCurrent()
				data, err = userc.BuildGetCurrentPayload(*userGetCurrentAuthFlag)
			case "list- by- project":
				endpoint = c.ListByProject()
				data, err = userc.BuildListByProjectPayload(*userListByProjectProjectIDFlag, *userListByProjectAuthFlag)
			case "issue- transmission- token":
				endpoint = c.IssueTransmissionToken()
				data, err = userc.BuildIssueTransmissionTokenPayload(*userIssueTransmissionTokenAuthFlag)
			case "project- roles":
				endpoint = c.ProjectRoles()
				data = nil
			case "admin- delete":
				endpoint = c.AdminDelete()
				data, err = userc.BuildAdminDeletePayload(*userAdminDeleteBodyFlag, *userAdminDeleteAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// activityUsage displays the usage of the activity command and its subcommands.
func activityUsage() {
	fmt.Fprintf(os.Stderr, `Service is the activity service interface.
Usage:
    %s [globalflags] activity COMMAND [flags]

COMMAND:
    station: Station implements station.
    project: Project implements project.

Additional help:
    %s activity COMMAND --help
`, os.Args[0], os.Args[0])
}
func activityStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity station -id INT64 -page INT64 -auth STRING

Station implements station.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity station --id 8390865970516205144 --page 7018208357619660300 --auth "Facilis quasi aut placeat."
`, os.Args[0])
}

func activityProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity project -id INT64 -page INT64 -auth STRING

Project implements project.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity project --id 3108946237689254518 --page 1315465580019025478 --auth "Aut tempora."
`, os.Args[0])
}

// firmwareUsage displays the usage of the firmware command and its subcommands.
func firmwareUsage() {
	fmt.Fprintf(os.Stderr, `Service is the firmware service interface.
Usage:
    %s [globalflags] firmware COMMAND [flags]

COMMAND:
    download: Download implements download.
    add: Add implements add.
    list: List implements list.
    delete: Delete implements delete.

Additional help:
    %s firmware COMMAND --help
`, os.Args[0], os.Args[0])
}
func firmwareDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware download -firmware-id INT32

Download implements download.
    -firmware-id INT32: 

Example:
    `+os.Args[0]+` firmware download --firmware-id 87940682
`, os.Args[0])
}

func firmwareAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware add --body '{
      "etag": "Dolores ut odit.",
      "meta": "Impedit ipsam enim minima recusandae modi aliquid.",
      "module": "Animi est rerum similique architecto.",
      "profile": "Et vero aut qui.",
      "url": "Dolor eveniet ipsum aperiam et eaque."
   }' --auth "Qui dolores sit."
`, os.Args[0])
}

func firmwareListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware list -module STRING -profile STRING -page-size INT32 -page INT32 -auth STRING

List implements list.
    -module STRING: 
    -profile STRING: 
    -page-size INT32: 
    -page INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware list --module "Nostrum occaecati facilis placeat dolorem." --profile "Minima rerum vel." --page-size 1257052476 --page 794158098 --auth "Cumque consequuntur enim."
`, os.Args[0])
}

func firmwareDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware delete -firmware-id INT32 -auth STRING

Delete implements delete.
    -firmware-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware delete --firmware-id 1670045520 --auth "Et aliquid cupiditate omnis odio et magnam."
`, os.Args[0])
}

// followingUsage displays the usage of the following command and its
// subcommands.
func followingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the following service interface.
Usage:
    %s [globalflags] following COMMAND [flags]

COMMAND:
    follow: Follow implements follow.
    unfollow: Unfollow implements unfollow.
    followers: Followers implements followers.

Additional help:
    %s following COMMAND --help
`, os.Args[0], os.Args[0])
}
func followingFollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following follow -id INT64 -auth STRING

Follow implements follow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following follow --id 2475358697457025226 --auth "Sint dolore consequatur tenetur aut minima minima."
`, os.Args[0])
}

func followingUnfollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following unfollow -id INT64 -auth STRING

Unfollow implements unfollow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following unfollow --id 7567329844611633168 --auth "Et nam."
`, os.Args[0])
}

func followingFollowersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following followers -id INT64 -page INT64

Followers implements followers.
    -id INT64: 
    -page INT64: 

Example:
    `+os.Args[0]+` following followers --id 4087211270136255947 --page 1386329139824675459
`, os.Args[0])
}

// ingestionUsage displays the usage of the ingestion command and its
// subcommands.
func ingestionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ingestion service interface.
Usage:
    %s [globalflags] ingestion COMMAND [flags]

COMMAND:
    process- pending: ProcessPending implements process pending.
    process- station: ProcessStation implements process station.
    process- ingestion: ProcessIngestion implements process ingestion.
    delete: Delete implements delete.

Additional help:
    %s ingestion COMMAND --help
`, os.Args[0], os.Args[0])
}
func ingestionProcessPendingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- pending -auth STRING

ProcessPending implements process pending.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- pending --auth "Quia magni debitis."
`, os.Args[0])
}

func ingestionProcessStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- station -station-id INT32 -completely BOOL -auth STRING

ProcessStation implements process station.
    -station-id INT32: 
    -completely BOOL: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- station --station-id 855435317 --completely false --auth "Aut possimus dolorem nostrum."
`, os.Args[0])
}

func ingestionProcessIngestionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- ingestion -ingestion-id INT64 -auth STRING

ProcessIngestion implements process ingestion.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- ingestion --ingestion-id 7269941587337264470 --auth "Tempora placeat fuga numquam architecto."
`, os.Args[0])
}

func ingestionDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion delete -ingestion-id INT64 -auth STRING

Delete implements delete.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion delete --ingestion-id 7501686429962740971 --auth "Hic est adipisci."
`, os.Args[0])
}

// modulesUsage displays the usage of the modules command and its subcommands.
func modulesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the modules service interface.
Usage:
    %s [globalflags] modules COMMAND [flags]

COMMAND:
    meta: Meta implements meta.

Additional help:
    %s modules COMMAND --help
`, os.Args[0], os.Args[0])
}
func modulesMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] modules meta

Meta implements meta.

Example:
    `+os.Args[0]+` modules meta
`, os.Args[0])
}

// notesUsage displays the usage of the notes command and its subcommands.
func notesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the notes service interface.
Usage:
    %s [globalflags] notes COMMAND [flags]

COMMAND:
    update: Update implements update.
    get: Get implements get.
    media: Media implements media.
    upload: Upload implements upload.

Additional help:
    %s notes COMMAND --help
`, os.Args[0], os.Args[0])
}
func notesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes update -body JSON -station-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes update --body '{
      "notes": {
         "creating": [
            {
               "body": "Placeat earum odio iusto est reiciendis.",
               "key": "Nemo est hic et debitis.",
               "mediaIds": [
                  3465575395264144433,
                  8648786087331153504,
                  9181175210052199116
               ]
            },
            {
               "body": "Placeat earum odio iusto est reiciendis.",
               "key": "Nemo est hic et debitis.",
               "mediaIds": [
                  3465575395264144433,
                  8648786087331153504,
                  9181175210052199116
               ]
            }
         ],
         "notes": [
            {
               "body": "Molestias nobis tempore aut numquam.",
               "id": 1240222407672596801,
               "key": "Aut consequatur recusandae mollitia.",
               "mediaIds": [
                  4557606483361519510,
                  4982916238426154006,
                  5835085579399476144,
                  3754853937971941837
               ]
            },
            {
               "body": "Molestias nobis tempore aut numquam.",
               "id": 1240222407672596801,
               "key": "Aut consequatur recusandae mollitia.",
               "mediaIds": [
                  4557606483361519510,
                  4982916238426154006,
                  5835085579399476144,
                  3754853937971941837
               ]
            },
            {
               "body": "Molestias nobis tempore aut numquam.",
               "id": 1240222407672596801,
               "key": "Aut consequatur recusandae mollitia.",
               "mediaIds": [
                  4557606483361519510,
                  4982916238426154006,
                  5835085579399476144,
                  3754853937971941837
               ]
            },
            {
               "body": "Molestias nobis tempore aut numquam.",
               "id": 1240222407672596801,
               "key": "Aut consequatur recusandae mollitia.",
               "mediaIds": [
                  4557606483361519510,
                  4982916238426154006,
                  5835085579399476144,
                  3754853937971941837
               ]
            }
         ]
      }
   }' --station-id 1273397626 --auth "Neque rerum sunt consequatur nisi eum."
`, os.Args[0])
}

func notesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes get -station-id INT32 -auth STRING

Get implements get.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes get --station-id 1261147900 --auth "Voluptas consequatur reiciendis."
`, os.Args[0])
}

func notesMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes media -media-id INT32 -auth STRING

Media implements media.
    -media-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes media --media-id 1690635197 --auth "Eos impedit voluptates adipisci provident provident eum."
`, os.Args[0])
}

func notesUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes upload -station-id INT32 -key STRING -content-type STRING -content-length INT64 -auth STRING -stream STRING

Upload implements upload.
    -station-id INT32: 
    -key STRING: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` notes upload --station-id 879418110 --key "Optio quia voluptas." --content-type "Magnam enim sit qui." --content-length 2249572395302261741 --auth "Quidem libero rerum est consequatur." --stream "goa.png"
`, os.Args[0])
}

// projectUsage displays the usage of the project command and its subcommands.
func projectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the project service interface.
Usage:
    %s [globalflags] project COMMAND [flags]

COMMAND:
    add- update: AddUpdate implements add update.
    delete- update: DeleteUpdate implements delete update.
    modify- update: ModifyUpdate implements modify update.
    invites: Invites implements invites.
    lookup- invite: LookupInvite implements lookup invite.
    accept- invite: AcceptInvite implements accept invite.
    reject- invite: RejectInvite implements reject invite.
    add: Add implements add.
    update: Update implements update.
    get: Get implements get.
    list- community: ListCommunity implements list community.
    list- mine: ListMine implements list mine.
    invite: Invite implements invite.
    remove- user: RemoveUser implements remove user.
    add- station: AddStation implements add station.
    remove- station: RemoveStation implements remove station.
    delete: Delete implements delete.
    upload- media: UploadMedia implements upload media.
    download- media: DownloadMedia implements download media.

Additional help:
    %s project COMMAND --help
`, os.Args[0], os.Args[0])
}
func projectAddUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- update -body JSON -project-id INT32 -auth STRING

AddUpdate implements add update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- update --body '{
      "body": "Vitae non sed facilis nulla nobis."
   }' --project-id 259072790 --auth "Aut sunt iusto quibusdam."
`, os.Args[0])
}

func projectDeleteUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete- update -project-id INT32 -update-id INT64 -auth STRING

DeleteUpdate implements delete update.
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete- update --project-id 493533071 --update-id 2887383277237119418 --auth "Repudiandae nostrum aut assumenda necessitatibus laborum."
`, os.Args[0])
}

func projectModifyUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project modify- update -body JSON -project-id INT32 -update-id INT64 -auth STRING

ModifyUpdate implements modify update.
    -body JSON: 
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project modify- update --body '{
      "body": "Debitis praesentium quis voluptatem sunt similique aspernatur."
   }' --project-id 269870050 --update-id 1198379759276805375 --auth "Vel quaerat nemo dolor consequuntur autem dolorem."
`, os.Args[0])
}

func projectInvitesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invites -auth STRING

Invites implements invites.
    -auth STRING: 

Example:
    `+os.Args[0]+` project invites --auth "Molestiae amet accusamus sed maiores dolorem."
`, os.Args[0])
}

func projectLookupInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project lookup- invite -token STRING -auth STRING

LookupInvite implements lookup invite.
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project lookup- invite --token "Sunt aut adipisci voluptas inventore sapiente." --auth "Neque et."
`, os.Args[0])
}

func projectAcceptInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- invite -id INT64 -token STRING -auth STRING

AcceptInvite implements accept invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- invite --id 68901810599253858 --token "Enim blanditiis labore occaecati." --auth "Voluptas rerum quae nostrum ea doloribus."
`, os.Args[0])
}

func projectRejectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- invite -id INT64 -token STRING -auth STRING

RejectInvite implements reject invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- invite --id 5795080482282634195 --token "Voluptate optio." --auth "Vero suscipit quia."
`, os.Args[0])
}

func projectAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add --body '{
      "etag": "Dolores ut odit.",
      "meta": "Impedit ipsam enim minima recusandae modi aliquid.",
      "module": "Animi est rerum similique architecto.",
      "profile": "Et vero aut qui.",
      "url": "Dolor eveniet ipsum aperiam et eaque."
   }' --auth "Vero et illum."
`, os.Args[0])
}

func projectUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project update -body JSON -project-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project update --body '{
      "description": "Molestiae ad placeat exercitationem.",
      "endTime": "Odit ratione expedita numquam.",
      "goal": "Saepe iure.",
      "location": "Accusantium ab nesciunt omnis et.",
      "name": "Et non dolore est consequatur.",
      "private": false,
      "startTime": "Omnis saepe modi at maiores ullam voluptatem.",
      "tags": "Facere consequatur voluptate debitis rerum."
   }' --project-id 1220862141 --auth "Temporibus hic labore et tenetur labore officia."
`, os.Args[0])
}

func projectGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project get -project-id INT32 -auth STRING

Get implements get.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project get --project-id 1706677650 --auth "Voluptate dolorem ratione quo dignissimos ut blanditiis."
`, os.Args[0])
}

func projectListCommunityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- community -auth STRING

ListCommunity implements list community.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- community --auth "Officia dicta necessitatibus aut quod sit voluptatem."
`, os.Args[0])
}

func projectListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- mine --auth "Earum voluptate fugit."
`, os.Args[0])
}

func projectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invite -body JSON -project-id INT32 -auth STRING

Invite implements invite.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project invite --body '{
      "email": "Inventore laudantium libero et est animi inventore.",
      "role": 1752416585
   }' --project-id 230510544 --auth "Dolores non fuga autem."
`, os.Args[0])
}

func projectRemoveUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- user -body JSON -project-id INT32 -auth STRING

RemoveUser implements remove user.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- user --body '{
      "email": "Excepturi doloremque maxime eos voluptatibus."
   }' --project-id 78150485 --auth "Magnam aut velit temporibus."
`, os.Args[0])
}

func projectAddStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- station -project-id INT32 -station-id INT32 -auth STRING

AddStation implements add station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- station --project-id 818169681 --station-id 2131378649 --auth "Necessitatibus velit."
`, os.Args[0])
}

func projectRemoveStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- station -project-id INT32 -station-id INT32 -auth STRING

RemoveStation implements remove station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- station --project-id 1613336861 --station-id 1961663003 --auth "Quia culpa earum ut est."
`, os.Args[0])
}

func projectDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete -project-id INT32 -auth STRING

Delete implements delete.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete --project-id 1600239772 --auth "Placeat rerum pariatur sed qui."
`, os.Args[0])
}

func projectUploadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project upload- media -project-id INT32 -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadMedia implements upload media.
    -project-id INT32: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` project upload- media --project-id 492677074 --content-type "Aperiam incidunt provident quo." --content-length 947415164899744862 --auth "Aut aliquid voluptates harum dolore suscipit voluptas." --stream "goa.png"
`, os.Args[0])
}

func projectDownloadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project download- media -project-id INT32

DownloadMedia implements download media.
    -project-id INT32: 

Example:
    `+os.Args[0]+` project download- media --project-id 2133143862
`, os.Args[0])
}

// recordsUsage displays the usage of the records command and its subcommands.
func recordsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the records service interface.
Usage:
    %s [globalflags] records COMMAND [flags]

COMMAND:
    data: Data implements data.
    meta: Meta implements meta.
    resolved: Resolved implements resolved.

Additional help:
    %s records COMMAND --help
`, os.Args[0], os.Args[0])
}
func recordsDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records data -record-id INT64 -auth STRING

Data implements data.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records data --record-id 6363538238887504623 --auth "Sapiente quia."
`, os.Args[0])
}

func recordsMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records meta -record-id INT64 -auth STRING

Meta implements meta.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records meta --record-id 7383294305825931429 --auth "Ea iusto."
`, os.Args[0])
}

func recordsResolvedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records resolved -record-id INT64 -auth STRING

Resolved implements resolved.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records resolved --record-id 5891580365931221504 --auth "Alias sapiente animi eos."
`, os.Args[0])
}

// sensorUsage displays the usage of the sensor command and its subcommands.
func sensorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sensor service interface.
Usage:
    %s [globalflags] sensor COMMAND [flags]

COMMAND:
    meta: Meta implements meta.
    data: Data implements data.

Additional help:
    %s sensor COMMAND --help
`, os.Args[0], os.Args[0])
}
func sensorMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor meta

Meta implements meta.

Example:
    `+os.Args[0]+` sensor meta
`, os.Args[0])
}

func sensorDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor data -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

Data implements data.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor data --start 5730741186050450811 --end 2926035729083690051 --stations "Recusandae rerum voluptatem et." --sensors "Debitis possimus voluptate aut praesentium inventore." --resolution 418714098 --aggregate "Iusto harum alias." --complete false --tail 522406393 --auth "Provident ipsum ab odio at."
`, os.Args[0])
}

// informationUsage displays the usage of the information command and its
// subcommands.
func informationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the information service interface.
Usage:
    %s [globalflags] information COMMAND [flags]

COMMAND:
    device- layout: DeviceLayout implements device layout.
    firmware- statistics: FirmwareStatistics implements firmware statistics.

Additional help:
    %s information COMMAND --help
`, os.Args[0], os.Args[0])
}
func informationDeviceLayoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information device- layout -device-id STRING -auth STRING

DeviceLayout implements device layout.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` information device- layout --device-id "Est nostrum." --auth "Ab numquam."
`, os.Args[0])
}

func informationFirmwareStatisticsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information firmware- statistics -auth STRING

FirmwareStatistics implements firmware statistics.
    -auth STRING: 

Example:
    `+os.Args[0]+` information firmware- statistics --auth "Optio dicta maxime reiciendis ut dolore sequi."
`, os.Args[0])
}

// stationUsage displays the usage of the station command and its subcommands.
func stationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the station service interface.
Usage:
    %s [globalflags] station COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.
    update: Update implements update.
    list- mine: ListMine implements list mine.
    list- project: ListProject implements list project.
    photo: Photo implements photo.

Additional help:
    %s station COMMAND --help
`, os.Args[0], os.Args[0])
}
func stationAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station add --body '{
      "deviceId": "Assumenda numquam sapiente perspiciatis.",
      "locationName": "Dolore adipisci.",
      "name": "Quidem fuga.",
      "statusPb": "Repudiandae adipisci ut velit."
   }' --auth "Iste ex dolor."
`, os.Args[0])
}

func stationGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station get -id INT32 -auth STRING

Get implements get.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station get --id 77855117 --auth "Sunt dolor."
`, os.Args[0])
}

func stationUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station update -body JSON -id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station update --body '{
      "locationName": "Fugit et nostrum adipisci.",
      "name": "Similique vitae quae omnis.",
      "statusPb": "Enim eveniet quisquam nostrum dolorem vitae id."
   }' --id 490534861 --auth "Qui blanditiis adipisci illo sunt et."
`, os.Args[0])
}

func stationListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- mine --auth "Et omnis eveniet."
`, os.Args[0])
}

func stationListProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- project -id INT32 -auth STRING

ListProject implements list project.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- project --id 996579947 --auth "Ut similique eos consequuntur sequi."
`, os.Args[0])
}

func stationPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station photo -id INT32 -auth STRING

Photo implements photo.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station photo --id 332309470 --auth "Harum iure voluptas eum ut voluptas iusto."
`, os.Args[0])
}

// tasksUsage displays the usage of the tasks command and its subcommands.
func tasksUsage() {
	fmt.Fprintf(os.Stderr, `Service is the tasks service interface.
Usage:
    %s [globalflags] tasks COMMAND [flags]

COMMAND:
    five: Five implements five.

Additional help:
    %s tasks COMMAND --help
`, os.Args[0], os.Args[0])
}
func tasksFiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tasks five

Five implements five.

Example:
    `+os.Args[0]+` tasks five
`, os.Args[0])
}

// testUsage displays the usage of the test command and its subcommands.
func testUsage() {
	fmt.Fprintf(os.Stderr, `Service is the test service interface.
Usage:
    %s [globalflags] test COMMAND [flags]

COMMAND:
    get: Get implements get.
    error: Error implements error.
    email: Email implements email.

Additional help:
    %s test COMMAND --help
`, os.Args[0], os.Args[0])
}
func testGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test get -id INT64

Get implements get.
    -id INT64: 

Example:
    `+os.Args[0]+` test get --id 1373479920289118340
`, os.Args[0])
}

func testErrorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test error

Error implements error.

Example:
    `+os.Args[0]+` test error
`, os.Args[0])
}

func testEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test email -address STRING -auth STRING

Email implements email.
    -address STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` test email --address "Quidem consequatur corporis animi et aliquid." --auth "Dicta modi quam dolorem."
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    roles: Roles implements roles.
    delete: Delete implements delete.
    upload- photo: UploadPhoto implements upload photo.
    download- photo: DownloadPhoto implements download photo.
    login: Login implements login.
    recovery- lookup: RecoveryLookup implements recovery lookup.
    recovery: Recovery implements recovery.
    logout: Logout implements logout.
    refresh: Refresh implements refresh.
    send- validation: SendValidation implements send validation.
    validate: Validate implements validate.
    add: Add implements add.
    update: Update implements update.
    change- password: ChangePassword implements change password.
    get- current: GetCurrent implements get current.
    list- by- project: ListByProject implements list by project.
    issue- transmission- token: IssueTransmissionToken implements issue transmission token.
    project- roles: ProjectRoles implements project roles.
    admin- delete: AdminDelete implements admin delete.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user roles -auth STRING

Roles implements roles.
    -auth STRING: 

Example:
    `+os.Args[0]+` user roles --auth "Ut dolorum fugiat distinctio ut."
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user delete -user-id INT32 -auth STRING

Delete implements delete.
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user delete --user-id 1701843080 --auth "Assumenda nostrum."
`, os.Args[0])
}

func userUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user upload- photo -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadPhoto implements upload photo.
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` user upload- photo --content-type "Est eos ipsum." --content-length 5474122224693913093 --auth "Sint exercitationem voluptate quis." --stream "goa.png"
`, os.Args[0])
}

func userDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user download- photo -user-id INT32

DownloadPhoto implements download photo.
    -user-id INT32: 

Example:
    `+os.Args[0]+` user download- photo --user-id 901307722
`, os.Args[0])
}

func userLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user login -body JSON

Login implements login.
    -body JSON: 

Example:
    `+os.Args[0]+` user login --body '{
      "email": "tamara.sporer@sporer.biz",
      "password": "0ts"
   }'
`, os.Args[0])
}

func userRecoveryLookupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery- lookup -body JSON

RecoveryLookup implements recovery lookup.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery- lookup --body '{
      "email": "Autem non dolorem dolor qui occaecati et."
   }'
`, os.Args[0])
}

func userRecoveryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery -body JSON

Recovery implements recovery.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery --body '{
      "password": "j7f",
      "token": "Quia eos deleniti esse."
   }'
`, os.Args[0])
}

func userLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user logout -auth STRING

Logout implements logout.
    -auth STRING: 

Example:
    `+os.Args[0]+` user logout --auth "Dolor nemo repudiandae."
`, os.Args[0])
}

func userRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user refresh -body JSON

Refresh implements refresh.
    -body JSON: 

Example:
    `+os.Args[0]+` user refresh --body '{
      "refreshToken": "Quibusdam quis rerum reiciendis enim reprehenderit."
   }'
`, os.Args[0])
}

func userSendValidationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user send- validation -user-id INT32

SendValidation implements send validation.
    -user-id INT32: 

Example:
    `+os.Args[0]+` user send- validation --user-id 502717277
`, os.Args[0])
}

func userValidateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user validate -token STRING

Validate implements validate.
    -token STRING: 

Example:
    `+os.Args[0]+` user validate --token "Deserunt quia quaerat dolores odio aut omnis."
`, os.Args[0])
}

func userAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user add -body JSON

Add implements add.
    -body JSON: 

Example:
    `+os.Args[0]+` user add --body '{
      "etag": "Dolores ut odit.",
      "meta": "Impedit ipsam enim minima recusandae modi aliquid.",
      "module": "Animi est rerum similique architecto.",
      "profile": "Et vero aut qui.",
      "url": "Dolor eveniet ipsum aperiam et eaque."
   }'
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update -body JSON -user-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user update --body '{
      "description": "Molestiae ad placeat exercitationem.",
      "endTime": "Odit ratione expedita numquam.",
      "goal": "Saepe iure.",
      "location": "Accusantium ab nesciunt omnis et.",
      "name": "Et non dolore est consequatur.",
      "private": false,
      "startTime": "Omnis saepe modi at maiores ullam voluptatem.",
      "tags": "Facere consequatur voluptate debitis rerum."
   }' --user-id 1483691317 --auth "Quam quos accusamus laborum."
`, os.Args[0])
}

func userChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user change- password -body JSON -user-id INT32 -auth STRING

ChangePassword implements change password.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user change- password --body '{
      "newPassword": "f8i",
      "oldPassword": "w0y"
   }' --user-id 559940136 --auth "Nam et."
`, os.Args[0])
}

func userGetCurrentUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get- current -auth STRING

GetCurrent implements get current.
    -auth STRING: 

Example:
    `+os.Args[0]+` user get- current --auth "Impedit qui."
`, os.Args[0])
}

func userListByProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user list- by- project -project-id INT32 -auth STRING

ListByProject implements list by project.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user list- by- project --project-id 1492492634 --auth "Laborum sint."
`, os.Args[0])
}

func userIssueTransmissionTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user issue- transmission- token -auth STRING

IssueTransmissionToken implements issue transmission token.
    -auth STRING: 

Example:
    `+os.Args[0]+` user issue- transmission- token --auth "Voluptatem quam tenetur officia."
`, os.Args[0])
}

func userProjectRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user project- roles

ProjectRoles implements project roles.

Example:
    `+os.Args[0]+` user project- roles
`, os.Args[0])
}

func userAdminDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user admin- delete -body JSON -auth STRING

AdminDelete implements admin delete.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user admin- delete --body '{
      "email": "Ut mollitia quas tenetur quae aut.",
      "password": "Est laudantium eius deleniti quis voluptatem non."
   }' --auth "Debitis dolor officia qui."
`, os.Args[0])
}
