// Code generated by goa v3.1.2, DO NOT EDIT.
//
// activity HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	activityc "github.com/fieldkit/cloud/server/api/gen/http/activity/client"
	followingc "github.com/fieldkit/cloud/server/api/gen/http/following/client"
	informationc "github.com/fieldkit/cloud/server/api/gen/http/information/client"
	ingestionc "github.com/fieldkit/cloud/server/api/gen/http/ingestion/client"
	modulesc "github.com/fieldkit/cloud/server/api/gen/http/modules/client"
	notesc "github.com/fieldkit/cloud/server/api/gen/http/notes/client"
	projectc "github.com/fieldkit/cloud/server/api/gen/http/project/client"
	sensorc "github.com/fieldkit/cloud/server/api/gen/http/sensor/client"
	stationc "github.com/fieldkit/cloud/server/api/gen/http/station/client"
	tasksc "github.com/fieldkit/cloud/server/api/gen/http/tasks/client"
	testc "github.com/fieldkit/cloud/server/api/gen/http/test/client"
	userc "github.com/fieldkit/cloud/server/api/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `activity (station|project)
following (follow|unfollow|followers)
ingestion (process- pending|process- station|process- ingestion|delete)
modules meta
notes (update|get|media|upload)
project (add- update|delete- update|modify- update|invites|lookup- invite|accept- invite|reject- invite)
sensor (meta|data)
information (device- layout|firmware- statistics)
station (add|get|update|list- mine|list- project|photo)
tasks five
test (get|error|email)
user (roles|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` activity station --id 3853494286558507563 --page 2255084724151658447 --auth "Facilis aut maiores reiciendis."` + "\n" +
		os.Args[0] + ` following follow --id 8526550986221361521 --auth "Veniam esse et repellendus sit unde."` + "\n" +
		os.Args[0] + ` ingestion process- pending --auth "Amet aliquam aut est."` + "\n" +
		os.Args[0] + ` modules meta` + "\n" +
		os.Args[0] + ` notes update --body '{
      "notes": {
         "creating": [
            {
               "body": "Perferendis facilis mollitia vel aut.",
               "key": "Ea dolorum consequatur alias beatae magni.",
               "mediaIds": [
                  4901102416227285199,
                  8553307744897445340,
                  3175563408179649650
               ]
            },
            {
               "body": "Perferendis facilis mollitia vel aut.",
               "key": "Ea dolorum consequatur alias beatae magni.",
               "mediaIds": [
                  4901102416227285199,
                  8553307744897445340,
                  3175563408179649650
               ]
            }
         ],
         "notes": [
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            },
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            },
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            }
         ]
      }
   }' --station-id 767778983 --auth "Illum veniam deserunt sint fuga ut aut."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		activityFlags = flag.NewFlagSet("activity", flag.ContinueOnError)

		activityStationFlags    = flag.NewFlagSet("station", flag.ExitOnError)
		activityStationIDFlag   = activityStationFlags.String("id", "REQUIRED", "")
		activityStationPageFlag = activityStationFlags.String("page", "", "")
		activityStationAuthFlag = activityStationFlags.String("auth", "", "")

		activityProjectFlags    = flag.NewFlagSet("project", flag.ExitOnError)
		activityProjectIDFlag   = activityProjectFlags.String("id", "REQUIRED", "")
		activityProjectPageFlag = activityProjectFlags.String("page", "", "")
		activityProjectAuthFlag = activityProjectFlags.String("auth", "", "")

		followingFlags = flag.NewFlagSet("following", flag.ContinueOnError)

		followingFollowFlags    = flag.NewFlagSet("follow", flag.ExitOnError)
		followingFollowIDFlag   = followingFollowFlags.String("id", "REQUIRED", "")
		followingFollowAuthFlag = followingFollowFlags.String("auth", "", "")

		followingUnfollowFlags    = flag.NewFlagSet("unfollow", flag.ExitOnError)
		followingUnfollowIDFlag   = followingUnfollowFlags.String("id", "REQUIRED", "")
		followingUnfollowAuthFlag = followingUnfollowFlags.String("auth", "", "")

		followingFollowersFlags    = flag.NewFlagSet("followers", flag.ExitOnError)
		followingFollowersIDFlag   = followingFollowersFlags.String("id", "REQUIRED", "")
		followingFollowersPageFlag = followingFollowersFlags.String("page", "", "")

		ingestionFlags = flag.NewFlagSet("ingestion", flag.ContinueOnError)

		ingestionProcessPendingFlags    = flag.NewFlagSet("process- pending", flag.ExitOnError)
		ingestionProcessPendingAuthFlag = ingestionProcessPendingFlags.String("auth", "REQUIRED", "")

		ingestionProcessStationFlags          = flag.NewFlagSet("process- station", flag.ExitOnError)
		ingestionProcessStationStationIDFlag  = ingestionProcessStationFlags.String("station-id", "REQUIRED", "")
		ingestionProcessStationCompletelyFlag = ingestionProcessStationFlags.String("completely", "", "")
		ingestionProcessStationAuthFlag       = ingestionProcessStationFlags.String("auth", "REQUIRED", "")

		ingestionProcessIngestionFlags           = flag.NewFlagSet("process- ingestion", flag.ExitOnError)
		ingestionProcessIngestionIngestionIDFlag = ingestionProcessIngestionFlags.String("ingestion-id", "REQUIRED", "")
		ingestionProcessIngestionAuthFlag        = ingestionProcessIngestionFlags.String("auth", "REQUIRED", "")

		ingestionDeleteFlags           = flag.NewFlagSet("delete", flag.ExitOnError)
		ingestionDeleteIngestionIDFlag = ingestionDeleteFlags.String("ingestion-id", "REQUIRED", "")
		ingestionDeleteAuthFlag        = ingestionDeleteFlags.String("auth", "REQUIRED", "")

		modulesFlags = flag.NewFlagSet("modules", flag.ContinueOnError)

		modulesMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		notesFlags = flag.NewFlagSet("notes", flag.ContinueOnError)

		notesUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		notesUpdateBodyFlag      = notesUpdateFlags.String("body", "REQUIRED", "")
		notesUpdateStationIDFlag = notesUpdateFlags.String("station-id", "REQUIRED", "")
		notesUpdateAuthFlag      = notesUpdateFlags.String("auth", "REQUIRED", "")

		notesGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		notesGetStationIDFlag = notesGetFlags.String("station-id", "REQUIRED", "")
		notesGetAuthFlag      = notesGetFlags.String("auth", "REQUIRED", "")

		notesMediaFlags       = flag.NewFlagSet("media", flag.ExitOnError)
		notesMediaMediaIDFlag = notesMediaFlags.String("media-id", "REQUIRED", "")
		notesMediaAuthFlag    = notesMediaFlags.String("auth", "REQUIRED", "")

		notesUploadFlags             = flag.NewFlagSet("upload", flag.ExitOnError)
		notesUploadStationIDFlag     = notesUploadFlags.String("station-id", "REQUIRED", "")
		notesUploadKeyFlag           = notesUploadFlags.String("key", "REQUIRED", "")
		notesUploadAuthFlag          = notesUploadFlags.String("auth", "REQUIRED", "")
		notesUploadContentTypeFlag   = notesUploadFlags.String("content-type", "REQUIRED", "")
		notesUploadContentLengthFlag = notesUploadFlags.String("content-length", "REQUIRED", "")
		notesUploadStreamFlag        = notesUploadFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectFlags = flag.NewFlagSet("project", flag.ContinueOnError)

		projectAddUpdateFlags         = flag.NewFlagSet("add- update", flag.ExitOnError)
		projectAddUpdateBodyFlag      = projectAddUpdateFlags.String("body", "REQUIRED", "")
		projectAddUpdateProjectIDFlag = projectAddUpdateFlags.String("project-id", "REQUIRED", "")
		projectAddUpdateAuthFlag      = projectAddUpdateFlags.String("auth", "REQUIRED", "")

		projectDeleteUpdateFlags         = flag.NewFlagSet("delete- update", flag.ExitOnError)
		projectDeleteUpdateProjectIDFlag = projectDeleteUpdateFlags.String("project-id", "REQUIRED", "")
		projectDeleteUpdateUpdateIDFlag  = projectDeleteUpdateFlags.String("update-id", "REQUIRED", "")
		projectDeleteUpdateAuthFlag      = projectDeleteUpdateFlags.String("auth", "REQUIRED", "")

		projectModifyUpdateFlags         = flag.NewFlagSet("modify- update", flag.ExitOnError)
		projectModifyUpdateBodyFlag      = projectModifyUpdateFlags.String("body", "REQUIRED", "")
		projectModifyUpdateProjectIDFlag = projectModifyUpdateFlags.String("project-id", "REQUIRED", "")
		projectModifyUpdateUpdateIDFlag  = projectModifyUpdateFlags.String("update-id", "REQUIRED", "")
		projectModifyUpdateAuthFlag      = projectModifyUpdateFlags.String("auth", "REQUIRED", "")

		projectInvitesFlags    = flag.NewFlagSet("invites", flag.ExitOnError)
		projectInvitesAuthFlag = projectInvitesFlags.String("auth", "REQUIRED", "")

		projectLookupInviteFlags     = flag.NewFlagSet("lookup- invite", flag.ExitOnError)
		projectLookupInviteTokenFlag = projectLookupInviteFlags.String("token", "REQUIRED", "")
		projectLookupInviteAuthFlag  = projectLookupInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptInviteFlags     = flag.NewFlagSet("accept- invite", flag.ExitOnError)
		projectAcceptInviteIDFlag    = projectAcceptInviteFlags.String("id", "REQUIRED", "")
		projectAcceptInviteTokenFlag = projectAcceptInviteFlags.String("token", "", "")
		projectAcceptInviteAuthFlag  = projectAcceptInviteFlags.String("auth", "REQUIRED", "")

		projectRejectInviteFlags     = flag.NewFlagSet("reject- invite", flag.ExitOnError)
		projectRejectInviteIDFlag    = projectRejectInviteFlags.String("id", "REQUIRED", "")
		projectRejectInviteTokenFlag = projectRejectInviteFlags.String("token", "", "")
		projectRejectInviteAuthFlag  = projectRejectInviteFlags.String("auth", "REQUIRED", "")

		sensorFlags = flag.NewFlagSet("sensor", flag.ContinueOnError)

		sensorMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		sensorDataFlags          = flag.NewFlagSet("data", flag.ExitOnError)
		sensorDataStartFlag      = sensorDataFlags.String("start", "", "")
		sensorDataEndFlag        = sensorDataFlags.String("end", "", "")
		sensorDataStationsFlag   = sensorDataFlags.String("stations", "", "")
		sensorDataSensorsFlag    = sensorDataFlags.String("sensors", "", "")
		sensorDataResolutionFlag = sensorDataFlags.String("resolution", "", "")
		sensorDataAggregateFlag  = sensorDataFlags.String("aggregate", "", "")
		sensorDataAuthFlag       = sensorDataFlags.String("auth", "REQUIRED", "")

		informationFlags = flag.NewFlagSet("information", flag.ContinueOnError)

		informationDeviceLayoutFlags        = flag.NewFlagSet("device- layout", flag.ExitOnError)
		informationDeviceLayoutDeviceIDFlag = informationDeviceLayoutFlags.String("device-id", "REQUIRED", "")
		informationDeviceLayoutAuthFlag     = informationDeviceLayoutFlags.String("auth", "REQUIRED", "")

		informationFirmwareStatisticsFlags    = flag.NewFlagSet("firmware- statistics", flag.ExitOnError)
		informationFirmwareStatisticsAuthFlag = informationFirmwareStatisticsFlags.String("auth", "REQUIRED", "")

		stationFlags = flag.NewFlagSet("station", flag.ContinueOnError)

		stationAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		stationAddBodyFlag = stationAddFlags.String("body", "REQUIRED", "")
		stationAddAuthFlag = stationAddFlags.String("auth", "REQUIRED", "")

		stationGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		stationGetIDFlag   = stationGetFlags.String("id", "REQUIRED", "")
		stationGetAuthFlag = stationGetFlags.String("auth", "REQUIRED", "")

		stationUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		stationUpdateBodyFlag = stationUpdateFlags.String("body", "REQUIRED", "")
		stationUpdateIDFlag   = stationUpdateFlags.String("id", "REQUIRED", "")
		stationUpdateAuthFlag = stationUpdateFlags.String("auth", "REQUIRED", "")

		stationListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		stationListMineAuthFlag = stationListMineFlags.String("auth", "REQUIRED", "")

		stationListProjectFlags    = flag.NewFlagSet("list- project", flag.ExitOnError)
		stationListProjectIDFlag   = stationListProjectFlags.String("id", "REQUIRED", "")
		stationListProjectAuthFlag = stationListProjectFlags.String("auth", "REQUIRED", "")

		stationPhotoFlags    = flag.NewFlagSet("photo", flag.ExitOnError)
		stationPhotoIDFlag   = stationPhotoFlags.String("id", "REQUIRED", "")
		stationPhotoAuthFlag = stationPhotoFlags.String("auth", "REQUIRED", "")

		tasksFlags = flag.NewFlagSet("tasks", flag.ContinueOnError)

		tasksFiveFlags = flag.NewFlagSet("five", flag.ExitOnError)

		testFlags = flag.NewFlagSet("test", flag.ContinueOnError)

		testGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		testGetIDFlag = testGetFlags.String("id", "REQUIRED", "")

		testErrorFlags = flag.NewFlagSet("error", flag.ExitOnError)

		testEmailFlags       = flag.NewFlagSet("email", flag.ExitOnError)
		testEmailAddressFlag = testEmailFlags.String("address", "REQUIRED", "")
		testEmailAuthFlag    = testEmailFlags.String("auth", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userRolesFlags    = flag.NewFlagSet("roles", flag.ExitOnError)
		userRolesAuthFlag = userRolesFlags.String("auth", "REQUIRED", "")

		userDeleteFlags      = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteUserIDFlag = userDeleteFlags.String("user-id", "REQUIRED", "")
		userDeleteAuthFlag   = userDeleteFlags.String("auth", "REQUIRED", "")
	)
	activityFlags.Usage = activityUsage
	activityStationFlags.Usage = activityStationUsage
	activityProjectFlags.Usage = activityProjectUsage

	followingFlags.Usage = followingUsage
	followingFollowFlags.Usage = followingFollowUsage
	followingUnfollowFlags.Usage = followingUnfollowUsage
	followingFollowersFlags.Usage = followingFollowersUsage

	ingestionFlags.Usage = ingestionUsage
	ingestionProcessPendingFlags.Usage = ingestionProcessPendingUsage
	ingestionProcessStationFlags.Usage = ingestionProcessStationUsage
	ingestionProcessIngestionFlags.Usage = ingestionProcessIngestionUsage
	ingestionDeleteFlags.Usage = ingestionDeleteUsage

	modulesFlags.Usage = modulesUsage
	modulesMetaFlags.Usage = modulesMetaUsage

	notesFlags.Usage = notesUsage
	notesUpdateFlags.Usage = notesUpdateUsage
	notesGetFlags.Usage = notesGetUsage
	notesMediaFlags.Usage = notesMediaUsage
	notesUploadFlags.Usage = notesUploadUsage

	projectFlags.Usage = projectUsage
	projectAddUpdateFlags.Usage = projectAddUpdateUsage
	projectDeleteUpdateFlags.Usage = projectDeleteUpdateUsage
	projectModifyUpdateFlags.Usage = projectModifyUpdateUsage
	projectInvitesFlags.Usage = projectInvitesUsage
	projectLookupInviteFlags.Usage = projectLookupInviteUsage
	projectAcceptInviteFlags.Usage = projectAcceptInviteUsage
	projectRejectInviteFlags.Usage = projectRejectInviteUsage

	sensorFlags.Usage = sensorUsage
	sensorMetaFlags.Usage = sensorMetaUsage
	sensorDataFlags.Usage = sensorDataUsage

	informationFlags.Usage = informationUsage
	informationDeviceLayoutFlags.Usage = informationDeviceLayoutUsage
	informationFirmwareStatisticsFlags.Usage = informationFirmwareStatisticsUsage

	stationFlags.Usage = stationUsage
	stationAddFlags.Usage = stationAddUsage
	stationGetFlags.Usage = stationGetUsage
	stationUpdateFlags.Usage = stationUpdateUsage
	stationListMineFlags.Usage = stationListMineUsage
	stationListProjectFlags.Usage = stationListProjectUsage
	stationPhotoFlags.Usage = stationPhotoUsage

	tasksFlags.Usage = tasksUsage
	tasksFiveFlags.Usage = tasksFiveUsage

	testFlags.Usage = testUsage
	testGetFlags.Usage = testGetUsage
	testErrorFlags.Usage = testErrorUsage
	testEmailFlags.Usage = testEmailUsage

	userFlags.Usage = userUsage
	userRolesFlags.Usage = userRolesUsage
	userDeleteFlags.Usage = userDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "activity":
			svcf = activityFlags
		case "following":
			svcf = followingFlags
		case "ingestion":
			svcf = ingestionFlags
		case "modules":
			svcf = modulesFlags
		case "notes":
			svcf = notesFlags
		case "project":
			svcf = projectFlags
		case "sensor":
			svcf = sensorFlags
		case "information":
			svcf = informationFlags
		case "station":
			svcf = stationFlags
		case "tasks":
			svcf = tasksFlags
		case "test":
			svcf = testFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "activity":
			switch epn {
			case "station":
				epf = activityStationFlags

			case "project":
				epf = activityProjectFlags

			}

		case "following":
			switch epn {
			case "follow":
				epf = followingFollowFlags

			case "unfollow":
				epf = followingUnfollowFlags

			case "followers":
				epf = followingFollowersFlags

			}

		case "ingestion":
			switch epn {
			case "process- pending":
				epf = ingestionProcessPendingFlags

			case "process- station":
				epf = ingestionProcessStationFlags

			case "process- ingestion":
				epf = ingestionProcessIngestionFlags

			case "delete":
				epf = ingestionDeleteFlags

			}

		case "modules":
			switch epn {
			case "meta":
				epf = modulesMetaFlags

			}

		case "notes":
			switch epn {
			case "update":
				epf = notesUpdateFlags

			case "get":
				epf = notesGetFlags

			case "media":
				epf = notesMediaFlags

			case "upload":
				epf = notesUploadFlags

			}

		case "project":
			switch epn {
			case "add- update":
				epf = projectAddUpdateFlags

			case "delete- update":
				epf = projectDeleteUpdateFlags

			case "modify- update":
				epf = projectModifyUpdateFlags

			case "invites":
				epf = projectInvitesFlags

			case "lookup- invite":
				epf = projectLookupInviteFlags

			case "accept- invite":
				epf = projectAcceptInviteFlags

			case "reject- invite":
				epf = projectRejectInviteFlags

			}

		case "sensor":
			switch epn {
			case "meta":
				epf = sensorMetaFlags

			case "data":
				epf = sensorDataFlags

			}

		case "information":
			switch epn {
			case "device- layout":
				epf = informationDeviceLayoutFlags

			case "firmware- statistics":
				epf = informationFirmwareStatisticsFlags

			}

		case "station":
			switch epn {
			case "add":
				epf = stationAddFlags

			case "get":
				epf = stationGetFlags

			case "update":
				epf = stationUpdateFlags

			case "list- mine":
				epf = stationListMineFlags

			case "list- project":
				epf = stationListProjectFlags

			case "photo":
				epf = stationPhotoFlags

			}

		case "tasks":
			switch epn {
			case "five":
				epf = tasksFiveFlags

			}

		case "test":
			switch epn {
			case "get":
				epf = testGetFlags

			case "error":
				epf = testErrorFlags

			case "email":
				epf = testEmailFlags

			}

		case "user":
			switch epn {
			case "roles":
				epf = userRolesFlags

			case "delete":
				epf = userDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "activity":
			c := activityc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "station":
				endpoint = c.Station()
				data, err = activityc.BuildStationPayload(*activityStationIDFlag, *activityStationPageFlag, *activityStationAuthFlag)
			case "project":
				endpoint = c.Project()
				data, err = activityc.BuildProjectPayload(*activityProjectIDFlag, *activityProjectPageFlag, *activityProjectAuthFlag)
			}
		case "following":
			c := followingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "follow":
				endpoint = c.Follow()
				data, err = followingc.BuildFollowPayload(*followingFollowIDFlag, *followingFollowAuthFlag)
			case "unfollow":
				endpoint = c.Unfollow()
				data, err = followingc.BuildUnfollowPayload(*followingUnfollowIDFlag, *followingUnfollowAuthFlag)
			case "followers":
				endpoint = c.Followers()
				data, err = followingc.BuildFollowersPayload(*followingFollowersIDFlag, *followingFollowersPageFlag)
			}
		case "ingestion":
			c := ingestionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "process- pending":
				endpoint = c.ProcessPending()
				data, err = ingestionc.BuildProcessPendingPayload(*ingestionProcessPendingAuthFlag)
			case "process- station":
				endpoint = c.ProcessStation()
				data, err = ingestionc.BuildProcessStationPayload(*ingestionProcessStationStationIDFlag, *ingestionProcessStationCompletelyFlag, *ingestionProcessStationAuthFlag)
			case "process- ingestion":
				endpoint = c.ProcessIngestion()
				data, err = ingestionc.BuildProcessIngestionPayload(*ingestionProcessIngestionIngestionIDFlag, *ingestionProcessIngestionAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = ingestionc.BuildDeletePayload(*ingestionDeleteIngestionIDFlag, *ingestionDeleteAuthFlag)
			}
		case "modules":
			c := modulesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			}
		case "notes":
			c := notesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update":
				endpoint = c.Update()
				data, err = notesc.BuildUpdatePayload(*notesUpdateBodyFlag, *notesUpdateStationIDFlag, *notesUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = notesc.BuildGetPayload(*notesGetStationIDFlag, *notesGetAuthFlag)
			case "media":
				endpoint = c.Media()
				data, err = notesc.BuildMediaPayload(*notesMediaMediaIDFlag, *notesMediaAuthFlag)
			case "upload":
				endpoint = c.Upload()
				data, err = notesc.BuildUploadPayload(*notesUploadStationIDFlag, *notesUploadKeyFlag, *notesUploadAuthFlag, *notesUploadContentTypeFlag, *notesUploadContentLengthFlag)
				if err == nil {
					data, err = notesc.BuildUploadStreamPayload(data, *notesUploadStreamFlag)
				}
			}
		case "project":
			c := projectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add- update":
				endpoint = c.AddUpdate()
				data, err = projectc.BuildAddUpdatePayload(*projectAddUpdateBodyFlag, *projectAddUpdateProjectIDFlag, *projectAddUpdateAuthFlag)
			case "delete- update":
				endpoint = c.DeleteUpdate()
				data, err = projectc.BuildDeleteUpdatePayload(*projectDeleteUpdateProjectIDFlag, *projectDeleteUpdateUpdateIDFlag, *projectDeleteUpdateAuthFlag)
			case "modify- update":
				endpoint = c.ModifyUpdate()
				data, err = projectc.BuildModifyUpdatePayload(*projectModifyUpdateBodyFlag, *projectModifyUpdateProjectIDFlag, *projectModifyUpdateUpdateIDFlag, *projectModifyUpdateAuthFlag)
			case "invites":
				endpoint = c.Invites()
				data, err = projectc.BuildInvitesPayload(*projectInvitesAuthFlag)
			case "lookup- invite":
				endpoint = c.LookupInvite()
				data, err = projectc.BuildLookupInvitePayload(*projectLookupInviteTokenFlag, *projectLookupInviteAuthFlag)
			case "accept- invite":
				endpoint = c.AcceptInvite()
				data, err = projectc.BuildAcceptInvitePayload(*projectAcceptInviteIDFlag, *projectAcceptInviteTokenFlag, *projectAcceptInviteAuthFlag)
			case "reject- invite":
				endpoint = c.RejectInvite()
				data, err = projectc.BuildRejectInvitePayload(*projectRejectInviteIDFlag, *projectRejectInviteTokenFlag, *projectRejectInviteAuthFlag)
			}
		case "sensor":
			c := sensorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			case "data":
				endpoint = c.Data()
				data, err = sensorc.BuildDataPayload(*sensorDataStartFlag, *sensorDataEndFlag, *sensorDataStationsFlag, *sensorDataSensorsFlag, *sensorDataResolutionFlag, *sensorDataAggregateFlag, *sensorDataAuthFlag)
			}
		case "information":
			c := informationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- layout":
				endpoint = c.DeviceLayout()
				data, err = informationc.BuildDeviceLayoutPayload(*informationDeviceLayoutDeviceIDFlag, *informationDeviceLayoutAuthFlag)
			case "firmware- statistics":
				endpoint = c.FirmwareStatistics()
				data, err = informationc.BuildFirmwareStatisticsPayload(*informationFirmwareStatisticsAuthFlag)
			}
		case "station":
			c := stationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = stationc.BuildAddPayload(*stationAddBodyFlag, *stationAddAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = stationc.BuildGetPayload(*stationGetIDFlag, *stationGetAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = stationc.BuildUpdatePayload(*stationUpdateBodyFlag, *stationUpdateIDFlag, *stationUpdateAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = stationc.BuildListMinePayload(*stationListMineAuthFlag)
			case "list- project":
				endpoint = c.ListProject()
				data, err = stationc.BuildListProjectPayload(*stationListProjectIDFlag, *stationListProjectAuthFlag)
			case "photo":
				endpoint = c.Photo()
				data, err = stationc.BuildPhotoPayload(*stationPhotoIDFlag, *stationPhotoAuthFlag)
			}
		case "tasks":
			c := tasksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "five":
				endpoint = c.Five()
				data = nil
			}
		case "test":
			c := testc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = testc.BuildGetPayload(*testGetIDFlag)
			case "error":
				endpoint = c.Error()
				data = nil
			case "email":
				endpoint = c.Email()
				data, err = testc.BuildEmailPayload(*testEmailAddressFlag, *testEmailAuthFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "roles":
				endpoint = c.Roles()
				data, err = userc.BuildRolesPayload(*userRolesAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteUserIDFlag, *userDeleteAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// activityUsage displays the usage of the activity command and its subcommands.
func activityUsage() {
	fmt.Fprintf(os.Stderr, `Service is the activity service interface.
Usage:
    %s [globalflags] activity COMMAND [flags]

COMMAND:
    station: Station implements station.
    project: Project implements project.

Additional help:
    %s activity COMMAND --help
`, os.Args[0], os.Args[0])
}
func activityStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity station -id INT64 -page INT64 -auth STRING

Station implements station.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity station --id 3853494286558507563 --page 2255084724151658447 --auth "Facilis aut maiores reiciendis."
`, os.Args[0])
}

func activityProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity project -id INT64 -page INT64 -auth STRING

Project implements project.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity project --id 557980417179025840 --page 3313168147341797669 --auth "Quia aut sunt reprehenderit nulla."
`, os.Args[0])
}

// followingUsage displays the usage of the following command and its
// subcommands.
func followingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the following service interface.
Usage:
    %s [globalflags] following COMMAND [flags]

COMMAND:
    follow: Follow implements follow.
    unfollow: Unfollow implements unfollow.
    followers: Followers implements followers.

Additional help:
    %s following COMMAND --help
`, os.Args[0], os.Args[0])
}
func followingFollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following follow -id INT64 -auth STRING

Follow implements follow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following follow --id 8526550986221361521 --auth "Veniam esse et repellendus sit unde."
`, os.Args[0])
}

func followingUnfollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following unfollow -id INT64 -auth STRING

Unfollow implements unfollow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following unfollow --id 8145841929511294902 --auth "Est sequi vel velit."
`, os.Args[0])
}

func followingFollowersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following followers -id INT64 -page INT64

Followers implements followers.
    -id INT64: 
    -page INT64: 

Example:
    `+os.Args[0]+` following followers --id 8291186375213697380 --page 7219559215877997537
`, os.Args[0])
}

// ingestionUsage displays the usage of the ingestion command and its
// subcommands.
func ingestionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ingestion service interface.
Usage:
    %s [globalflags] ingestion COMMAND [flags]

COMMAND:
    process- pending: ProcessPending implements process pending.
    process- station: ProcessStation implements process station.
    process- ingestion: ProcessIngestion implements process ingestion.
    delete: Delete implements delete.

Additional help:
    %s ingestion COMMAND --help
`, os.Args[0], os.Args[0])
}
func ingestionProcessPendingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- pending -auth STRING

ProcessPending implements process pending.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- pending --auth "Amet aliquam aut est."
`, os.Args[0])
}

func ingestionProcessStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- station -station-id INT32 -completely BOOL -auth STRING

ProcessStation implements process station.
    -station-id INT32: 
    -completely BOOL: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- station --station-id 926070535 --completely false --auth "Similique sequi qui deserunt velit minima."
`, os.Args[0])
}

func ingestionProcessIngestionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- ingestion -ingestion-id INT64 -auth STRING

ProcessIngestion implements process ingestion.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- ingestion --ingestion-id 3825296622991960806 --auth "Vitae soluta."
`, os.Args[0])
}

func ingestionDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion delete -ingestion-id INT64 -auth STRING

Delete implements delete.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion delete --ingestion-id 3250857452073104250 --auth "Provident sapiente sit ipsam consequatur impedit voluptatem."
`, os.Args[0])
}

// modulesUsage displays the usage of the modules command and its subcommands.
func modulesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the modules service interface.
Usage:
    %s [globalflags] modules COMMAND [flags]

COMMAND:
    meta: Meta implements meta.

Additional help:
    %s modules COMMAND --help
`, os.Args[0], os.Args[0])
}
func modulesMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] modules meta

Meta implements meta.

Example:
    `+os.Args[0]+` modules meta
`, os.Args[0])
}

// notesUsage displays the usage of the notes command and its subcommands.
func notesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the notes service interface.
Usage:
    %s [globalflags] notes COMMAND [flags]

COMMAND:
    update: Update implements update.
    get: Get implements get.
    media: Media implements media.
    upload: Upload implements upload.

Additional help:
    %s notes COMMAND --help
`, os.Args[0], os.Args[0])
}
func notesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes update -body JSON -station-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes update --body '{
      "notes": {
         "creating": [
            {
               "body": "Perferendis facilis mollitia vel aut.",
               "key": "Ea dolorum consequatur alias beatae magni.",
               "mediaIds": [
                  4901102416227285199,
                  8553307744897445340,
                  3175563408179649650
               ]
            },
            {
               "body": "Perferendis facilis mollitia vel aut.",
               "key": "Ea dolorum consequatur alias beatae magni.",
               "mediaIds": [
                  4901102416227285199,
                  8553307744897445340,
                  3175563408179649650
               ]
            }
         ],
         "notes": [
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            },
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            },
            {
               "body": "Fugit quos sed enim occaecati.",
               "id": 6139879987527965591,
               "key": "Dolorum et autem tempora consequatur architecto optio.",
               "mediaIds": [
                  2268756658411607113,
                  3749521312036636972,
                  7053919692555427872
               ]
            }
         ]
      }
   }' --station-id 767778983 --auth "Illum veniam deserunt sint fuga ut aut."
`, os.Args[0])
}

func notesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes get -station-id INT32 -auth STRING

Get implements get.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes get --station-id 183867628 --auth "Culpa neque."
`, os.Args[0])
}

func notesMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes media -media-id INT32 -auth STRING

Media implements media.
    -media-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes media --media-id 1827134368 --auth "Sint quis occaecati sequi aut provident porro."
`, os.Args[0])
}

func notesUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes upload -station-id INT32 -key STRING -auth STRING -content-type STRING -content-length INT64 -stream STRING

Upload implements upload.
    -station-id INT32: 
    -key STRING: 
    -auth STRING: 
    -content-type STRING: 
    -content-length INT64: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` notes upload --station-id 382191260 --key "Omnis quia." --auth "Laborum vero odio fugit." --content-type "Maxime totam sapiente eligendi quo quam." --content-length 56888755525650787 --stream "goa.png"
`, os.Args[0])
}

// projectUsage displays the usage of the project command and its subcommands.
func projectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the project service interface.
Usage:
    %s [globalflags] project COMMAND [flags]

COMMAND:
    add- update: AddUpdate implements add update.
    delete- update: DeleteUpdate implements delete update.
    modify- update: ModifyUpdate implements modify update.
    invites: Invites implements invites.
    lookup- invite: LookupInvite implements lookup invite.
    accept- invite: AcceptInvite implements accept invite.
    reject- invite: RejectInvite implements reject invite.

Additional help:
    %s project COMMAND --help
`, os.Args[0], os.Args[0])
}
func projectAddUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- update -body JSON -project-id INT32 -auth STRING

AddUpdate implements add update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- update --body '{
      "body": "Eveniet dicta fuga atque maiores velit."
   }' --project-id 1456668726 --auth "Ut placeat."
`, os.Args[0])
}

func projectDeleteUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete- update -project-id INT32 -update-id INT64 -auth STRING

DeleteUpdate implements delete update.
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete- update --project-id 752568587 --update-id 2594112919068366228 --auth "Aperiam labore nemo corrupti et non suscipit."
`, os.Args[0])
}

func projectModifyUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project modify- update -body JSON -project-id INT32 -update-id INT64 -auth STRING

ModifyUpdate implements modify update.
    -body JSON: 
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project modify- update --body '{
      "body": "Repudiandae temporibus a facilis earum."
   }' --project-id 1691611715 --update-id 8361274766535538976 --auth "Tenetur aliquid."
`, os.Args[0])
}

func projectInvitesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invites -auth STRING

Invites implements invites.
    -auth STRING: 

Example:
    `+os.Args[0]+` project invites --auth "Dolor aut non magni dignissimos."
`, os.Args[0])
}

func projectLookupInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project lookup- invite -token STRING -auth STRING

LookupInvite implements lookup invite.
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project lookup- invite --token "Est laudantium eius deleniti quis voluptatem non." --auth "Nulla quod itaque facilis quasi aut."
`, os.Args[0])
}

func projectAcceptInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- invite -id INT64 -token STRING -auth STRING

AcceptInvite implements accept invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- invite --id 8849660070720972928 --token "Unde ut repudiandae ab vel quia aut." --auth "Ut expedita eos nihil commodi expedita nostrum."
`, os.Args[0])
}

func projectRejectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- invite -id INT64 -token STRING -auth STRING

RejectInvite implements reject invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- invite --id 7598215155383689861 --token "Accusamus odit quibusdam explicabo dolores consectetur non." --auth "Ab unde."
`, os.Args[0])
}

// sensorUsage displays the usage of the sensor command and its subcommands.
func sensorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sensor service interface.
Usage:
    %s [globalflags] sensor COMMAND [flags]

COMMAND:
    meta: Meta implements meta.
    data: Data implements data.

Additional help:
    %s sensor COMMAND --help
`, os.Args[0], os.Args[0])
}
func sensorMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor meta

Meta implements meta.

Example:
    `+os.Args[0]+` sensor meta
`, os.Args[0])
}

func sensorDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor data -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -auth STRING

Data implements data.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor data --start 1305916028401326816 --end 3648053334773642674 --stations "Molestiae dolor est aperiam molestiae quia." --sensors "Fugiat aspernatur dolor asperiores." --resolution 1729531005 --aggregate "Facilis hic ea incidunt saepe et." --auth "Et deserunt sequi est sunt qui."
`, os.Args[0])
}

// informationUsage displays the usage of the information command and its
// subcommands.
func informationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the information service interface.
Usage:
    %s [globalflags] information COMMAND [flags]

COMMAND:
    device- layout: DeviceLayout implements device layout.
    firmware- statistics: FirmwareStatistics implements firmware statistics.

Additional help:
    %s information COMMAND --help
`, os.Args[0], os.Args[0])
}
func informationDeviceLayoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information device- layout -device-id STRING -auth STRING

DeviceLayout implements device layout.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` information device- layout --device-id "Et vero aut qui." --auth "Dolor eveniet ipsum aperiam et eaque."
`, os.Args[0])
}

func informationFirmwareStatisticsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information firmware- statistics -auth STRING

FirmwareStatistics implements firmware statistics.
    -auth STRING: 

Example:
    `+os.Args[0]+` information firmware- statistics --auth "Eligendi repudiandae aut expedita iste."
`, os.Args[0])
}

// stationUsage displays the usage of the station command and its subcommands.
func stationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the station service interface.
Usage:
    %s [globalflags] station COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.
    update: Update implements update.
    list- mine: ListMine implements list mine.
    list- project: ListProject implements list project.
    photo: Photo implements photo.

Additional help:
    %s station COMMAND --help
`, os.Args[0], os.Args[0])
}
func stationAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station add --body '{
      "deviceId": "Odit rerum officiis eius quas at.",
      "locationName": "Sed sunt ab voluptatem quibusdam iusto.",
      "name": "Sit nemo praesentium.",
      "statusPb": "Ducimus omnis sit et."
   }' --auth "Eveniet illum."
`, os.Args[0])
}

func stationGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station get -id INT32 -auth STRING

Get implements get.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station get --id 292906630 --auth "Velit commodi error consequatur consequatur consequatur est."
`, os.Args[0])
}

func stationUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station update -body JSON -id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station update --body '{
      "location_name": "Ipsum possimus magni.",
      "name": "Odio minus.",
      "status_pb": "Voluptatem aut eligendi qui."
   }' --id 339108518 --auth "Voluptate numquam recusandae aspernatur natus accusantium adipisci."
`, os.Args[0])
}

func stationListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- mine --auth "At pariatur iste."
`, os.Args[0])
}

func stationListProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- project -id INT32 -auth STRING

ListProject implements list project.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- project --id 1261147900 --auth "Voluptas consequatur reiciendis."
`, os.Args[0])
}

func stationPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station photo -id INT32 -auth STRING

Photo implements photo.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station photo --id 1475570681 --auth "Et et facilis officia eum."
`, os.Args[0])
}

// tasksUsage displays the usage of the tasks command and its subcommands.
func tasksUsage() {
	fmt.Fprintf(os.Stderr, `Service is the tasks service interface.
Usage:
    %s [globalflags] tasks COMMAND [flags]

COMMAND:
    five: Five implements five.

Additional help:
    %s tasks COMMAND --help
`, os.Args[0], os.Args[0])
}
func tasksFiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tasks five

Five implements five.

Example:
    `+os.Args[0]+` tasks five
`, os.Args[0])
}

// testUsage displays the usage of the test command and its subcommands.
func testUsage() {
	fmt.Fprintf(os.Stderr, `Service is the test service interface.
Usage:
    %s [globalflags] test COMMAND [flags]

COMMAND:
    get: Get implements get.
    error: Error implements error.
    email: Email implements email.

Additional help:
    %s test COMMAND --help
`, os.Args[0], os.Args[0])
}
func testGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test get -id INT64

Get implements get.
    -id INT64: 

Example:
    `+os.Args[0]+` test get --id 7071534387960411865
`, os.Args[0])
}

func testErrorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test error

Error implements error.

Example:
    `+os.Args[0]+` test error
`, os.Args[0])
}

func testEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test email -address STRING -auth STRING

Email implements email.
    -address STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` test email --address "Impedit molestiae aut asperiores eos quos enim." --auth "Aperiam adipisci eaque non."
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    roles: Roles implements roles.
    delete: Delete implements delete.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user roles -auth STRING

Roles implements roles.
    -auth STRING: 

Example:
    `+os.Args[0]+` user roles --auth "Et vel ut quis reprehenderit."
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user delete -user-id INT32 -auth STRING

Delete implements delete.
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user delete --user-id 867437850 --auth "Laboriosam voluptas eveniet libero sunt enim commodi."
`, os.Args[0])
}
