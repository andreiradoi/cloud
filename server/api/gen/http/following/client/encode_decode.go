// Code generated by goa v3.1.1, DO NOT EDIT.
//
// following HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	following "github.com/fieldkit/cloud/server/api/gen/following"
	goahttp "goa.design/goa/v3/http"
)

// BuildFollowRequest instantiates a HTTP request object with method and path
// set to call the "following" service "follow" endpoint
func (c *Client) BuildFollowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*following.FollowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("following", "follow", "*following.FollowPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FollowFollowingPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("following", "follow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFollowRequest returns an encoder for requests sent to the following
// follow server.
func EncodeFollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*following.FollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("following", "follow", "*following.FollowPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeFollowResponse returns a decoder for responses returned by the
// following follow endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeFollowResponse may return the following errors:
//	- "unauthorized" (type following.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeFollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body FollowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "follow", err)
			}
			return nil, NewFollowUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("following", "follow", resp.StatusCode, string(body))
		}
	}
}

// BuildUnfollowRequest instantiates a HTTP request object with method and path
// set to call the "following" service "unfollow" endpoint
func (c *Client) BuildUnfollowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*following.UnfollowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("following", "unfollow", "*following.UnfollowPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnfollowFollowingPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("following", "unfollow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnfollowRequest returns an encoder for requests sent to the following
// unfollow server.
func EncodeUnfollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*following.UnfollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("following", "unfollow", "*following.UnfollowPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeUnfollowResponse returns a decoder for responses returned by the
// following unfollow endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUnfollowResponse may return the following errors:
//	- "unauthorized" (type following.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeUnfollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body UnfollowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "unfollow", err)
			}
			return nil, NewUnfollowUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("following", "unfollow", resp.StatusCode, string(body))
		}
	}
}
