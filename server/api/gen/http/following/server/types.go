// Code generated by goa v3.1.2, DO NOT EDIT.
//
// following HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	following "github.com/fieldkit/cloud/server/api/gen/following"
	followingviews "github.com/fieldkit/cloud/server/api/gen/following/views"
)

// FollowersResponseBody is the type of the "following" service "followers"
// endpoint HTTP response body.
type FollowersResponseBody struct {
	Followers FollowerResponseBodyCollection `form:"followers" json:"followers" xml:"followers"`
	Total     int32                          `form:"total" json:"total" xml:"total"`
	Page      int32                          `form:"page" json:"page" xml:"page"`
}

// FollowBadRequestResponseBody is the type of the "following" service "follow"
// endpoint HTTP response body for the "bad-request" error.
type FollowBadRequestResponseBody string

// FollowForbiddenResponseBody is the type of the "following" service "follow"
// endpoint HTTP response body for the "forbidden" error.
type FollowForbiddenResponseBody string

// FollowNotFoundResponseBody is the type of the "following" service "follow"
// endpoint HTTP response body for the "not-found" error.
type FollowNotFoundResponseBody string

// FollowUnauthorizedResponseBody is the type of the "following" service
// "follow" endpoint HTTP response body for the "unauthorized" error.
type FollowUnauthorizedResponseBody string

// UnfollowBadRequestResponseBody is the type of the "following" service
// "unfollow" endpoint HTTP response body for the "bad-request" error.
type UnfollowBadRequestResponseBody string

// UnfollowForbiddenResponseBody is the type of the "following" service
// "unfollow" endpoint HTTP response body for the "forbidden" error.
type UnfollowForbiddenResponseBody string

// UnfollowNotFoundResponseBody is the type of the "following" service
// "unfollow" endpoint HTTP response body for the "not-found" error.
type UnfollowNotFoundResponseBody string

// UnfollowUnauthorizedResponseBody is the type of the "following" service
// "unfollow" endpoint HTTP response body for the "unauthorized" error.
type UnfollowUnauthorizedResponseBody string

// FollowersBadRequestResponseBody is the type of the "following" service
// "followers" endpoint HTTP response body for the "bad-request" error.
type FollowersBadRequestResponseBody string

// FollowersForbiddenResponseBody is the type of the "following" service
// "followers" endpoint HTTP response body for the "forbidden" error.
type FollowersForbiddenResponseBody string

// FollowersNotFoundResponseBody is the type of the "following" service
// "followers" endpoint HTTP response body for the "not-found" error.
type FollowersNotFoundResponseBody string

// FollowersUnauthorizedResponseBody is the type of the "following" service
// "followers" endpoint HTTP response body for the "unauthorized" error.
type FollowersUnauthorizedResponseBody string

// FollowerResponseBodyCollection is used to define fields on response body
// types.
type FollowerResponseBodyCollection []*FollowerResponseBody

// FollowerResponseBody is used to define fields on response body types.
type FollowerResponseBody struct {
	ID     int64               `form:"id" json:"id" xml:"id"`
	Name   string              `form:"name" json:"name" xml:"name"`
	Avatar *AvatarResponseBody `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
}

// AvatarResponseBody is used to define fields on response body types.
type AvatarResponseBody struct {
	URL string `form:"url" json:"url" xml:"url"`
}

// NewFollowersResponseBody builds the HTTP response body from the result of
// the "followers" endpoint of the "following" service.
func NewFollowersResponseBody(res *followingviews.FollowersPageView) *FollowersResponseBody {
	body := &FollowersResponseBody{
		Total: *res.Total,
		Page:  *res.Page,
	}
	if res.Followers != nil {
		body.Followers = make([]*FollowerResponseBody, len(res.Followers))
		for i, val := range res.Followers {
			body.Followers[i] = marshalFollowingviewsFollowerViewToFollowerResponseBody(val)
		}
	}
	return body
}

// NewFollowBadRequestResponseBody builds the HTTP response body from the
// result of the "follow" endpoint of the "following" service.
func NewFollowBadRequestResponseBody(res following.BadRequest) FollowBadRequestResponseBody {
	body := FollowBadRequestResponseBody(res)
	return body
}

// NewFollowForbiddenResponseBody builds the HTTP response body from the result
// of the "follow" endpoint of the "following" service.
func NewFollowForbiddenResponseBody(res following.Forbidden) FollowForbiddenResponseBody {
	body := FollowForbiddenResponseBody(res)
	return body
}

// NewFollowNotFoundResponseBody builds the HTTP response body from the result
// of the "follow" endpoint of the "following" service.
func NewFollowNotFoundResponseBody(res following.NotFound) FollowNotFoundResponseBody {
	body := FollowNotFoundResponseBody(res)
	return body
}

// NewFollowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "follow" endpoint of the "following" service.
func NewFollowUnauthorizedResponseBody(res following.Unauthorized) FollowUnauthorizedResponseBody {
	body := FollowUnauthorizedResponseBody(res)
	return body
}

// NewUnfollowBadRequestResponseBody builds the HTTP response body from the
// result of the "unfollow" endpoint of the "following" service.
func NewUnfollowBadRequestResponseBody(res following.BadRequest) UnfollowBadRequestResponseBody {
	body := UnfollowBadRequestResponseBody(res)
	return body
}

// NewUnfollowForbiddenResponseBody builds the HTTP response body from the
// result of the "unfollow" endpoint of the "following" service.
func NewUnfollowForbiddenResponseBody(res following.Forbidden) UnfollowForbiddenResponseBody {
	body := UnfollowForbiddenResponseBody(res)
	return body
}

// NewUnfollowNotFoundResponseBody builds the HTTP response body from the
// result of the "unfollow" endpoint of the "following" service.
func NewUnfollowNotFoundResponseBody(res following.NotFound) UnfollowNotFoundResponseBody {
	body := UnfollowNotFoundResponseBody(res)
	return body
}

// NewUnfollowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "unfollow" endpoint of the "following" service.
func NewUnfollowUnauthorizedResponseBody(res following.Unauthorized) UnfollowUnauthorizedResponseBody {
	body := UnfollowUnauthorizedResponseBody(res)
	return body
}

// NewFollowersBadRequestResponseBody builds the HTTP response body from the
// result of the "followers" endpoint of the "following" service.
func NewFollowersBadRequestResponseBody(res following.BadRequest) FollowersBadRequestResponseBody {
	body := FollowersBadRequestResponseBody(res)
	return body
}

// NewFollowersForbiddenResponseBody builds the HTTP response body from the
// result of the "followers" endpoint of the "following" service.
func NewFollowersForbiddenResponseBody(res following.Forbidden) FollowersForbiddenResponseBody {
	body := FollowersForbiddenResponseBody(res)
	return body
}

// NewFollowersNotFoundResponseBody builds the HTTP response body from the
// result of the "followers" endpoint of the "following" service.
func NewFollowersNotFoundResponseBody(res following.NotFound) FollowersNotFoundResponseBody {
	body := FollowersNotFoundResponseBody(res)
	return body
}

// NewFollowersUnauthorizedResponseBody builds the HTTP response body from the
// result of the "followers" endpoint of the "following" service.
func NewFollowersUnauthorizedResponseBody(res following.Unauthorized) FollowersUnauthorizedResponseBody {
	body := FollowersUnauthorizedResponseBody(res)
	return body
}

// NewFollowPayload builds a following service follow endpoint payload.
func NewFollowPayload(id int64, auth *string) *following.FollowPayload {
	v := &following.FollowPayload{}
	v.ID = &id
	v.Auth = auth

	return v
}

// NewUnfollowPayload builds a following service unfollow endpoint payload.
func NewUnfollowPayload(id int64, auth *string) *following.UnfollowPayload {
	v := &following.UnfollowPayload{}
	v.ID = &id
	v.Auth = auth

	return v
}

// NewFollowersPayload builds a following service followers endpoint payload.
func NewFollowersPayload(id int64, page *int64) *following.FollowersPayload {
	v := &following.FollowersPayload{}
	v.ID = &id
	v.Page = page

	return v
}
