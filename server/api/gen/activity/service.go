// Code generated by goa v3.1.1, DO NOT EDIT.
//
// activity service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package activity

import (
	"context"

	activityviews "github.com/fieldkit/cloud/server/api/gen/activity/views"
	"goa.design/goa/v3/security"
)

// Service is the activity service interface.
type Service interface {
	// Station implements station.
	Station(context.Context, *StationPayload) (res *StationActivityPage, err error)
	// Project implements project.
	Project(context.Context, *ProjectPayload) (res *ProjectActivityPage, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "activity"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"station", "project"}

// StationPayload is the payload type of the activity service station method.
type StationPayload struct {
	Auth *string
	ID   *int64
	Page *int64
}

// StationActivityPage is the result type of the activity service station
// method.
type StationActivityPage struct {
	Activities StationActivityCollection
	Total      int32
	Page       int32
}

// ProjectPayload is the payload type of the activity service project method.
type ProjectPayload struct {
	Auth *string
	ID   *int64
	Page *int64
}

// ProjectActivityPage is the result type of the activity service project
// method.
type ProjectActivityPage struct {
	Activities ProjectActivityCollection
	Total      int32
	Page       int32
}

type StationActivityCollection []*StationActivity

type StationActivity struct {
	ID        int64
	Station   *StationSummary
	CreatedAt int64
	Type      string
	Meta      interface{}
}

type StationSummary struct {
	ID   int64
	Name string
}

type ProjectActivityCollection []*ProjectActivity

type ProjectActivity struct {
	ID        int64
	Project   *ProjectSummary
	CreatedAt int64
	Type      string
	Meta      interface{}
}

type ProjectSummary struct {
	ID   int64
	Name string
}

// NewStationActivityPage initializes result type StationActivityPage from
// viewed result type StationActivityPage.
func NewStationActivityPage(vres *activityviews.StationActivityPage) *StationActivityPage {
	return newStationActivityPage(vres.Projected)
}

// NewViewedStationActivityPage initializes viewed result type
// StationActivityPage from result type StationActivityPage using the given
// view.
func NewViewedStationActivityPage(res *StationActivityPage, view string) *activityviews.StationActivityPage {
	p := newStationActivityPageView(res)
	return &activityviews.StationActivityPage{Projected: p, View: "default"}
}

// NewProjectActivityPage initializes result type ProjectActivityPage from
// viewed result type ProjectActivityPage.
func NewProjectActivityPage(vres *activityviews.ProjectActivityPage) *ProjectActivityPage {
	return newProjectActivityPage(vres.Projected)
}

// NewViewedProjectActivityPage initializes viewed result type
// ProjectActivityPage from result type ProjectActivityPage using the given
// view.
func NewViewedProjectActivityPage(res *ProjectActivityPage, view string) *activityviews.ProjectActivityPage {
	p := newProjectActivityPageView(res)
	return &activityviews.ProjectActivityPage{Projected: p, View: "default"}
}

// newStationActivityPage converts projected type StationActivityPage to
// service type StationActivityPage.
func newStationActivityPage(vres *activityviews.StationActivityPageView) *StationActivityPage {
	res := &StationActivityPage{}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Page != nil {
		res.Page = *vres.Page
	}
	if vres.Activities != nil {
		res.Activities = newStationActivityCollection(vres.Activities)
	}
	return res
}

// newStationActivityPageView projects result type StationActivityPage to
// projected type StationActivityPageView using the "default" view.
func newStationActivityPageView(res *StationActivityPage) *activityviews.StationActivityPageView {
	vres := &activityviews.StationActivityPageView{
		Total: &res.Total,
		Page:  &res.Page,
	}
	if res.Activities != nil {
		vres.Activities = newStationActivityCollectionView(res.Activities)
	}
	return vres
}

// newStationActivityCollection converts projected type
// StationActivityCollection to service type StationActivityCollection.
func newStationActivityCollection(vres activityviews.StationActivityCollectionView) StationActivityCollection {
	res := make(StationActivityCollection, len(vres))
	for i, n := range vres {
		res[i] = newStationActivity(n)
	}
	return res
}

// newStationActivityCollectionView projects result type
// StationActivityCollection to projected type StationActivityCollectionView
// using the "default" view.
func newStationActivityCollectionView(res StationActivityCollection) activityviews.StationActivityCollectionView {
	vres := make(activityviews.StationActivityCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStationActivityView(n)
	}
	return vres
}

// newStationActivity converts projected type StationActivity to service type
// StationActivity.
func newStationActivity(vres *activityviews.StationActivityView) *StationActivity {
	res := &StationActivity{
		Meta: vres.Meta,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Station != nil {
		res.Station = transformActivityviewsStationSummaryViewToStationSummary(vres.Station)
	}
	return res
}

// newStationActivityView projects result type StationActivity to projected
// type StationActivityView using the "default" view.
func newStationActivityView(res *StationActivity) *activityviews.StationActivityView {
	vres := &activityviews.StationActivityView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		Type:      &res.Type,
		Meta:      res.Meta,
	}
	if res.Station != nil {
		vres.Station = transformStationSummaryToActivityviewsStationSummaryView(res.Station)
	}
	return vres
}

// newProjectActivityPage converts projected type ProjectActivityPage to
// service type ProjectActivityPage.
func newProjectActivityPage(vres *activityviews.ProjectActivityPageView) *ProjectActivityPage {
	res := &ProjectActivityPage{}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Page != nil {
		res.Page = *vres.Page
	}
	if vres.Activities != nil {
		res.Activities = newProjectActivityCollection(vres.Activities)
	}
	return res
}

// newProjectActivityPageView projects result type ProjectActivityPage to
// projected type ProjectActivityPageView using the "default" view.
func newProjectActivityPageView(res *ProjectActivityPage) *activityviews.ProjectActivityPageView {
	vres := &activityviews.ProjectActivityPageView{
		Total: &res.Total,
		Page:  &res.Page,
	}
	if res.Activities != nil {
		vres.Activities = newProjectActivityCollectionView(res.Activities)
	}
	return vres
}

// newProjectActivityCollection converts projected type
// ProjectActivityCollection to service type ProjectActivityCollection.
func newProjectActivityCollection(vres activityviews.ProjectActivityCollectionView) ProjectActivityCollection {
	res := make(ProjectActivityCollection, len(vres))
	for i, n := range vres {
		res[i] = newProjectActivity(n)
	}
	return res
}

// newProjectActivityCollectionView projects result type
// ProjectActivityCollection to projected type ProjectActivityCollectionView
// using the "default" view.
func newProjectActivityCollectionView(res ProjectActivityCollection) activityviews.ProjectActivityCollectionView {
	vres := make(activityviews.ProjectActivityCollectionView, len(res))
	for i, n := range res {
		vres[i] = newProjectActivityView(n)
	}
	return vres
}

// newProjectActivity converts projected type ProjectActivity to service type
// ProjectActivity.
func newProjectActivity(vres *activityviews.ProjectActivityView) *ProjectActivity {
	res := &ProjectActivity{
		Meta: vres.Meta,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Project != nil {
		res.Project = transformActivityviewsProjectSummaryViewToProjectSummary(vres.Project)
	}
	return res
}

// newProjectActivityView projects result type ProjectActivity to projected
// type ProjectActivityView using the "default" view.
func newProjectActivityView(res *ProjectActivity) *activityviews.ProjectActivityView {
	vres := &activityviews.ProjectActivityView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		Type:      &res.Type,
		Meta:      res.Meta,
	}
	if res.Project != nil {
		vres.Project = transformProjectSummaryToActivityviewsProjectSummaryView(res.Project)
	}
	return vres
}

// transformActivityviewsStationSummaryViewToStationSummary builds a value of
// type *StationSummary from a value of type *activityviews.StationSummaryView.
func transformActivityviewsStationSummaryViewToStationSummary(v *activityviews.StationSummaryView) *StationSummary {
	if v == nil {
		return nil
	}
	res := &StationSummary{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformStationSummaryToActivityviewsStationSummaryView builds a value of
// type *activityviews.StationSummaryView from a value of type *StationSummary.
func transformStationSummaryToActivityviewsStationSummaryView(v *StationSummary) *activityviews.StationSummaryView {
	res := &activityviews.StationSummaryView{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}

// transformActivityviewsProjectSummaryViewToProjectSummary builds a value of
// type *ProjectSummary from a value of type *activityviews.ProjectSummaryView.
func transformActivityviewsProjectSummaryViewToProjectSummary(v *activityviews.ProjectSummaryView) *ProjectSummary {
	if v == nil {
		return nil
	}
	res := &ProjectSummary{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformProjectSummaryToActivityviewsProjectSummaryView builds a value of
// type *activityviews.ProjectSummaryView from a value of type *ProjectSummary.
func transformProjectSummaryToActivityviewsProjectSummaryView(v *ProjectSummary) *activityviews.ProjectSummaryView {
	res := &activityviews.ProjectSummaryView{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}
