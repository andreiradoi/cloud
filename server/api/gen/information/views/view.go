// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// DeviceLayoutResponse is the viewed result type that is projected based on a
// view.
type DeviceLayoutResponse struct {
	// Type to project
	Projected *DeviceLayoutResponseView
	// View to render
	View string
}

// DeviceLayoutResponseView is a type that runs validations on a projected type.
type DeviceLayoutResponseView struct {
	Configurations []*StationConfigurationView
}

// StationConfigurationView is a type that runs validations on a projected type.
type StationConfigurationView struct {
	ID   *int64
	Time *int64
}

var (
	// DeviceLayoutResponseMap is a map of attribute names in result type
	// DeviceLayoutResponse indexed by view name.
	DeviceLayoutResponseMap = map[string][]string{
		"default": []string{
			"configurations",
		},
	}
)

// ValidateDeviceLayoutResponse runs the validations defined on the viewed
// result type DeviceLayoutResponse.
func ValidateDeviceLayoutResponse(result *DeviceLayoutResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateDeviceLayoutResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateDeviceLayoutResponseView runs the validations defined on
// DeviceLayoutResponseView using the "default" view.
func ValidateDeviceLayoutResponseView(result *DeviceLayoutResponseView) (err error) {
	if result.Configurations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("configurations", "result"))
	}
	for _, e := range result.Configurations {
		if e != nil {
			if err2 := ValidateStationConfigurationView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStationConfigurationView runs the validations defined on
// StationConfigurationView.
func ValidateStationConfigurationView(result *StationConfigurationView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "result"))
	}
	return
}
