// Code generated by goa v3.1.2, DO NOT EDIT.
//
// information service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package information

import (
	"context"

	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
	"goa.design/goa/v3/security"
)

// Service is the information service interface.
type Service interface {
	// DeviceLayout implements device layout.
	DeviceLayout(context.Context, *DeviceLayoutPayload) (res *DeviceLayoutResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "information"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"device layout"}

// DeviceLayoutPayload is the payload type of the information service device
// layout method.
type DeviceLayoutPayload struct {
	Auth     string
	DeviceID string
}

// DeviceLayoutResponse is the result type of the information service device
// layout method.
type DeviceLayoutResponse struct {
	Configurations []*StationConfiguration
}

type StationConfiguration struct {
	ID   int64
	Time int64
}

// unauthorized
type Unauthorized string

// forbidden
type Forbidden string

// not-found
type NotFound string

// bad-request
type BadRequest string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "unauthorized"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e Forbidden) Error() string {
	return "forbidden"
}

// ErrorName returns "forbidden".
func (e Forbidden) ErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "not-found"
}

// ErrorName returns "not-found".
func (e NotFound) ErrorName() string {
	return "not-found"
}

// Error returns an error description.
func (e BadRequest) Error() string {
	return "bad-request"
}

// ErrorName returns "bad-request".
func (e BadRequest) ErrorName() string {
	return "bad-request"
}

// NewDeviceLayoutResponse initializes result type DeviceLayoutResponse from
// viewed result type DeviceLayoutResponse.
func NewDeviceLayoutResponse(vres *informationviews.DeviceLayoutResponse) *DeviceLayoutResponse {
	return newDeviceLayoutResponse(vres.Projected)
}

// NewViewedDeviceLayoutResponse initializes viewed result type
// DeviceLayoutResponse from result type DeviceLayoutResponse using the given
// view.
func NewViewedDeviceLayoutResponse(res *DeviceLayoutResponse, view string) *informationviews.DeviceLayoutResponse {
	p := newDeviceLayoutResponseView(res)
	return &informationviews.DeviceLayoutResponse{Projected: p, View: "default"}
}

// newDeviceLayoutResponse converts projected type DeviceLayoutResponse to
// service type DeviceLayoutResponse.
func newDeviceLayoutResponse(vres *informationviews.DeviceLayoutResponseView) *DeviceLayoutResponse {
	res := &DeviceLayoutResponse{}
	if vres.Configurations != nil {
		res.Configurations = make([]*StationConfiguration, len(vres.Configurations))
		for i, val := range vres.Configurations {
			res.Configurations[i] = transformInformationviewsStationConfigurationViewToStationConfiguration(val)
		}
	}
	return res
}

// newDeviceLayoutResponseView projects result type DeviceLayoutResponse to
// projected type DeviceLayoutResponseView using the "default" view.
func newDeviceLayoutResponseView(res *DeviceLayoutResponse) *informationviews.DeviceLayoutResponseView {
	vres := &informationviews.DeviceLayoutResponseView{}
	if res.Configurations != nil {
		vres.Configurations = make([]*informationviews.StationConfigurationView, len(res.Configurations))
		for i, val := range res.Configurations {
			vres.Configurations[i] = transformStationConfigurationToInformationviewsStationConfigurationView(val)
		}
	}
	return vres
}

// transformInformationviewsStationConfigurationViewToStationConfiguration
// builds a value of type *StationConfiguration from a value of type
// *informationviews.StationConfigurationView.
func transformInformationviewsStationConfigurationViewToStationConfiguration(v *informationviews.StationConfigurationView) *StationConfiguration {
	if v == nil {
		return nil
	}
	res := &StationConfiguration{
		ID:   *v.ID,
		Time: *v.Time,
	}

	return res
}

// transformStationConfigurationToInformationviewsStationConfigurationView
// builds a value of type *informationviews.StationConfigurationView from a
// value of type *StationConfiguration.
func transformStationConfigurationToInformationviewsStationConfigurationView(v *StationConfiguration) *informationviews.StationConfigurationView {
	res := &informationviews.StationConfigurationView{
		ID:   &v.ID,
		Time: &v.Time,
	}

	return res
}
