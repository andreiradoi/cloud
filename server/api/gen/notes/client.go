// Code generated by goa v3.1.2, DO NOT EDIT.
//
// notes client
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package notes

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "notes" service client.
type Client struct {
	UpdateEndpoint goa.Endpoint
	GetEndpoint    goa.Endpoint
	MediaEndpoint  goa.Endpoint
	UploadEndpoint goa.Endpoint
}

// NewClient initializes a "notes" service client given the endpoints.
func NewClient(update, get, media, upload goa.Endpoint) *Client {
	return &Client{
		UpdateEndpoint: update,
		GetEndpoint:    get,
		MediaEndpoint:  media,
		UploadEndpoint: upload,
	}
}

// Update calls the "update" endpoint of the "notes" service.
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (res *FieldNotes, err error) {
	var ires interface{}
	ires, err = c.UpdateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*FieldNotes), nil
}

// Get calls the "get" endpoint of the "notes" service.
func (c *Client) Get(ctx context.Context, p *GetPayload) (res *FieldNotes, err error) {
	var ires interface{}
	ires, err = c.GetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*FieldNotes), nil
}

// Media calls the "media" endpoint of the "notes" service.
func (c *Client) Media(ctx context.Context, p *MediaPayload) (res *MediaResult, resp io.ReadCloser, err error) {
	var ires interface{}
	ires, err = c.MediaEndpoint(ctx, p)
	if err != nil {
		return
	}
	o := ires.(*MediaResponseData)
	return o.Result, o.Body, nil
}

// Upload calls the "upload" endpoint of the "notes" service.
func (c *Client) Upload(ctx context.Context, p *UploadPayload, req io.ReadCloser) (res *NoteMedia, err error) {
	var ires interface{}
	ires, err = c.UploadEndpoint(ctx, &UploadRequestData{Payload: p, Body: req})
	if err != nil {
		return
	}
	return ires.(*NoteMedia), nil
}
