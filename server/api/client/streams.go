// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": Streams Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CsvStreamsPath computes a request path to the csv action of Streams.
func CsvStreamsPath(streamID string) string {
	param0 := streamID

	return fmt.Sprintf("/streams/%s/csv", param0)
}

// Export stream
func (c *Client) CsvStreams(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCsvStreamsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCsvStreamsRequest create the request corresponding to the csv action endpoint of the Streams resource.
func (c *Client) NewCsvStreamsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeviceDataStreamsPath computes a request path to the device data action of Streams.
func DeviceDataStreamsPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s/data", param0)
}

// Export device data
func (c *Client) DeviceDataStreams(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeviceDataStreamsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeviceDataStreamsRequest create the request corresponding to the device data action endpoint of the Streams resource.
func (c *Client) NewDeviceDataStreamsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeviceLogsStreamsPath computes a request path to the device logs action of Streams.
func DeviceLogsStreamsPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s/logs", param0)
}

// Export device logs
func (c *Client) DeviceLogsStreams(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeviceLogsStreamsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeviceLogsStreamsRequest create the request corresponding to the device logs action endpoint of the Streams resource.
func (c *Client) NewDeviceLogsStreamsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// JSONStreamsPath computes a request path to the json action of Streams.
func JSONStreamsPath(streamID string) string {
	param0 := streamID

	return fmt.Sprintf("/streams/%s/json", param0)
}

// Export stream
func (c *Client) JSONStreams(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewJSONStreamsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewJSONStreamsRequest create the request corresponding to the json action endpoint of the Streams resource.
func (c *Client) NewJSONStreamsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAllStreamsPath computes a request path to the list all action of Streams.
func ListAllStreamsPath() string {

	return fmt.Sprintf("/streams")
}

// List streams
func (c *Client) ListAllStreams(ctx context.Context, path string, fileID *string, page *int) (*http.Response, error) {
	req, err := c.NewListAllStreamsRequest(ctx, path, fileID, page)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAllStreamsRequest create the request corresponding to the list all action endpoint of the Streams resource.
func (c *Client) NewListAllStreamsRequest(ctx context.Context, path string, fileID *string, page *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if fileID != nil {
		values.Set("file_id", *fileID)
	}
	if page != nil {
		tmp145 := strconv.Itoa(*page)
		values.Set("page", tmp145)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDeviceStreamsPath computes a request path to the list device action of Streams.
func ListDeviceStreamsPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s/streams", param0)
}

// List device streams
func (c *Client) ListDeviceStreams(ctx context.Context, path string, fileID *string, page *int) (*http.Response, error) {
	req, err := c.NewListDeviceStreamsRequest(ctx, path, fileID, page)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDeviceStreamsRequest create the request corresponding to the list device action endpoint of the Streams resource.
func (c *Client) NewListDeviceStreamsRequest(ctx context.Context, path string, fileID *string, page *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if fileID != nil {
		values.Set("file_id", *fileID)
	}
	if page != nil {
		tmp146 := strconv.Itoa(*page)
		values.Set("page", tmp146)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDevicesStreamsPath computes a request path to the list devices action of Streams.
func ListDevicesStreamsPath() string {

	return fmt.Sprintf("/streams/devices")
}

// List devices
func (c *Client) ListDevicesStreams(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListDevicesStreamsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDevicesStreamsRequest create the request corresponding to the list devices action endpoint of the Streams resource.
func (c *Client) NewListDevicesStreamsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
