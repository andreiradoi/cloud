// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": files Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CsvFilesPath computes a request path to the csv action of files.
func CsvFilesPath(fileID string) string {
	param0 := fileID

	return fmt.Sprintf("/files/%s/data.csv", param0)
}

// Export file
func (c *Client) CsvFiles(ctx context.Context, path string, dl *bool) (*http.Response, error) {
	req, err := c.NewCsvFilesRequest(ctx, path, dl)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCsvFilesRequest create the request corresponding to the csv action endpoint of the files resource.
func (c *Client) NewCsvFilesRequest(ctx context.Context, path string, dl *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dl != nil {
		tmp154 := strconv.FormatBool(*dl)
		values.Set("dl", tmp154)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeviceInfoFilesPath computes a request path to the device info action of files.
func DeviceInfoFilesPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s", param0)
}

// Device info
func (c *Client) DeviceInfoFiles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeviceInfoFilesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeviceInfoFilesRequest create the request corresponding to the device info action endpoint of the files resource.
func (c *Client) NewDeviceInfoFilesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// FileFilesPath computes a request path to the file action of files.
func FileFilesPath(fileID string) string {
	param0 := fileID

	return fmt.Sprintf("/files/%s", param0)
}

// File info
func (c *Client) FileFiles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewFileFilesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewFileFilesRequest create the request corresponding to the file action endpoint of the files resource.
func (c *Client) NewFileFilesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// JSONFilesPath computes a request path to the json action of files.
func JSONFilesPath(fileID string) string {
	param0 := fileID

	return fmt.Sprintf("/files/%s/data.json", param0)
}

// Export file
func (c *Client) JSONFiles(ctx context.Context, path string, dl *bool) (*http.Response, error) {
	req, err := c.NewJSONFilesRequest(ctx, path, dl)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewJSONFilesRequest create the request corresponding to the json action endpoint of the files resource.
func (c *Client) NewJSONFilesRequest(ctx context.Context, path string, dl *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dl != nil {
		tmp155 := strconv.FormatBool(*dl)
		values.Set("dl", tmp155)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDeviceDataFilesFilesPath computes a request path to the list device data files action of files.
func ListDeviceDataFilesFilesPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s/files/data", param0)
}

// List device files
func (c *Client) ListDeviceDataFilesFiles(ctx context.Context, path string, page *int) (*http.Response, error) {
	req, err := c.NewListDeviceDataFilesFilesRequest(ctx, path, page)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDeviceDataFilesFilesRequest create the request corresponding to the list device data files action endpoint of the files resource.
func (c *Client) NewListDeviceDataFilesFilesRequest(ctx context.Context, path string, page *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp156 := strconv.Itoa(*page)
		values.Set("page", tmp156)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDeviceLogFilesFilesPath computes a request path to the list device log files action of files.
func ListDeviceLogFilesFilesPath(deviceID string) string {
	param0 := deviceID

	return fmt.Sprintf("/devices/%s/files/logs", param0)
}

// List device files
func (c *Client) ListDeviceLogFilesFiles(ctx context.Context, path string, page *int) (*http.Response, error) {
	req, err := c.NewListDeviceLogFilesFilesRequest(ctx, path, page)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDeviceLogFilesFilesRequest create the request corresponding to the list device log files action endpoint of the files resource.
func (c *Client) NewListDeviceLogFilesFilesRequest(ctx context.Context, path string, page *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp157 := strconv.Itoa(*page)
		values.Set("page", tmp157)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDevicesFilesPath computes a request path to the list devices action of files.
func ListDevicesFilesPath() string {

	return fmt.Sprintf("/files/devices")
}

// List devices
func (c *Client) ListDevicesFiles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListDevicesFilesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDevicesFilesRequest create the request corresponding to the list devices action endpoint of the files resource.
func (c *Client) NewListDevicesFilesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RawFilesPath computes a request path to the raw action of files.
func RawFilesPath(fileID string) string {
	param0 := fileID

	return fmt.Sprintf("/files/%s/data.fkpb", param0)
}

// Export file
func (c *Client) RawFiles(ctx context.Context, path string, dl *bool) (*http.Response, error) {
	req, err := c.NewRawFilesRequest(ctx, path, dl)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRawFilesRequest create the request corresponding to the raw action endpoint of the files resource.
func (c *Client) NewRawFilesRequest(ctx context.Context, path string, dl *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dl != nil {
		tmp158 := strconv.FormatBool(*dl)
		values.Set("dl", tmp158)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
