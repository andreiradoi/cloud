// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "fieldkit": source_token Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddSourceTokenPath computes a request path to the add action of source_token.
func AddSourceTokenPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/source-tokens", param0)
}

// Add an source token
func (c *Client) AddSourceToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAddSourceTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddSourceTokenRequest create the request corresponding to the add action endpoint of the source_token resource.
func (c *Client) NewAddSourceTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteSourceTokenPath computes a request path to the delete action of source_token.
func DeleteSourceTokenPath(sourceTokenID int) string {
	param0 := strconv.Itoa(sourceTokenID)

	return fmt.Sprintf("/source-tokens/%s", param0)
}

// Delete an source token
func (c *Client) DeleteSourceToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteSourceTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteSourceTokenRequest create the request corresponding to the delete action endpoint of the source_token resource.
func (c *Client) NewDeleteSourceTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListSourceTokenPath computes a request path to the list action of source_token.
func ListSourceTokenPath(project string, expedition string) string {
	param0 := project
	param1 := expedition

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s/source-tokens", param0, param1)
}

// List an expedition's source tokens
func (c *Client) ListSourceToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSourceTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSourceTokenRequest create the request corresponding to the list action endpoint of the source_token resource.
func (c *Client) NewListSourceTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListIDSourceTokenPath computes a request path to the list id action of source_token.
func ListIDSourceTokenPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/source-tokens", param0)
}

// Update an expedition's source tokens
func (c *Client) ListIDSourceToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIDSourceTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIDSourceTokenRequest create the request corresponding to the list id action endpoint of the source_token resource.
func (c *Client) NewListIDSourceTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
