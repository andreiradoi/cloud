// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "fieldkit": team Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddTeamPath computes a request path to the add action of team.
func AddTeamPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/team", param0)
}

// Add a team
func (c *Client) AddTeam(ctx context.Context, path string, payload *AddTeamPayload) (*http.Response, error) {
	req, err := c.NewAddTeamRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddTeamRequest create the request corresponding to the add action endpoint of the team resource.
func (c *Client) NewAddTeamRequest(ctx context.Context, path string, payload *AddTeamPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// GetTeamPath computes a request path to the get action of team.
func GetTeamPath(project string, expedition string, team string) string {
	param0 := project
	param1 := expedition
	param2 := team

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s/teams/@/%s", param0, param1, param2)
}

// Add a team
func (c *Client) GetTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetTeamRequest create the request corresponding to the get action endpoint of the team resource.
func (c *Client) NewGetTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// GetIDTeamPath computes a request path to the get id action of team.
func GetIDTeamPath(teamID int) string {
	param0 := strconv.Itoa(teamID)

	return fmt.Sprintf("/teams/%s", param0)
}

// Add a team
func (c *Client) GetIDTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetIDTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetIDTeamRequest create the request corresponding to the get id action endpoint of the team resource.
func (c *Client) NewGetIDTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListTeamPath computes a request path to the list action of team.
func ListTeamPath(project string, expedition string) string {
	param0 := project
	param1 := expedition

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s/teams", param0, param1)
}

// List an expedition's teams
func (c *Client) ListTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTeamRequest create the request corresponding to the list action endpoint of the team resource.
func (c *Client) NewListTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListIDTeamPath computes a request path to the list id action of team.
func ListIDTeamPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/teams", param0)
}

// List an expedition's teams
func (c *Client) ListIDTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIDTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIDTeamRequest create the request corresponding to the list id action endpoint of the team resource.
func (c *Client) NewListIDTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
