// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": station Resource Client
//
// Command:
// $ main

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListStationPath computes a request path to the list action of station.
func ListStationPath() string {

	return fmt.Sprintf("/stations")
}

// List stations
func (c *Client) ListStation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListStationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListStationRequest create the request corresponding to the list action endpoint of the station resource.
func (c *Client) NewListStationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListProjectStationPath computes a request path to the list project action of station.
func ListProjectStationPath(projectID string) string {
	param0 := projectID

	return fmt.Sprintf("/projects/%s/stations", param0)
}

// List project stations
func (c *Client) ListProjectStation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListProjectStationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListProjectStationRequest create the request corresponding to the list project action endpoint of the station resource.
func (c *Client) NewListProjectStationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// PhotoStationPath computes a request path to the photo action of station.
func PhotoStationPath(stationID int) string {
	param0 := strconv.Itoa(stationID)

	return fmt.Sprintf("/stations/%s/photo", param0)
}

// PhotoStation makes a request to the photo action endpoint of the station resource
func (c *Client) PhotoStation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewPhotoStationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPhotoStationRequest create the request corresponding to the photo action endpoint of the station resource.
func (c *Client) NewPhotoStationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
