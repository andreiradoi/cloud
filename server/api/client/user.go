// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": user Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddUserPath computes a request path to the add action of user.
func AddUserPath() string {

	return fmt.Sprintf("/users")
}

// Add a user
func (c *Client) AddUser(ctx context.Context, path string, payload *AddUserPayload) (*http.Response, error) {
	req, err := c.NewAddUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddUserRequest create the request corresponding to the add action endpoint of the user resource.
func (c *Client) NewAddUserRequest(ctx context.Context, path string, payload *AddUserPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// AdminDeleteUserPayload is the user admin delete action payload.
type AdminDeleteUserPayload struct {
	Email    string `form:"email" json:"email" yaml:"email" xml:"email"`
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// AdminDeleteUserPath computes a request path to the admin delete action of user.
func AdminDeleteUserPath() string {

	return fmt.Sprintf("/admin/user")
}

// AdminDeleteUser makes a request to the admin delete action endpoint of the user resource
func (c *Client) AdminDeleteUser(ctx context.Context, path string, payload *AdminDeleteUserPayload) (*http.Response, error) {
	req, err := c.NewAdminDeleteUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAdminDeleteUserRequest create the request corresponding to the admin delete action endpoint of the user resource.
func (c *Client) NewAdminDeleteUserRequest(ctx context.Context, path string, payload *AdminDeleteUserPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ChangePasswordUserPath computes a request path to the change password action of user.
func ChangePasswordUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s/password", param0)
}

// Update a user password
func (c *Client) ChangePasswordUser(ctx context.Context, path string, payload *UpdateUserPasswordPayload) (*http.Response, error) {
	req, err := c.NewChangePasswordUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewChangePasswordUserRequest create the request corresponding to the change password action endpoint of the user resource.
func (c *Client) NewChangePasswordUserRequest(ctx context.Context, path string, payload *UpdateUserPasswordPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetCurrentUserPath computes a request path to the get current action of user.
func GetCurrentUserPath() string {

	return fmt.Sprintf("/user")
}

// Get the authenticated user
func (c *Client) GetCurrentUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetCurrentUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetCurrentUserRequest create the request corresponding to the get current action endpoint of the user resource.
func (c *Client) NewGetCurrentUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListByProjectUserPath computes a request path to the list by project action of user.
func ListByProjectUserPath(projectID string) string {
	param0 := projectID

	return fmt.Sprintf("/users/project/%s", param0)
}

// List users by project
func (c *Client) ListByProjectUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListByProjectUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListByProjectUserRequest create the request corresponding to the list by project action endpoint of the user resource.
func (c *Client) NewListByProjectUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// LoginUserPath computes a request path to the login action of user.
func LoginUserPath() string {

	return fmt.Sprintf("/login")
}

// Creates a valid JWT given login credentials.
func (c *Client) LoginUser(ctx context.Context, path string, payload *LoginPayload) (*http.Response, error) {
	req, err := c.NewLoginUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginUserRequest create the request corresponding to the login action endpoint of the user resource.
func (c *Client) NewLoginUserRequest(ctx context.Context, path string, payload *LoginPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// LogoutUserPath computes a request path to the logout action of user.
func LogoutUserPath() string {

	return fmt.Sprintf("/logout")
}

// Creates a valid JWT given login credentials.
func (c *Client) LogoutUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLogoutUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLogoutUserRequest create the request corresponding to the logout action endpoint of the user resource.
func (c *Client) NewLogoutUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ProjectRolesUserPath computes a request path to the project roles action of user.
func ProjectRolesUserPath() string {

	return fmt.Sprintf("/projects/roles")
}

// ProjectRolesUser makes a request to the project roles action endpoint of the user resource
func (c *Client) ProjectRolesUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewProjectRolesUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewProjectRolesUserRequest create the request corresponding to the project roles action endpoint of the user resource.
func (c *Client) NewProjectRolesUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RecoveryUserPath computes a request path to the recovery action of user.
func RecoveryUserPath() string {

	return fmt.Sprintf("/user/recovery")
}

// RecoveryUser makes a request to the recovery action endpoint of the user resource
func (c *Client) RecoveryUser(ctx context.Context, path string, payload *RecoveryPayload) (*http.Response, error) {
	req, err := c.NewRecoveryUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRecoveryUserRequest create the request corresponding to the recovery action endpoint of the user resource.
func (c *Client) NewRecoveryUserRequest(ctx context.Context, path string, payload *RecoveryPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// RecoveryLookupUserPath computes a request path to the recovery lookup action of user.
func RecoveryLookupUserPath() string {

	return fmt.Sprintf("/user/recovery/lookup")
}

// RecoveryLookupUser makes a request to the recovery lookup action endpoint of the user resource
func (c *Client) RecoveryLookupUser(ctx context.Context, path string, payload *RecoveryLookupPayload) (*http.Response, error) {
	req, err := c.NewRecoveryLookupUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRecoveryLookupUserRequest create the request corresponding to the recovery lookup action endpoint of the user resource.
func (c *Client) NewRecoveryLookupUserRequest(ctx context.Context, path string, payload *RecoveryLookupPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// RefreshUserPayload is the user refresh action payload.
type RefreshUserPayload struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token" yaml:"refresh_token" xml:"refresh_token"`
}

// RefreshUserPath computes a request path to the refresh action of user.
func RefreshUserPath() string {

	return fmt.Sprintf("/refresh")
}

// Creates a valid JWT given a refresh token.
func (c *Client) RefreshUser(ctx context.Context, path string, payload *RefreshUserPayload) (*http.Response, error) {
	req, err := c.NewRefreshUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRefreshUserRequest create the request corresponding to the refresh action endpoint of the user resource.
func (c *Client) NewRefreshUserRequest(ctx context.Context, path string, payload *RefreshUserPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// SendValidationUserPath computes a request path to the send validation action of user.
func SendValidationUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s/validate-email", param0)
}

// SendValidationUser makes a request to the send validation action endpoint of the user resource
func (c *Client) SendValidationUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSendValidationUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendValidationUserRequest create the request corresponding to the send validation action endpoint of the user resource.
func (c *Client) NewSendValidationUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// TransmissionTokenUserPath computes a request path to the transmission token action of user.
func TransmissionTokenUserPath() string {

	return fmt.Sprintf("/user/transmission-token")
}

// TransmissionTokenUser makes a request to the transmission token action endpoint of the user resource
func (c *Client) TransmissionTokenUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewTransmissionTokenUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewTransmissionTokenUserRequest create the request corresponding to the transmission token action endpoint of the user resource.
func (c *Client) NewTransmissionTokenUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateUserPath computes a request path to the update action of user.
func UpdateUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s", param0)
}

// Update a user
func (c *Client) UpdateUser(ctx context.Context, path string, payload *UpdateUserPayload) (*http.Response, error) {
	req, err := c.NewUpdateUserRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserRequest create the request corresponding to the update action endpoint of the user resource.
func (c *Client) NewUpdateUserRequest(ctx context.Context, path string, payload *UpdateUserPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ValidateUserPath computes a request path to the validate action of user.
func ValidateUserPath() string {

	return fmt.Sprintf("/validate")
}

// Validate a user's email address.
func (c *Client) ValidateUser(ctx context.Context, path string, token string) (*http.Response, error) {
	req, err := c.NewValidateUserRequest(ctx, path, token)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewValidateUserRequest create the request corresponding to the validate action endpoint of the user resource.
func (c *Client) NewValidateUserRequest(ctx context.Context, path string, token string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("token", token)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
