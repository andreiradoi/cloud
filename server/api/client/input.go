// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fieldkit": input Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListInputPath computes a request path to the list action of input.
func ListInputPath(project string, expedition string) string {
	param0 := project
	param1 := expedition

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s/inputs", param0, param1)
}

// List a project's inputs
func (c *Client) ListInput(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListInputRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListInputRequest create the request corresponding to the list action endpoint of the input resource.
func (c *Client) NewListInputRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListExpeditionIDInputPath computes a request path to the list expedition id action of input.
func ListExpeditionIDInputPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/inputs", param0)
}

// List an expedition's inputs
func (c *Client) ListExpeditionIDInput(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListExpeditionIDInputRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListExpeditionIDInputRequest create the request corresponding to the list expedition id action endpoint of the input resource.
func (c *Client) NewListExpeditionIDInputRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListIDInputPath computes a request path to the list id action of input.
func ListIDInputPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/%s", param0)
}

// List an input
func (c *Client) ListIDInput(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIDInputRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIDInputRequest create the request corresponding to the list id action endpoint of the input resource.
func (c *Client) NewListIDInputRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SummaryByIDInputPath computes a request path to the summary by id action of input.
func SummaryByIDInputPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/%s/summary", param0)
}

// List an input
func (c *Client) SummaryByIDInput(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSummaryByIDInputRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSummaryByIDInputRequest create the request corresponding to the summary by id action endpoint of the input resource.
func (c *Client) NewSummaryByIDInputRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateInputPath computes a request path to the update action of input.
func UpdateInputPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/%s", param0)
}

// Update an input
func (c *Client) UpdateInput(ctx context.Context, path string, payload *UpdateInputPayload) (*http.Response, error) {
	req, err := c.NewUpdateInputRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateInputRequest create the request corresponding to the update action endpoint of the input resource.
func (c *Client) NewUpdateInputRequest(ctx context.Context, path string, payload *UpdateInputPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
