// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "fieldkit": administrator Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddAdministratorPath computes a request path to the add action of administrator.
func AddAdministratorPath(projectID int) string {
	param0 := strconv.Itoa(projectID)

	return fmt.Sprintf("/projects/%s/administrators", param0)
}

// Add an administrator to a project
func (c *Client) AddAdministrator(ctx context.Context, path string, payload *AddAdministratorPayload) (*http.Response, error) {
	req, err := c.NewAddAdministratorRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddAdministratorRequest create the request corresponding to the add action endpoint of the administrator resource.
func (c *Client) NewAddAdministratorRequest(ctx context.Context, path string, payload *AddAdministratorPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteAdministratorPath computes a request path to the delete action of administrator.
func DeleteAdministratorPath(projectID int, userID int) string {
	param0 := strconv.Itoa(projectID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/projects/%s/administrators/%s", param0, param1)
}

// Remove an administrator from a project
func (c *Client) DeleteAdministrator(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAdministratorRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAdministratorRequest create the request corresponding to the delete action endpoint of the administrator resource.
func (c *Client) NewDeleteAdministratorRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetAdministratorPath computes a request path to the get action of administrator.
func GetAdministratorPath(project string, username string) string {
	param0 := project
	param1 := username

	return fmt.Sprintf("/projects/@/%s/administrators/@/%s", param0, param1)
}

// Get an administrator
func (c *Client) GetAdministrator(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetAdministratorRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetAdministratorRequest create the request corresponding to the get action endpoint of the administrator resource.
func (c *Client) NewGetAdministratorRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetIDAdministratorPath computes a request path to the get id action of administrator.
func GetIDAdministratorPath(projectID int, userID int) string {
	param0 := strconv.Itoa(projectID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/projects/%s/administrators/%s", param0, param1)
}

// Get an administrator
func (c *Client) GetIDAdministrator(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetIDAdministratorRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetIDAdministratorRequest create the request corresponding to the get id action endpoint of the administrator resource.
func (c *Client) NewGetIDAdministratorRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListAdministratorPath computes a request path to the list action of administrator.
func ListAdministratorPath(project string) string {
	param0 := project

	return fmt.Sprintf("/projects/@/%s/administrators", param0)
}

// List an project's administrators
func (c *Client) ListAdministrator(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAdministratorRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAdministratorRequest create the request corresponding to the list action endpoint of the administrator resource.
func (c *Client) NewListAdministratorRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListIDAdministratorPath computes a request path to the list id action of administrator.
func ListIDAdministratorPath(projectID int) string {
	param0 := strconv.Itoa(projectID)

	return fmt.Sprintf("/projects/%s/administrators", param0)
}

// List an projects's administrators
func (c *Client) ListIDAdministrator(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIDAdministratorRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIDAdministratorRequest create the request corresponding to the list id action endpoint of the administrator resource.
func (c *Client) NewListIDAdministratorRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
