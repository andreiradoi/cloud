// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "fieldkit": fieldkit Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddFieldkitPath computes a request path to the add action of fieldkit.
func AddFieldkitPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/inputs/fieldkits", param0)
}

// Add a Fieldkit input
func (c *Client) AddFieldkit(ctx context.Context, path string, payload *AddFieldkitInputPayload) (*http.Response, error) {
	req, err := c.NewAddFieldkitRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddFieldkitRequest create the request corresponding to the add action endpoint of the fieldkit resource.
func (c *Client) NewAddFieldkitRequest(ctx context.Context, path string, payload *AddFieldkitInputPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// GetIDFieldkitPath computes a request path to the get id action of fieldkit.
func GetIDFieldkitPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/fieldkits/%s", param0)
}

// Get a Fieldkit input
func (c *Client) GetIDFieldkit(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetIDFieldkitRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetIDFieldkitRequest create the request corresponding to the get id action endpoint of the fieldkit resource.
func (c *Client) NewGetIDFieldkitRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListFieldkitPath computes a request path to the list action of fieldkit.
func ListFieldkitPath(project string, expedition string) string {
	param0 := project
	param1 := expedition

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s/inputs/fieldkits", param0, param1)
}

// List an expedition's Fieldkit inputs
func (c *Client) ListFieldkit(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListFieldkitRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListFieldkitRequest create the request corresponding to the list action endpoint of the fieldkit resource.
func (c *Client) NewListFieldkitRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListIDFieldkitPath computes a request path to the list id action of fieldkit.
func ListIDFieldkitPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s/inputs/fieldkits", param0)
}

// List an expedition's Fieldkit inputs
func (c *Client) ListIDFieldkit(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListIDFieldkitRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListIDFieldkitRequest create the request corresponding to the list id action endpoint of the fieldkit resource.
func (c *Client) NewListIDFieldkitRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SendBinaryFieldkitPath computes a request path to the send binary action of fieldkit.
func SendBinaryFieldkitPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/fieldkits/%s/send/binary", param0)
}

// Send binary data
func (c *Client) SendBinaryFieldkit(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSendBinaryFieldkitRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendBinaryFieldkitRequest create the request corresponding to the send binary action endpoint of the fieldkit resource.
func (c *Client) NewSendBinaryFieldkitRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SendCsvFieldkitPath computes a request path to the send csv action of fieldkit.
func SendCsvFieldkitPath(inputID int) string {
	param0 := strconv.Itoa(inputID)

	return fmt.Sprintf("/inputs/fieldkits/%s/send/csv", param0)
}

// Send CSV data
func (c *Client) SendCsvFieldkit(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSendCsvFieldkitRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendCsvFieldkitRequest create the request corresponding to the send csv action endpoint of the fieldkit resource.
func (c *Client) NewSendCsvFieldkitRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SetBinaryFieldkitPath computes a request path to the set binary action of fieldkit.
func SetBinaryFieldkitPath(inputID int, binaryID int) string {
	param0 := strconv.Itoa(inputID)
	param1 := strconv.Itoa(binaryID)

	return fmt.Sprintf("/inputs/fieldkits/%s/binary/%s", param0, param1)
}

// Set a Fieldkit binary format
func (c *Client) SetBinaryFieldkit(ctx context.Context, path string, payload *SetFieldkitBinaryPayload) (*http.Response, error) {
	req, err := c.NewSetBinaryFieldkitRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSetBinaryFieldkitRequest create the request corresponding to the set binary action endpoint of the fieldkit resource.
func (c *Client) NewSetBinaryFieldkitRequest(ctx context.Context, path string, payload *SetFieldkitBinaryPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
