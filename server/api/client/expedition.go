// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "fieldkit": expedition Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddExpeditionPath computes a request path to the add action of expedition.
func AddExpeditionPath(projectID int) string {
	param0 := strconv.Itoa(projectID)

	return fmt.Sprintf("/projects/%s/expedition", param0)
}

// Add a expedition
func (c *Client) AddExpedition(ctx context.Context, path string, payload *AddExpeditionPayload) (*http.Response, error) {
	req, err := c.NewAddExpeditionRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddExpeditionRequest create the request corresponding to the add action endpoint of the expedition resource.
func (c *Client) NewAddExpeditionRequest(ctx context.Context, path string, payload *AddExpeditionPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// GetExpeditionPath computes a request path to the get action of expedition.
func GetExpeditionPath(project string, expedition string) string {
	param0 := project
	param1 := expedition

	return fmt.Sprintf("/projects/@/%s/expeditions/@/%s", param0, param1)
}

// Add a expedition
func (c *Client) GetExpedition(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetExpeditionRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetExpeditionRequest create the request corresponding to the get action endpoint of the expedition resource.
func (c *Client) NewGetExpeditionRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// GetIDExpeditionPath computes a request path to the get id action of expedition.
func GetIDExpeditionPath(expeditionID int) string {
	param0 := strconv.Itoa(expeditionID)

	return fmt.Sprintf("/expeditions/%s", param0)
}

// Add a expedition
func (c *Client) GetIDExpedition(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetIDExpeditionRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetIDExpeditionRequest create the request corresponding to the get id action endpoint of the expedition resource.
func (c *Client) NewGetIDExpeditionRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListExpeditionPath computes a request path to the list action of expedition.
func ListExpeditionPath(project string) string {
	param0 := project

	return fmt.Sprintf("/projects/@/%s/expeditions", param0)
}

// List a project's expeditions
func (c *Client) ListExpedition(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListExpeditionRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListExpeditionRequest create the request corresponding to the list action endpoint of the expedition resource.
func (c *Client) NewListExpeditionRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
