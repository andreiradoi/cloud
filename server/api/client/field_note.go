// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": field_note Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddFieldNotePath computes a request path to the add action of field_note.
func AddFieldNotePath(stationID int) string {
	param0 := strconv.Itoa(stationID)

	return fmt.Sprintf("/stations/%s/field-notes", param0)
}

// Add a field note
func (c *Client) AddFieldNote(ctx context.Context, path string, payload *AddFieldNotePayload) (*http.Response, error) {
	req, err := c.NewAddFieldNoteRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddFieldNoteRequest create the request corresponding to the add action endpoint of the field_note resource.
func (c *Client) NewAddFieldNoteRequest(ctx context.Context, path string, payload *AddFieldNotePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteFieldNotePath computes a request path to the delete action of field_note.
func DeleteFieldNotePath(stationID int, fieldNoteID int) string {
	param0 := strconv.Itoa(stationID)
	param1 := strconv.Itoa(fieldNoteID)

	return fmt.Sprintf("/stations/%s/field-notes/%s", param0, param1)
}

// Remove a field note
func (c *Client) DeleteFieldNote(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteFieldNoteRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteFieldNoteRequest create the request corresponding to the delete action endpoint of the field_note resource.
func (c *Client) NewDeleteFieldNoteRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetFieldNotePath computes a request path to the get action of field_note.
func GetFieldNotePath(stationID int) string {
	param0 := strconv.Itoa(stationID)

	return fmt.Sprintf("/stations/%s/field-notes", param0)
}

// Get all field notes for a station
func (c *Client) GetFieldNote(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetFieldNoteRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetFieldNoteRequest create the request corresponding to the get action endpoint of the field_note resource.
func (c *Client) NewGetFieldNoteRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SaveMediaFieldNotePath computes a request path to the save media action of field_note.
func SaveMediaFieldNotePath(stationID int) string {
	param0 := strconv.Itoa(stationID)

	return fmt.Sprintf("/stations/%s/field-note-media", param0)
}

// Save a field note image
func (c *Client) SaveMediaFieldNote(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSaveMediaFieldNoteRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSaveMediaFieldNoteRequest create the request corresponding to the save media action endpoint of the field_note resource.
func (c *Client) NewSaveMediaFieldNoteRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateFieldNotePath computes a request path to the update action of field_note.
func UpdateFieldNotePath(stationID int, fieldNoteID int) string {
	param0 := strconv.Itoa(stationID)
	param1 := strconv.Itoa(fieldNoteID)

	return fmt.Sprintf("/stations/%s/field-notes/%s", param0, param1)
}

// Update a field note
func (c *Client) UpdateFieldNote(ctx context.Context, path string, payload *AddFieldNotePayload) (*http.Response, error) {
	req, err := c.NewUpdateFieldNoteRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateFieldNoteRequest create the request corresponding to the update action endpoint of the field_note resource.
func (c *Client) NewUpdateFieldNoteRequest(ctx context.Context, path string, payload *AddFieldNotePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
