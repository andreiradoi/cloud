// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application User Types
//
// Command:
// $ main

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// addFirmwarePayload user type.
type addFirmwarePayload struct {
	Etag    *string `form:"etag,omitempty" json:"etag,omitempty" yaml:"etag,omitempty" xml:"etag,omitempty"`
	Meta    *string `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
	Module  *string `form:"module,omitempty" json:"module,omitempty" yaml:"module,omitempty" xml:"module,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" yaml:"profile,omitempty" xml:"profile,omitempty"`
	URL     *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}

// Validate validates the addFirmwarePayload type instance.
func (ut *addFirmwarePayload) Validate() (err error) {
	if ut.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "etag"))
	}
	if ut.Module == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "module"))
	}
	if ut.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "profile"))
	}
	if ut.URL == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "url"))
	}
	if ut.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "meta"))
	}
	return
}

// Publicize creates AddFirmwarePayload from addFirmwarePayload
func (ut *addFirmwarePayload) Publicize() *AddFirmwarePayload {
	var pub AddFirmwarePayload
	if ut.Etag != nil {
		pub.Etag = *ut.Etag
	}
	if ut.Meta != nil {
		pub.Meta = *ut.Meta
	}
	if ut.Module != nil {
		pub.Module = *ut.Module
	}
	if ut.Profile != nil {
		pub.Profile = *ut.Profile
	}
	if ut.URL != nil {
		pub.URL = *ut.URL
	}
	return &pub
}

// AddFirmwarePayload user type.
type AddFirmwarePayload struct {
	Etag    string `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	Meta    string `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Module  string `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile string `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	URL     string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the AddFirmwarePayload type instance.
func (ut *AddFirmwarePayload) Validate() (err error) {
	if ut.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "etag"))
	}
	if ut.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "module"))
	}
	if ut.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "profile"))
	}
	if ut.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "url"))
	}
	if ut.Meta == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "meta"))
	}
	return
}

// addUserPayload user type.
type addUserPayload struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Password    *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the addUserPayload type instance.
func (ut *addUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates AddUserPayload from addUserPayload
func (ut *addUserPayload) Publicize() *AddUserPayload {
	var pub AddUserPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.InviteToken != nil {
		pub.InviteToken = ut.InviteToken
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// AddUserPayload user type.
type AddUserPayload struct {
	Email       string  `form:"email" json:"email" yaml:"email" xml:"email"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        string  `form:"name" json:"name" yaml:"name" xml:"name"`
	Password    string  `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the AddUserPayload type instance.
func (ut *AddUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// deviceDataStreamsSummary user type.
type deviceDataStreamsSummary struct {
	Data *deviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *deviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// Publicize creates DeviceDataStreamsSummary from deviceDataStreamsSummary
func (ut *deviceDataStreamsSummary) Publicize() *DeviceDataStreamsSummary {
	var pub DeviceDataStreamsSummary
	if ut.Data != nil {
		pub.Data = ut.Data.Publicize()
	}
	if ut.Meta != nil {
		pub.Meta = ut.Meta.Publicize()
	}
	return &pub
}

// DeviceDataStreamsSummary user type.
type DeviceDataStreamsSummary struct {
	Data *DeviceStreamSummary `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Meta *DeviceStreamSummary `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
}

// deviceStreamSummary user type.
type deviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// Publicize creates DeviceStreamSummary from deviceStreamSummary
func (ut *deviceStreamSummary) Publicize() *DeviceStreamSummary {
	var pub DeviceStreamSummary
	if ut.Records != nil {
		pub.Records = ut.Records
	}
	if ut.Size != nil {
		pub.Size = ut.Size
	}
	return &pub
}

// DeviceStreamSummary user type.
type DeviceStreamSummary struct {
	Records *int `form:"records,omitempty" json:"records,omitempty" yaml:"records,omitempty" xml:"records,omitempty"`
	Size    *int `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
}

// loginPayload user type.
type loginPayload struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	Email    string `form:"email" json:"email" yaml:"email" xml:"email"`
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// recoveryLookupPayload user type.
type recoveryLookupPayload struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
}

// Validate validates the recoveryLookupPayload type instance.
func (ut *recoveryLookupPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	return
}

// Publicize creates RecoveryLookupPayload from recoveryLookupPayload
func (ut *recoveryLookupPayload) Publicize() *RecoveryLookupPayload {
	var pub RecoveryLookupPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	return &pub
}

// RecoveryLookupPayload user type.
type RecoveryLookupPayload struct {
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
}

// Validate validates the RecoveryLookupPayload type instance.
func (ut *RecoveryLookupPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	return
}

// recoveryPayload user type.
type recoveryPayload struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	Token    *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate validates the recoveryPayload type instance.
func (ut *recoveryPayload) Validate() (err error) {
	if ut.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "token"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates RecoveryPayload from recoveryPayload
func (ut *recoveryPayload) Publicize() *RecoveryPayload {
	var pub RecoveryPayload
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	if ut.Token != nil {
		pub.Token = *ut.Token
	}
	return &pub
}

// RecoveryPayload user type.
type RecoveryPayload struct {
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	Token    string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the RecoveryPayload type instance.
func (ut *RecoveryPayload) Validate() (err error) {
	if ut.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "token"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// updateDeviceFirmwarePayload user type.
type updateDeviceFirmwarePayload struct {
	DeviceID   *int `form:"deviceId,omitempty" json:"deviceId,omitempty" yaml:"deviceId,omitempty" xml:"deviceId,omitempty"`
	FirmwareID *int `form:"firmwareId,omitempty" json:"firmwareId,omitempty" yaml:"firmwareId,omitempty" xml:"firmwareId,omitempty"`
}

// Validate validates the updateDeviceFirmwarePayload type instance.
func (ut *updateDeviceFirmwarePayload) Validate() (err error) {
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "deviceId"))
	}
	if ut.FirmwareID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firmwareId"))
	}
	return
}

// Publicize creates UpdateDeviceFirmwarePayload from updateDeviceFirmwarePayload
func (ut *updateDeviceFirmwarePayload) Publicize() *UpdateDeviceFirmwarePayload {
	var pub UpdateDeviceFirmwarePayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.FirmwareID != nil {
		pub.FirmwareID = *ut.FirmwareID
	}
	return &pub
}

// UpdateDeviceFirmwarePayload user type.
type UpdateDeviceFirmwarePayload struct {
	DeviceID   int `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	FirmwareID int `form:"firmwareId" json:"firmwareId" yaml:"firmwareId" xml:"firmwareId"`
}

// Validate validates the UpdateDeviceFirmwarePayload type instance.
func (ut *UpdateDeviceFirmwarePayload) Validate() (err error) {

	return
}

// updateUserPasswordPayload user type.
type updateUserPasswordPayload struct {
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" yaml:"newPassword,omitempty" xml:"newPassword,omitempty"`
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" yaml:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
}

// Validate validates the updateUserPasswordPayload type instance.
func (ut *updateUserPasswordPayload) Validate() (err error) {
	if ut.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "oldPassword"))
	}
	if ut.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "newPassword"))
	}
	if ut.NewPassword != nil {
		if utf8.RuneCountInString(*ut.NewPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.newPassword`, *ut.NewPassword, utf8.RuneCountInString(*ut.NewPassword), 10, true))
		}
	}
	if ut.OldPassword != nil {
		if utf8.RuneCountInString(*ut.OldPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.oldPassword`, *ut.OldPassword, utf8.RuneCountInString(*ut.OldPassword), 10, true))
		}
	}
	return
}

// Publicize creates UpdateUserPasswordPayload from updateUserPasswordPayload
func (ut *updateUserPasswordPayload) Publicize() *UpdateUserPasswordPayload {
	var pub UpdateUserPasswordPayload
	if ut.NewPassword != nil {
		pub.NewPassword = *ut.NewPassword
	}
	if ut.OldPassword != nil {
		pub.OldPassword = *ut.OldPassword
	}
	return &pub
}

// UpdateUserPasswordPayload user type.
type UpdateUserPasswordPayload struct {
	NewPassword string `form:"newPassword" json:"newPassword" yaml:"newPassword" xml:"newPassword"`
	OldPassword string `form:"oldPassword" json:"oldPassword" yaml:"oldPassword" xml:"oldPassword"`
}

// Validate validates the UpdateUserPasswordPayload type instance.
func (ut *UpdateUserPasswordPayload) Validate() (err error) {
	if ut.OldPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "oldPassword"))
	}
	if ut.NewPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "newPassword"))
	}
	if utf8.RuneCountInString(ut.NewPassword) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.newPassword`, ut.NewPassword, utf8.RuneCountInString(ut.NewPassword), 10, true))
	}
	if utf8.RuneCountInString(ut.OldPassword) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.oldPassword`, ut.OldPassword, utf8.RuneCountInString(ut.OldPassword), 10, true))
	}
	return
}

// updateUserPayload user type.
type updateUserPayload struct {
	Bio   *string `form:"bio,omitempty" json:"bio,omitempty" yaml:"bio,omitempty" xml:"bio,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the updateUserPayload type instance.
func (ut *updateUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "bio"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (ut *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if ut.Bio != nil {
		pub.Bio = *ut.Bio
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// UpdateUserPayload user type.
type UpdateUserPayload struct {
	Bio   string `form:"bio" json:"bio" yaml:"bio" xml:"bio"`
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	Name  string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the UpdateUserPayload type instance.
func (ut *UpdateUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Bio == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "bio"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	return
}

// userPhoto user type.
type userPhoto struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}

// Publicize creates UserPhoto from userPhoto
func (ut *userPhoto) Publicize() *UserPhoto {
	var pub UserPhoto
	if ut.URL != nil {
		pub.URL = ut.URL
	}
	return &pub
}

// UserPhoto user type.
type UserPhoto struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}
